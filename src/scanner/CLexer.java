// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/scanner/CLexer.flex

package scanner;

import java.util.HashMap;
import java.util.Map;


@SuppressWarnings("fallthrough")
public class CLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\2\13\1\14"+
    "\1\15\1\13\1\16\1\17\1\20\1\21\1\22\6\23"+
    "\2\24\1\25\1\13\1\26\1\27\1\30\1\25\1\0"+
    "\1\31\1\32\2\31\1\33\1\34\5\35\1\36\10\35"+
    "\1\37\2\35\1\40\2\35\1\13\1\41\1\13\1\42"+
    "\1\35\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\35\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\35\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\13\1\73\1\13\1\74"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\2\4\1\6\1\4\2\7\2\10\1\6\1\10"+
    "\1\11\1\5\17\11\2\5\2\0\1\12\1\0\1\13"+
    "\1\4\1\3\2\0\2\7\1\14\1\0\1\2\1\0"+
    "\1\15\1\0\3\16\2\7\1\16\6\11\1\17\4\11"+
    "\1\17\13\11\1\20\1\13\2\0\2\7\1\0\1\21"+
    "\2\15\1\22\1\0\1\21\1\7\1\23\30\11\1\21"+
    "\1\7\1\2\2\21\1\15\2\22\2\21\2\23\16\11"+
    "\1\22\1\23\11\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\75\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\75\0\u0393\0\267\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\75\0\364"+
    "\0\u0857\0\75\0\u0894\0\u0131\0\75\0\75\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u029f\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u040d\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u0857\0\75\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u0af6\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905"+
    "\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\75\0\75\0\u1a73"+
    "\0\75\0\u0af6\0\u1ab0\0\u1aed\0\u1b2a\0\u0af6\0\u1b67\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u0af6\0\u0af6"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\1\17\3\20\1\21\1\22\1\23\1\24\10\25\1\2"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\25\1\36\1\25\1\37\4\25\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\3\25\1\46\1\47\76\0\2\3"+
    "\1\0\1\3\117\0\1\21\45\0\2\50\1\51\3\50"+
    "\1\52\32\50\1\53\33\50\21\0\4\54\77\0\1\55"+
    "\56\0\1\56\15\0\1\47\45\0\12\57\1\0\26\57"+
    "\1\60\33\57\15\0\1\55\3\0\1\61\3\62\2\0"+
    "\1\55\63\0\1\55\2\0\1\61\3\62\2\0\1\55"+
    "\1\12\65\0\4\63\64\0\1\64\3\0\1\65\6\0"+
    "\1\55\64\0\1\66\1\0\3\67\1\70\4\0\1\71"+
    "\1\72\1\73\2\71\1\74\1\75\1\76\2\0\1\71"+
    "\1\72\2\71\1\73\5\71\1\74\7\71\1\75\2\71"+
    "\1\76\2\71\21\0\1\66\1\0\4\20\4\0\2\71"+
    "\1\73\2\71\1\74\1\75\1\71\2\0\4\71\1\73"+
    "\5\71\1\74\7\71\1\75\5\71\30\0\1\26\1\21"+
    "\74\0\1\21\1\26\65\0\4\25\4\0\10\25\2\0"+
    "\30\25\31\0\1\47\66\0\4\25\4\0\10\25\2\0"+
    "\22\25\1\77\5\25\23\0\4\25\4\0\10\25\2\0"+
    "\17\25\1\100\10\25\23\0\4\25\4\0\10\25\2\0"+
    "\1\101\6\25\1\102\5\25\1\103\12\25\23\0\4\25"+
    "\4\0\10\25\2\0\4\25\1\104\10\25\1\105\12\25"+
    "\23\0\4\25\4\0\10\25\2\0\12\25\1\101\1\25"+
    "\1\106\10\25\1\107\2\25\23\0\4\25\4\0\10\25"+
    "\2\0\12\25\1\110\2\25\1\111\12\25\23\0\4\25"+
    "\4\0\10\25\2\0\15\25\1\77\12\25\23\0\4\25"+
    "\4\0\10\25\2\0\5\25\1\112\6\25\1\113\13\25"+
    "\23\0\4\25\4\0\10\25\2\0\15\25\1\114\12\25"+
    "\23\0\4\25\4\0\10\25\2\0\4\25\1\115\23\25"+
    "\23\0\4\25\4\0\10\25\2\0\7\25\1\116\1\117"+
    "\10\25\1\120\2\25\1\121\3\25\23\0\4\25\4\0"+
    "\10\25\2\0\26\25\1\122\1\25\23\0\4\25\4\0"+
    "\10\25\2\0\14\25\1\123\13\25\23\0\4\25\4\0"+
    "\10\25\2\0\15\25\1\124\12\25\23\0\4\25\4\0"+
    "\10\25\2\0\7\25\1\125\20\25\31\0\1\47\43\0"+
    "\1\56\1\0\2\51\3\0\1\51\1\126\66\51\2\50"+
    "\3\0\70\50\12\0\1\127\62\0\2\57\3\0\70\57"+
    "\17\0\1\66\1\0\4\130\6\0\1\131\2\0\1\132"+
    "\1\133\7\0\1\131\5\0\1\132\7\0\1\133\26\0"+
    "\1\66\1\0\4\62\6\0\1\131\2\0\1\132\1\133"+
    "\7\0\1\131\5\0\1\132\7\0\1\133\7\0\14\64"+
    "\1\134\60\64\2\65\3\0\70\65\21\0\4\135\6\0"+
    "\1\131\13\0\1\131\44\0\1\66\1\0\3\67\1\70"+
    "\4\0\2\71\1\73\2\71\1\136\1\137\1\71\2\0"+
    "\4\71\1\73\5\71\1\136\7\71\1\137\5\71\21\0"+
    "\1\66\1\0\4\70\4\0\2\71\1\73\5\71\2\0"+
    "\4\71\1\73\23\71\23\0\4\71\4\0\10\71\2\0"+
    "\30\71\23\0\2\140\2\71\4\0\10\71\2\0\30\71"+
    "\17\0\2\141\2\0\4\142\4\0\10\71\2\0\30\71"+
    "\23\0\4\71\4\0\5\71\1\143\2\71\2\0\12\71"+
    "\1\143\15\71\23\0\4\71\4\0\5\71\1\74\2\71"+
    "\2\0\12\71\1\74\15\71\23\0\4\144\4\0\4\144"+
    "\4\71\2\0\6\144\22\71\23\0\4\25\4\0\10\25"+
    "\2\0\21\25\1\145\6\25\23\0\4\25\4\0\10\25"+
    "\2\0\4\25\1\146\23\25\23\0\4\25\4\0\10\25"+
    "\2\0\20\25\1\147\7\25\23\0\4\25\4\0\10\25"+
    "\2\0\1\111\27\25\23\0\4\25\4\0\10\25\2\0"+
    "\14\25\1\150\13\25\23\0\4\25\4\0\10\25\2\0"+
    "\5\25\1\151\22\25\23\0\4\25\4\0\10\25\2\0"+
    "\22\25\1\152\5\25\23\0\4\25\4\0\10\25\2\0"+
    "\22\25\1\153\5\25\23\0\4\25\4\0\10\25\2\0"+
    "\21\25\1\154\6\25\23\0\4\25\4\0\10\25\2\0"+
    "\15\25\1\155\12\25\23\0\4\25\4\0\10\25\2\0"+
    "\17\25\1\112\10\25\23\0\4\25\4\0\10\25\2\0"+
    "\21\25\1\112\6\25\23\0\4\25\4\0\10\25\2\0"+
    "\14\25\1\156\13\25\23\0\4\25\4\0\10\25\2\0"+
    "\6\25\1\157\12\25\1\160\6\25\23\0\4\25\4\0"+
    "\10\25\2\0\15\25\1\161\12\25\23\0\4\25\4\0"+
    "\10\25\2\0\6\25\1\162\20\25\1\163\23\0\4\25"+
    "\4\0\10\25\2\0\1\164\16\25\1\165\10\25\23\0"+
    "\4\25\4\0\10\25\2\0\10\25\1\166\17\25\23\0"+
    "\4\25\4\0\10\25\2\0\16\25\1\167\11\25\23\0"+
    "\4\25\4\0\10\25\2\0\10\25\1\170\7\25\1\171"+
    "\7\25\23\0\4\25\4\0\10\25\2\0\10\25\1\172"+
    "\1\25\1\173\15\25\23\0\4\25\4\0\10\25\2\0"+
    "\10\25\1\174\17\25\21\0\1\66\1\0\4\130\6\0"+
    "\1\131\13\0\1\131\42\0\2\141\2\0\4\175\106\0"+
    "\1\176\16\0\1\176\55\0\1\132\16\0\1\132\17\0"+
    "\14\64\1\134\3\64\1\177\54\64\21\0\4\135\6\0"+
    "\1\131\1\200\1\0\1\201\10\0\1\131\1\200\4\0"+
    "\1\201\40\0\4\71\4\0\5\71\1\202\2\71\2\0"+
    "\12\71\1\202\15\71\23\0\4\71\4\0\5\71\1\136"+
    "\2\71\2\0\12\71\1\136\15\71\23\0\2\140\2\71"+
    "\4\0\5\71\1\203\1\204\1\71\2\0\12\71\1\203"+
    "\7\71\1\204\5\71\23\0\4\175\71\0\4\142\4\0"+
    "\3\71\1\205\1\71\1\206\2\71\2\0\5\71\1\205"+
    "\4\71\1\206\15\71\23\0\4\144\4\0\4\144\1\71"+
    "\1\207\1\210\1\71\2\0\6\144\4\71\1\207\7\71"+
    "\1\210\5\71\23\0\4\25\4\0\10\25\2\0\15\25"+
    "\1\112\12\25\23\0\4\25\4\0\10\25\2\0\1\211"+
    "\27\25\23\0\4\25\4\0\10\25\2\0\4\25\1\112"+
    "\23\25\23\0\4\25\4\0\10\25\2\0\20\25\1\113"+
    "\1\212\6\25\23\0\4\25\4\0\10\25\2\0\1\213"+
    "\27\25\23\0\4\25\4\0\10\25\2\0\1\25\1\174"+
    "\26\25\23\0\4\25\4\0\10\25\2\0\13\25\1\112"+
    "\14\25\23\0\4\25\4\0\10\25\2\0\4\25\1\214"+
    "\23\25\23\0\4\25\4\0\10\25\2\0\1\113\27\25"+
    "\23\0\4\25\4\0\10\25\2\0\6\25\1\112\21\25"+
    "\23\0\4\25\4\0\10\25\2\0\10\25\1\215\17\25"+
    "\23\0\4\25\4\0\10\25\2\0\22\25\1\214\5\25"+
    "\23\0\4\25\4\0\10\25\2\0\17\25\1\113\10\25"+
    "\23\0\4\25\4\0\10\25\2\0\14\25\1\216\13\25"+
    "\23\0\4\25\4\0\10\25\2\0\4\25\1\217\23\25"+
    "\23\0\4\25\4\0\10\25\2\0\21\25\1\220\6\25"+
    "\23\0\4\25\4\0\10\25\2\0\22\25\1\221\5\25"+
    "\23\0\4\25\4\0\10\25\2\0\21\25\1\222\6\25"+
    "\23\0\4\25\4\0\10\25\2\0\4\25\1\223\23\25"+
    "\23\0\4\25\4\0\10\25\2\0\15\25\1\224\12\25"+
    "\23\0\4\25\4\0\10\25\2\0\10\25\1\225\17\25"+
    "\23\0\4\25\4\0\10\25\2\0\3\25\1\112\24\25"+
    "\23\0\4\25\4\0\10\25\2\0\1\226\27\25\23\0"+
    "\4\25\4\0\10\25\2\0\12\25\1\147\15\25\23\0"+
    "\4\175\7\0\1\200\1\0\1\201\11\0\1\200\4\0"+
    "\1\201\55\0\1\201\16\0\1\201\40\0\4\71\4\0"+
    "\5\71\1\227\2\71\2\0\12\71\1\227\15\71\23\0"+
    "\4\71\4\0\5\71\1\203\2\71\2\0\12\71\1\203"+
    "\15\71\23\0\4\71\4\0\5\71\1\206\2\71\2\0"+
    "\12\71\1\206\15\71\23\0\4\71\4\0\5\71\1\230"+
    "\2\71\2\0\12\71\1\230\15\71\23\0\4\71\4\0"+
    "\5\71\1\207\2\71\2\0\12\71\1\207\15\71\23\0"+
    "\4\25\4\0\10\25\2\0\11\25\1\112\16\25\23\0"+
    "\4\25\4\0\10\25\2\0\10\25\1\231\17\25\23\0"+
    "\4\25\4\0\10\25\2\0\22\25\1\232\5\25\23\0"+
    "\4\25\4\0\10\25\2\0\17\25\1\224\10\25\23\0"+
    "\4\25\4\0\10\25\2\0\20\25\1\233\7\25\23\0"+
    "\4\25\4\0\10\25\2\0\4\25\1\172\23\25\23\0"+
    "\4\25\4\0\10\25\2\0\15\25\1\234\12\25\23\0"+
    "\4\25\4\0\10\25\2\0\10\25\1\235\17\25\23\0"+
    "\4\25\4\0\10\25\2\0\2\25\1\113\25\25\23\0"+
    "\4\25\4\0\10\25\2\0\2\25\1\236\25\25\23\0"+
    "\4\25\4\0\10\25\2\0\3\25\1\237\24\25\23\0"+
    "\4\25\4\0\10\25\2\0\14\25\1\112\13\25\23\0"+
    "\4\25\4\0\10\25\2\0\6\25\1\162\21\25\23\0"+
    "\4\25\4\0\10\25\2\0\21\25\1\125\6\25\23\0"+
    "\4\25\4\0\10\25\2\0\14\25\1\240\13\25\23\0"+
    "\4\25\4\0\10\25\2\0\12\25\1\113\15\25\23\0"+
    "\4\25\4\0\10\25\2\0\21\25\1\241\6\25\23\0"+
    "\4\25\4\0\10\25\2\0\5\25\1\112\22\25\23\0"+
    "\4\25\4\0\10\25\2\0\2\25\1\112\25\25\23\0"+
    "\4\25\4\0\10\25\2\0\7\25\1\112\20\25\23\0"+
    "\4\25\4\0\10\25\2\0\4\25\1\234\23\25\23\0"+
    "\4\25\4\0\10\25\2\0\22\25\1\147\5\25\23\0"+
    "\4\25\4\0\10\25\2\0\4\25\1\111\23\25\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8540];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\6\1\1\11\25\1\1\11"+
    "\2\0\1\11\1\0\1\1\2\11\2\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\36\1\1\11\2\0\2\1"+
    "\1\0\4\1\1\0\34\1\2\11\1\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private Map<String, Token> tokenTable = new HashMap<>();

private void addToken(String token, TokenType type) {
    Token tokenInfo = tokenTable.getOrDefault(token, new Token(token, type));
    tokenInfo.addOccurrence(yyline + 1);
    tokenTable.put(token, tokenInfo);
}

public Map<String, Token> getTokenTable() {
    return tokenTable;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Character unknown: " + yytext() + " in " + (yyline+1));
            }
          // fall through
          case 20: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 21: break;
          case 3:
            { addToken(yytext(), TokenType.OPERATOR_LOGICAL);
            }
          // fall through
          case 22: break;
          case 4:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC);
            }
          // fall through
          case 23: break;
          case 5:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE);
            }
          // fall through
          case 24: break;
          case 6:
            { addToken(yytext(), TokenType.OPERATOR);
            }
          // fall through
          case 25: break;
          case 7:
            { addToken(yytext(), TokenType.LITERAL_INT);
            }
          // fall through
          case 26: break;
          case 8:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL);
            }
          // fall through
          case 27: break;
          case 9:
            { addToken(yytext(), TokenType.ID);
            }
          // fall through
          case 28: break;
          case 10:
            { addToken(yytext(), TokenType.LITERAL_STR);
            }
          // fall through
          case 29: break;
          case 11:
            { addToken(yytext(), TokenType.LITERAL_CHAR);
            }
          // fall through
          case 30: break;
          case 12:
            { System.err.println("Invalid number format: " + yytext() + " in " + (yyline + 1));
            }
          // fall through
          case 31: break;
          case 13:
            { addToken(yytext(), TokenType.LITERAL_OCTAL);
            }
          // fall through
          case 32: break;
          case 14:
            { System.err.println("Digit before id: " + yytext() + " in " + (yyline+1));
            }
          // fall through
          case 33: break;
          case 15:
            { addToken(yytext(), TokenType.KEYWORD);
            }
          // fall through
          case 34: break;
          case 16:
            { System.err.println("Strings cannot span multiple lines: " + yytext() + " in " + (yyline+1));
            }
          // fall through
          case 35: break;
          case 17:
            { addToken(yytext(), TokenType.LITERAL_DOUBLE);
            }
          // fall through
          case 36: break;
          case 18:
            { addToken(yytext(), TokenType.LITERAL_BINARY);
            }
          // fall through
          case 37: break;
          case 19:
            { addToken(yytext(), TokenType.LITERAL_HEX);
            }
          // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
