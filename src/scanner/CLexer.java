// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/scanner/CLexer.flex

package scanner;

import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.Symbol; // Importa la clase Symbol
import parser.Sym; // Importa los s√≠mbolos generados por CUP


@SuppressWarnings("fallthrough")
public class CLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\2\35\1\37\1\40\5\41\1\42"+
    "\10\41\1\43\2\41\1\44\2\41\1\45\1\46\1\47"+
    "\1\50\1\41\1\0\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\41\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\41\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\20\26\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\2\0\1\44\1\45\2\17\1\46\1\47\1\50"+
    "\1\51\1\52\1\0\1\2\1\53\1\0\1\54\1\0"+
    "\3\55\2\17\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\6\26\1\64\6\26\1\65\15\26\1\66\1\67"+
    "\1\70\1\40\2\0\2\17\1\71\2\0\1\72\2\54"+
    "\1\73\1\0\1\72\1\17\1\74\1\75\1\76\13\26"+
    "\1\77\1\26\1\100\22\26\1\72\1\17\2\0\1\2"+
    "\1\0\2\72\1\54\2\73\2\72\2\74\1\101\1\26"+
    "\1\102\1\103\4\26\1\104\1\105\2\26\1\106\1\107"+
    "\1\110\1\111\13\26\1\112\3\26\1\52\1\73\1\74"+
    "\1\113\1\114\4\26\1\115\2\26\1\116\6\26\1\117"+
    "\2\26\1\120\1\121\2\26\1\122\1\123\1\26\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\4\26\1\132\1\26"+
    "\1\133\2\26\1\134\1\135\1\136\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\105\0\105\0\u026d\0\u02b2\0\105\0\u02f7\0\u033c"+
    "\0\u0381\0\u03c6\0\u040b\0\105\0\105\0\u0450\0\u0495\0\u04da"+
    "\0\105\0\u051f\0\105\0\105\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\105\0\u09f9\0\105"+
    "\0\105\0\105\0\u0a3e\0\105\0\u0a83\0\u0159\0\105\0\105"+
    "\0\105\0\u0ac8\0\u0b0d\0\105\0\105\0\u0b52\0\u0b97\0\105"+
    "\0\105\0\105\0\105\0\u033c\0\u0bdc\0\u0c21\0\105\0\u0c66"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\105\0\105\0\105\0\u0f18\0\105\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u051f\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\105\0\105\0\u0a3e\0\105\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u0d35\0\u19e0\0\105\0\105\0\u1a25\0\u1a6a"+
    "\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u051f\0\u1d1c\0\u051f\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\105"+
    "\0\u1773\0\u2280\0\105\0\u22c5\0\u230a\0\105\0\u0d35\0\u234f"+
    "\0\u2394\0\u23d9\0\u0d35\0\u241e\0\u2463\0\u051f\0\u24a8\0\u051f"+
    "\0\u051f\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u051f\0\u051f\0\u2601"+
    "\0\u2646\0\u051f\0\u051f\0\u051f\0\u051f\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u051f\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u0d35\0\u0d35\0\u051f"+
    "\0\u051f\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u051f\0\u2baa\0\u2bef"+
    "\0\u051f\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u051f"+
    "\0\u2dd2\0\u2e17\0\u051f\0\u051f\0\u2e5c\0\u2ea1\0\u051f\0\u051f"+
    "\0\u2ee6\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u2f2b"+
    "\0\u2f70\0\u2fb5\0\u2ffa\0\u051f\0\u303f\0\u051f\0\u3084\0\u30c9"+
    "\0\u051f\0\u051f\0\u051f\0\u051f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\3\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\10\32\1\33\1\2\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\32\1\45"+
    "\1\32\1\46\1\47\3\32\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\3\32\1\56\1\57\1\60\1\61\106\0"+
    "\2\3\1\0\1\3\132\0\1\62\52\0\2\5\1\63"+
    "\3\5\1\64\37\5\1\65\36\5\23\0\4\66\110\0"+
    "\1\67\63\0\1\70\20\0\1\71\52\0\12\72\1\0"+
    "\33\72\1\73\36\72\32\0\1\74\70\0\1\75\4\0"+
    "\1\76\3\77\3\0\1\100\72\0\1\101\2\0\1\76"+
    "\3\77\3\0\1\102\1\103\74\0\4\104\73\0\1\105"+
    "\4\0\1\106\7\0\1\107\73\0\1\110\1\0\3\111"+
    "\1\112\6\0\1\113\1\114\1\115\2\113\1\116\1\117"+
    "\1\120\4\0\1\113\1\114\2\113\1\115\5\113\1\116"+
    "\7\113\1\117\2\113\1\120\2\113\25\0\1\110\1\0"+
    "\4\23\6\0\2\113\1\115\2\113\1\116\1\117\1\113"+
    "\4\0\4\113\1\115\5\113\1\116\7\113\1\117\5\113"+
    "\35\0\1\121\1\122\104\0\1\123\104\0\1\124\1\125"+
    "\74\0\4\32\6\0\10\32\4\0\30\32\36\0\1\126"+
    "\75\0\4\32\6\0\10\32\4\0\22\32\1\127\5\32"+
    "\27\0\4\32\6\0\10\32\4\0\17\32\1\130\10\32"+
    "\27\0\4\32\6\0\10\32\4\0\1\131\6\32\1\132"+
    "\5\32\1\133\12\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\134\10\32\1\135\12\32\27\0\4\32\6\0"+
    "\10\32\4\0\12\32\1\136\1\32\1\137\10\32\1\140"+
    "\2\32\27\0\4\32\6\0\10\32\4\0\12\32\1\141"+
    "\2\32\1\142\12\32\27\0\4\32\6\0\10\32\4\0"+
    "\15\32\1\143\12\32\27\0\4\32\6\0\10\32\4\0"+
    "\5\32\1\144\6\32\1\145\13\32\27\0\4\32\6\0"+
    "\10\32\4\0\15\32\1\146\12\32\27\0\4\32\6\0"+
    "\10\32\4\0\1\147\27\32\27\0\4\32\6\0\10\32"+
    "\4\0\4\32\1\150\23\32\27\0\4\32\6\0\10\32"+
    "\4\0\7\32\1\151\1\152\10\32\1\153\2\32\1\154"+
    "\3\32\27\0\4\32\6\0\10\32\4\0\26\32\1\155"+
    "\1\32\27\0\4\32\6\0\10\32\4\0\14\32\1\156"+
    "\13\32\27\0\4\32\6\0\10\32\4\0\15\32\1\157"+
    "\12\32\27\0\4\32\6\0\10\32\4\0\7\32\1\160"+
    "\7\32\1\161\10\32\36\0\1\162\47\0\1\163\2\0"+
    "\2\63\3\0\1\63\1\164\76\63\2\5\3\0\100\5"+
    "\12\0\1\165\72\0\2\72\3\0\100\72\21\0\1\110"+
    "\1\0\4\166\10\0\1\167\2\0\1\170\1\171\11\0"+
    "\1\167\5\0\1\170\7\0\1\171\32\0\1\110\1\0"+
    "\4\77\10\0\1\167\2\0\1\170\1\171\11\0\1\167"+
    "\5\0\1\170\7\0\1\171\11\0\2\105\1\172\12\105"+
    "\1\173\67\105\2\106\3\0\100\106\21\0\1\174\1\0"+
    "\4\175\10\0\1\167\15\0\1\167\50\0\1\110\1\0"+
    "\3\111\1\112\6\0\2\113\1\115\2\113\1\176\1\177"+
    "\1\113\4\0\4\113\1\115\5\113\1\176\7\113\1\177"+
    "\5\113\25\0\1\110\1\0\4\112\6\0\2\113\1\115"+
    "\5\113\4\0\4\113\1\115\23\113\27\0\4\113\6\0"+
    "\10\113\4\0\30\113\27\0\2\200\2\113\6\0\10\113"+
    "\4\0\30\113\22\0\1\201\1\0\1\201\2\0\4\202"+
    "\6\0\10\113\4\0\30\113\27\0\4\113\6\0\5\113"+
    "\1\203\2\113\4\0\12\113\1\203\15\113\27\0\4\113"+
    "\6\0\5\113\1\116\2\113\4\0\12\113\1\116\15\113"+
    "\27\0\4\204\6\0\4\204\4\113\4\0\6\204\22\113"+
    "\36\0\1\205\104\0\1\206\75\0\4\32\6\0\10\32"+
    "\4\0\21\32\1\207\6\32\27\0\4\32\6\0\10\32"+
    "\4\0\4\32\1\210\23\32\27\0\4\32\6\0\10\32"+
    "\4\0\20\32\1\211\7\32\27\0\4\32\6\0\10\32"+
    "\4\0\1\212\27\32\27\0\4\32\6\0\10\32\4\0"+
    "\14\32\1\213\13\32\27\0\4\32\6\0\10\32\4\0"+
    "\5\32\1\214\22\32\27\0\4\32\6\0\10\32\4\0"+
    "\22\32\1\215\5\32\27\0\4\32\6\0\10\32\4\0"+
    "\20\32\1\216\7\32\27\0\4\32\6\0\10\32\4\0"+
    "\22\32\1\217\5\32\27\0\4\32\6\0\10\32\4\0"+
    "\21\32\1\220\6\32\27\0\4\32\6\0\10\32\4\0"+
    "\15\32\1\221\12\32\27\0\4\32\6\0\10\32\4\0"+
    "\17\32\1\222\10\32\27\0\4\32\6\0\10\32\4\0"+
    "\21\32\1\223\6\32\27\0\4\32\6\0\10\32\4\0"+
    "\21\32\1\224\6\32\27\0\4\32\6\0\10\32\4\0"+
    "\14\32\1\225\13\32\27\0\4\32\6\0\10\32\4\0"+
    "\10\32\1\226\17\32\27\0\4\32\6\0\10\32\4\0"+
    "\1\227\5\32\1\230\12\32\1\231\6\32\27\0\4\32"+
    "\6\0\10\32\4\0\15\32\1\232\12\32\27\0\4\32"+
    "\6\0\10\32\4\0\6\32\1\233\20\32\1\234\27\0"+
    "\4\32\6\0\10\32\4\0\1\235\16\32\1\236\10\32"+
    "\27\0\4\32\6\0\10\32\4\0\10\32\1\237\17\32"+
    "\27\0\4\32\6\0\10\32\4\0\16\32\1\240\11\32"+
    "\27\0\4\32\6\0\10\32\4\0\10\32\1\241\7\32"+
    "\1\242\7\32\27\0\4\32\6\0\10\32\4\0\10\32"+
    "\1\243\1\32\1\244\15\32\27\0\4\32\6\0\10\32"+
    "\4\0\10\32\1\245\17\32\27\0\4\32\6\0\10\32"+
    "\4\0\10\32\1\246\17\32\25\0\1\110\1\0\4\166"+
    "\10\0\1\167\15\0\1\167\45\0\1\201\1\0\1\201"+
    "\2\0\4\247\120\0\1\250\20\0\1\250\63\0\1\170"+
    "\20\0\1\170\21\0\15\251\1\252\67\251\2\105\1\251"+
    "\12\105\1\173\4\105\1\253\62\105\21\0\1\174\1\0"+
    "\4\104\77\0\1\254\1\0\4\175\10\0\1\167\1\255"+
    "\1\0\1\256\12\0\1\167\1\255\4\0\1\256\44\0"+
    "\4\113\6\0\5\113\1\257\2\113\4\0\12\113\1\257"+
    "\15\113\27\0\4\113\6\0\5\113\1\176\2\113\4\0"+
    "\12\113\1\176\15\113\27\0\2\200\2\113\6\0\5\113"+
    "\1\260\1\261\1\113\4\0\12\113\1\260\7\113\1\261"+
    "\5\113\27\0\4\247\101\0\4\202\6\0\3\113\1\262"+
    "\1\113\1\263\2\113\4\0\5\113\1\262\4\113\1\263"+
    "\15\113\27\0\4\204\6\0\4\204\1\113\1\264\1\265"+
    "\1\113\4\0\6\204\4\113\1\264\7\113\1\265\5\113"+
    "\27\0\4\32\6\0\10\32\4\0\15\32\1\266\12\32"+
    "\27\0\4\32\6\0\10\32\4\0\1\267\27\32\27\0"+
    "\4\32\6\0\10\32\4\0\4\32\1\270\23\32\27\0"+
    "\4\32\6\0\10\32\4\0\17\32\1\271\10\32\27\0"+
    "\4\32\6\0\10\32\4\0\20\32\1\272\1\273\6\32"+
    "\27\0\4\32\6\0\10\32\4\0\1\274\27\32\27\0"+
    "\4\32\6\0\10\32\4\0\1\32\1\275\26\32\27\0"+
    "\4\32\6\0\10\32\4\0\4\32\1\276\23\32\27\0"+
    "\4\32\6\0\10\32\4\0\13\32\1\277\14\32\27\0"+
    "\4\32\6\0\10\32\4\0\4\32\1\300\23\32\27\0"+
    "\4\32\6\0\10\32\4\0\1\301\27\32\27\0\4\32"+
    "\6\0\10\32\4\0\15\32\1\302\12\32\27\0\4\32"+
    "\6\0\10\32\4\0\6\32\1\303\21\32\27\0\4\32"+
    "\6\0\10\32\4\0\14\32\1\304\13\32\27\0\4\32"+
    "\6\0\10\32\4\0\3\32\1\305\24\32\27\0\4\32"+
    "\6\0\10\32\4\0\10\32\1\306\17\32\27\0\4\32"+
    "\6\0\10\32\4\0\22\32\1\307\5\32\27\0\4\32"+
    "\6\0\10\32\4\0\17\32\1\310\10\32\27\0\4\32"+
    "\6\0\10\32\4\0\14\32\1\311\13\32\27\0\4\32"+
    "\6\0\10\32\4\0\4\32\1\312\23\32\27\0\4\32"+
    "\6\0\10\32\4\0\21\32\1\313\6\32\27\0\4\32"+
    "\6\0\10\32\4\0\22\32\1\314\5\32\27\0\4\32"+
    "\6\0\10\32\4\0\21\32\1\315\6\32\27\0\4\32"+
    "\6\0\10\32\4\0\4\32\1\316\23\32\27\0\4\32"+
    "\6\0\10\32\4\0\15\32\1\317\12\32\27\0\4\32"+
    "\6\0\10\32\4\0\10\32\1\320\17\32\27\0\4\32"+
    "\6\0\10\32\4\0\3\32\1\321\24\32\27\0\4\32"+
    "\6\0\10\32\4\0\1\322\27\32\27\0\4\32\6\0"+
    "\10\32\4\0\12\32\1\323\15\32\27\0\4\32\6\0"+
    "\10\32\4\0\21\32\1\324\6\32\27\0\4\247\11\0"+
    "\1\255\1\0\1\256\13\0\1\255\4\0\1\256\21\0"+
    "\15\251\1\252\4\251\1\253\62\251\21\0\1\174\1\0"+
    "\4\325\120\0\1\256\20\0\1\256\44\0\4\113\6\0"+
    "\5\113\1\326\2\113\4\0\12\113\1\326\15\113\27\0"+
    "\4\113\6\0\5\113\1\260\2\113\4\0\12\113\1\260"+
    "\15\113\27\0\4\113\6\0\5\113\1\263\2\113\4\0"+
    "\12\113\1\263\15\113\27\0\4\113\6\0\5\113\1\327"+
    "\2\113\4\0\12\113\1\327\15\113\27\0\4\113\6\0"+
    "\5\113\1\264\2\113\4\0\12\113\1\264\15\113\27\0"+
    "\4\32\6\0\10\32\4\0\11\32\1\330\16\32\27\0"+
    "\4\32\6\0\10\32\4\0\21\32\1\331\6\32\27\0"+
    "\4\32\6\0\10\32\4\0\10\32\1\332\17\32\27\0"+
    "\4\32\6\0\10\32\4\0\22\32\1\333\5\32\27\0"+
    "\4\32\6\0\10\32\4\0\12\32\1\334\15\32\27\0"+
    "\4\32\6\0\10\32\4\0\17\32\1\335\10\32\27\0"+
    "\4\32\6\0\10\32\4\0\21\32\1\336\6\32\27\0"+
    "\4\32\6\0\10\32\4\0\20\32\1\337\7\32\27\0"+
    "\4\32\6\0\10\32\4\0\17\32\1\340\10\32\27\0"+
    "\4\32\6\0\10\32\4\0\21\32\1\341\6\32\27\0"+
    "\4\32\6\0\10\32\4\0\4\32\1\342\23\32\27\0"+
    "\4\32\6\0\10\32\4\0\15\32\1\343\12\32\27\0"+
    "\4\32\6\0\10\32\4\0\10\32\1\344\17\32\27\0"+
    "\4\32\6\0\10\32\4\0\2\32\1\345\25\32\27\0"+
    "\4\32\6\0\10\32\4\0\2\32\1\346\25\32\27\0"+
    "\4\32\6\0\10\32\4\0\3\32\1\347\24\32\27\0"+
    "\4\32\6\0\10\32\4\0\14\32\1\350\13\32\27\0"+
    "\4\32\6\0\10\32\4\0\6\32\1\351\21\32\27\0"+
    "\4\32\6\0\10\32\4\0\21\32\1\352\6\32\27\0"+
    "\4\32\6\0\10\32\4\0\4\32\1\353\23\32\27\0"+
    "\4\32\6\0\10\32\4\0\4\32\1\354\23\32\25\0"+
    "\1\254\1\0\4\325\101\0\4\32\6\0\10\32\4\0"+
    "\14\32\1\355\13\32\27\0\4\32\6\0\10\32\4\0"+
    "\12\32\1\356\15\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\357\23\32\27\0\4\32\6\0\10\32\4\0"+
    "\14\32\1\360\13\32\27\0\4\32\6\0\10\32\4\0"+
    "\21\32\1\361\6\32\27\0\4\32\6\0\10\32\4\0"+
    "\14\32\1\362\13\32\27\0\4\32\6\0\10\32\4\0"+
    "\3\32\1\363\24\32\27\0\4\32\6\0\10\32\4\0"+
    "\5\32\1\364\22\32\27\0\4\32\6\0\10\32\4\0"+
    "\2\32\1\365\25\32\27\0\4\32\6\0\10\32\4\0"+
    "\21\32\1\366\6\32\27\0\4\32\6\0\10\32\4\0"+
    "\7\32\1\367\20\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\370\23\32\27\0\4\32\6\0\10\32\4\0"+
    "\14\32\1\371\13\32\27\0\4\32\6\0\10\32\4\0"+
    "\10\32\1\372\17\32\27\0\4\32\6\0\10\32\4\0"+
    "\22\32\1\373\5\32\27\0\4\32\6\0\10\32\4\0"+
    "\21\32\1\374\6\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\375\23\32\27\0\4\32\6\0\10\32\4\0"+
    "\5\32\1\376\22\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\377\23\32\27\0\4\32\6\0\10\32\4\0"+
    "\12\32\1\u0100\15\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\u0101\23\32\27\0\4\32\6\0\10\32\4\0"+
    "\17\32\1\u0102\10\32\27\0\4\32\6\0\10\32\4\0"+
    "\3\32\1\u0103\24\32\27\0\4\32\6\0\10\32\4\0"+
    "\4\32\1\u0104\23\32\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12558];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\2\11\21\1\1\11\1\1\3\11"+
    "\1\0\1\11\1\0\1\1\3\11\2\0\2\11\2\1"+
    "\4\11\1\1\1\0\1\1\1\11\1\0\1\1\1\0"+
    "\7\1\3\11\1\1\1\11\33\1\2\11\1\1\1\11"+
    "\2\0\3\1\2\0\4\1\1\0\3\1\2\11\41\1"+
    "\1\11\2\0\1\11\1\0\1\1\1\11\126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private Map<String, Token> tokenTable = new HashMap<>();

// Implementa la interfaz Scanner de CUP
@Override
public Symbol next_token() throws java.io.IOException {
    Symbol symbol = yylex();
    if (symbol != null) {
        System.out.println("Token: " + symbol.sym + ", Valor: " + symbol.value + ", Linea: " + yyline + ", Columna: " + yycolumn);
    }
    return symbol;
}

private void addToken(String token, TokenType type) {
    Token tokenInfo = tokenTable.getOrDefault(token, new Token(token, type));
    tokenInfo.addOccurrence(yyline + 1);
    tokenTable.put(token, tokenInfo);
}

public Map<String, Token> getTokenTable() {
    return tokenTable;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Character unknown: " + yytext() + " in " + (yyline+1));
            }
          // fall through
          case 96: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 97: break;
          case 3:
            { addToken(yytext(), TokenType.OPERATOR_LOGICAL); return new Symbol(Sym.NOT_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 4:
            { System.out.println("String without closure " + yytext() + " in " + (yyline + 1));
            }
          // fall through
          case 99: break;
          case 5:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.MOD, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 6:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_AND, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 7:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.LPAREN, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 8:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.RPAREN, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 9:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.TIMES, yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 10:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.PLUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 11:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.COMMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 12:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.MINUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 13:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.DOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 14:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.DIVIDE, yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 15:
            { addToken(yytext(), TokenType.LITERAL_INT); return new Symbol(Sym.NUMBER, yyline, yycolumn, Integer.valueOf(yytext()));
            }
          // fall through
          case 110: break;
          case 16:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.COLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 17:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.SEMICOLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 18:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.LT_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 19:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 20:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.GT_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 21:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.QUESTION, yyline, yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 22:
            { addToken(yytext(), TokenType.ID); return new Symbol(Sym.IDENTIFIER, yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 23:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.LBRACKET, yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 24:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.RBRACKET, yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 25:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_XOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          case 26:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.LCURLY, yyline, yycolumn, yytext());
            }
          // fall through
          case 121: break;
          case 27:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_OR, yyline, yycolumn, yytext());
            }
          // fall through
          case 122: break;
          case 28:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.RCURLY, yyline, yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 29:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_NOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 124: break;
          case 30:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.NE_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 31:
            { addToken(yytext(), TokenType.LITERAL_STR); return new Symbol(Sym.STRING_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 32:
            { addToken(yytext(), TokenType.LITERAL_CHAR); return new Symbol(Sym.CHAR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 127: break;
          case 33:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.MOD_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 128: break;
          case 34:
            { addToken(yytext(), TokenType.OPERATOR_LOGICAL); return new Symbol(Sym.AND_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 129: break;
          case 35:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_AND_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 130: break;
          case 36:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.TIMES_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 131: break;
          case 37:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.INC_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 132: break;
          case 38:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.PLUS_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 133: break;
          case 39:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.DEC_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 134: break;
          case 40:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.MINUS_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 135: break;
          case 41:
            { addToken(yytext(), TokenType.OPERATOR); return new Symbol(Sym.PTR_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 136: break;
          case 42:
            { System.out.println("Invalid number format: " + yytext() + " in " + (yyline + 1));
            }
          // fall through
          case 137: break;
          case 43:
            { addToken(yytext(), TokenType.OPERATOR_ARITHMETIC); return new Symbol(Sym.DIV_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 138: break;
          case 44:
            { addToken(yytext(), TokenType.LITERAL_OCTAL); return new Symbol(Sym.OCTAL_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 139: break;
          case 45:
            { System.out.println("Digit before id: " + yytext() + " in " + (yyline+1));
            }
          // fall through
          case 140: break;
          case 46:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.LSHIFT, yyline, yycolumn, yytext());
            }
          // fall through
          case 141: break;
          case 47:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.LE_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 142: break;
          case 48:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.EQ_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 143: break;
          case 49:
            { addToken(yytext(), TokenType.OPERATOR_RELATIONAL); return new Symbol(Sym.GE_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 144: break;
          case 50:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.RSHIFT, yyline, yycolumn, yytext());
            }
          // fall through
          case 145: break;
          case 51:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_XOR_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 146: break;
          case 52:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.DO, yyline, yycolumn, yytext());
            }
          // fall through
          case 147: break;
          case 53:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.IF, yyline, yycolumn, yytext());
            }
          // fall through
          case 148: break;
          case 54:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.BIT_OR_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 149: break;
          case 55:
            { addToken(yytext(), TokenType.OPERATOR_LOGICAL); return new Symbol(Sym.OR_OP, yyline, yycolumn, yytext());
            }
          // fall through
          case 150: break;
          case 56:
            { System.out.println("Strings cannot span multiple lines: " + yytext() + " in " + (yyline+1));
            }
          // fall through
          case 151: break;
          case 57:
            { System.out.println("Block comment without closure: " + yytext() + " in " + (yyline + 1));
            }
          // fall through
          case 152: break;
          case 58:
            { addToken(yytext(), TokenType.LITERAL_DOUBLE); return new Symbol(Sym.DOUBLE_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 153: break;
          case 59:
            { addToken(yytext(), TokenType.LITERAL_BINARY); return new Symbol(Sym.BINARY_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 154: break;
          case 60:
            { addToken(yytext(), TokenType.LITERAL_HEX); return new Symbol(Sym.HEX_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 155: break;
          case 61:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.LSHIFT_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 156: break;
          case 62:
            { addToken(yytext(), TokenType.OPERATOR_BITWISE); return new Symbol(Sym.RSHIFT_ASSIGN, yyline, yycolumn, yytext());
            }
          // fall through
          case 157: break;
          case 63:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.FOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 158: break;
          case 64:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.INT, yyline, yycolumn, yytext());
            }
          // fall through
          case 159: break;
          case 65:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.AUTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 160: break;
          case 66:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.CASE, yyline, yycolumn, yytext());
            }
          // fall through
          case 161: break;
          case 67:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.CHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 162: break;
          case 68:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.ELSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 163: break;
          case 69:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.ENUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 164: break;
          case 70:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.GOTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 165: break;
          case 71:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.LONG, yyline, yycolumn, yytext());
            }
          // fall through
          case 166: break;
          case 72:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.MAIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 167: break;
          case 73:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.READ, yyline, yycolumn, yytext());
            }
          // fall through
          case 168: break;
          case 74:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.VOID, yyline, yycolumn, yytext());
            }
          // fall through
          case 169: break;
          case 75:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.BREAK, yyline, yycolumn, yytext());
            }
          // fall through
          case 170: break;
          case 76:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.CONST, yyline, yycolumn, yytext());
            }
          // fall through
          case 171: break;
          case 77:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.FLOAT, yyline, yycolumn, yytext());
            }
          // fall through
          case 172: break;
          case 78:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.SHORT, yyline, yycolumn, yytext());
            }
          // fall through
          case 173: break;
          case 79:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.UNION, yyline, yycolumn, yytext());
            }
          // fall through
          case 174: break;
          case 80:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.WHILE, yyline, yycolumn, yytext());
            }
          // fall through
          case 175: break;
          case 81:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.WRITE, yyline, yycolumn, yytext());
            }
          // fall through
          case 176: break;
          case 82:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.DOUBLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 177: break;
          case 83:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.EXTERN, yyline, yycolumn, yytext());
            }
          // fall through
          case 178: break;
          case 84:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.RETURN, yyline, yycolumn, yytext());
            }
          // fall through
          case 179: break;
          case 85:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.SIGNED, yyline, yycolumn, yytext());
            }
          // fall through
          case 180: break;
          case 86:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.SIZEOF, yyline, yycolumn, yytext());
            }
          // fall through
          case 181: break;
          case 87:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.STATIC, yyline, yycolumn, yytext());
            }
          // fall through
          case 182: break;
          case 88:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.STRUCT, yyline, yycolumn, yytext());
            }
          // fall through
          case 183: break;
          case 89:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.SWITCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 184: break;
          case 90:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.DEFAULT, yyline, yycolumn, yytext());
            }
          // fall through
          case 185: break;
          case 91:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.TYPEDEF, yyline, yycolumn, yytext());
            }
          // fall through
          case 186: break;
          case 92:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.CONTINUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 187: break;
          case 93:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.REGISTER, yyline, yycolumn, yytext());
            }
          // fall through
          case 188: break;
          case 94:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.UNSIGNED, yyline, yycolumn, yytext());
            }
          // fall through
          case 189: break;
          case 95:
            { addToken(yytext(), TokenType.KEYWORD); return new Symbol(Sym.VOLATILE, yyline, yycolumn, yytext());
            }
          // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
