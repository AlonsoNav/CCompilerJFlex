package parser;

import java_cup.runtime.*;

parser code {:
    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado.";
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }
:};

// Define las terminales (tokens) que provienen de JFlex
terminal PLUS, TIMES, LPAREN, RPAREN, MINUS, DIVIDE, MOD, NOT_OP, 
         BIT_AND, COMMA, DOT, LT_OP, GT_OP, ASSIGN, QUESTION, COLON, 
         SEMICOLON, LBRACKET, RBRACKET, LCURLY, RCURLY, 
         BIT_OR, BIT_NOT, BIT_XOR, AND_OP, OR_OP, INC_OP, DEC_OP,
         PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, 
         LSHIFT, RSHIFT, LSHIFT_ASSIGN, RSHIFT_ASSIGN, BIT_AND_ASSIGN, BIT_OR_ASSIGN, 
         BIT_XOR_ASSIGN, NE_OP, EQ_OP, LE_OP, GE_OP, PTR_OP, NUMBER, IDENTIFIER,
         STRING_LITERAL, CHAR_LITERAL, HEX_LITERAL, OCTAL_LITERAL, BINARY_LITERAL, 
         DOUBLE_LITERAL, AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, 
         DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER, 
         RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, 
         UNSIGNED, VOID, VOLATILE, WHILE, READ, WRITE;

non terminal INICIO, SENTENCIA, DECLARACION, EXPRESION_FOR, ESTRUCTURA_IF, ESTRUCTURA_ELSE,
    ESTRUCTURA_WHILE, ESTRUCTURA_FOR, EXPRESIONES, SENTENCIA_FOR, T_DATO, OP_RELACIONALES, 
    OP_LOGICOS, OP_ARITMETICOS, OP_BIT, READ_WRITE, LITERALES, ID_LIST, FUNCION, PARAMETROS, 
    CONTROL_STATEMENT, GLOBAL_DECLARACIONES, FUNCIONES, EXPRESION_ASIGNACION, INCREMENTO_DECREMENTO, 
    EXPRESION_ARITMETICA, EXPRESIONES_RELACIONAL, SENTENCIAS, EXPRESIONES_LOGICAS, ARGUMENTOS,
    DO_WHILE, SWITCHs, CASES, DEFAULT_STMT, CASE_STMT, DECLARACION_LIST, EXPRESIONES_NUMERICAS,
    LISTA_EXPRESIONES, ERRORES_IF, LISTA_DEFAULT;


precedence left OR_OP;
precedence left AND_OP;
precedence nonassoc EQ_OP, NE_OP;
precedence nonassoc LT_OP, GT_OP, LE_OP, GE_OP;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right INC_OP, DEC_OP;
precedence right NOT_OP;
precedence right ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIV_ASSIGN;
precedence right LPAREN, RPAREN;

start with INICIO;

INICIO ::= GLOBAL_DECLARACIONES FUNCIONES |
           FUNCIONES |
           GLOBAL_DECLARACIONES {: syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); :} |
           {: syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); :}
;

GLOBAL_DECLARACIONES ::= DECLARACION |
                        GLOBAL_DECLARACIONES DECLARACION
;

FUNCIONES ::= FUNCION |
              FUNCIONES FUNCION
;

FUNCION ::= 
    T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY |
    T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY |
    VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY |
    VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY |
    T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY |
    T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY |
    VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY |
    VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY
;

PARAMETROS ::= 
    T_DATO IDENTIFIER |
    PARAMETROS COMMA T_DATO IDENTIFIER |
    error IDENTIFIER {: syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro"); :} |
    T_DATO error {: syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador"); :} | // no funciona tengo que revisarlo
    PARAMETROS COMMA error IDENTIFIER {: syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro"); :} |
    PARAMETROS COMMA T_DATO error {: syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador"); :} | //Falla
    PARAMETROS T_DATO IDENTIFIER {: syntaxError(((Symbol) stack.peek()), "Los parámetros deben estar separados por una coma"); :}

;

SENTENCIAS ::=
    SENTENCIAS SENTENCIA | 
;

SENTENCIA ::= 
    ESTRUCTURA_IF |
    DO_WHILE |
    ESTRUCTURA_WHILE |
    ESTRUCTURA_FOR |
    READ_WRITE |
    CONTROL_STATEMENT|
    SWITCHs |
    EXPRESIONES SEMICOLON |
    EXPRESIONES {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :}
;

CONTROL_STATEMENT ::= 
    BREAK SEMICOLON |
    CONTINUE SEMICOLON |
    RETURN LITERALES SEMICOLON |
    RETURN IDENTIFIER SEMICOLON |
    RETURN SEMICOLON |
    BREAK {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} |
    CONTINUE {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} |
    RETURN LITERALES {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} |
    RETURN IDENTIFIER {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :}|
    RETURN error {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} 

;

DECLARACION ::= 
    T_DATO ID_LIST SEMICOLON | 
    CONST T_DATO ID_LIST SEMICOLON |
    VOID ID_LIST SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); :} |
    T_DATO error SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Falta el identificador de la variable en la declaración global."); :} |
    T_DATO ID_LIST error {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} 
    
    
;

ID_LIST ::= ID_LIST COMMA IDENTIFIER |
            ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS |
            IDENTIFIER ASSIGN EXPRESIONES_LOGICAS |
            IDENTIFIER |
            // ID_LIST error IDENTIFIER {: syntaxError(((Symbol) stack.peek()), "Falta coma entre identificadores."); :} |  //hacen que el assing falle
            // ID_LIST error IDENTIFIER ASSIGN EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta coma entre identificadores."); :} |
            ID_LIST COMMA IDENTIFIER ASSIGN error {: syntaxError(((Symbol) stack.peek()), "No se asignó ningun valor a la variable"); :} |
            IDENTIFIER ASSIGN error {: syntaxError(((Symbol) stack.peek()), "No se asignó ningun valor a la variable"); :}
;

ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE |
    IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY |
    ERRORES_IF
;

ERRORES_IF ::=
    IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE {: syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); :} |
    IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); :} |
    IF error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE {: syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); :} |
    IF error RPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); :} |
    IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); :} |
    IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); :} |
    IF LPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); :} |
    IF LPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); :} |
    IF error LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE {: syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); :} | 
    IF error LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); :} |
    IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); :} |
    IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); :}
;

EXPRESIONES ::= 
    EXPRESION_ASIGNACION |
    EXPRESIONES_LOGICAS
;

EXPRESIONES_LOGICAS ::=
    EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL |
    EXPRESIONES_RELACIONAL
;

EXPRESIONES_RELACIONAL ::= 
    EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA |
    EXPRESION_ARITMETICA
;

ESTRUCTURA_ELSE ::= 
    ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE |
    ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY |
    ELSE LCURLY SENTENCIAS RCURLY |
    ELSE error SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del else."); :} |
    ELSE ERRORES_IF
;

ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY |
    WHILE LPAREN error RPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la condición del while."); :} |
    WHILE error RPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el while."); :} |
    WHILE LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); :} |
    WHILE LPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); :} |
    WHILE error LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del while."); :} |
    WHILE LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del while."); :}
;

DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON |
    DO LCURLY SENTENCIAS RCURLY WHILE LPAREN error RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en la condición del do-while."); :} |
    DO LCURLY SENTENCIAS RCURLY WHILE error RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el do-while."); :} |
    DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); :} |
    DO LCURLY SENTENCIAS RCURLY WHILE LPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); :} |
    DO LCURLY SENTENCIAS RCURLY WHILE error SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del do-while."); :} |
    DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} |
    DO error SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del do-while."); :} |
    DO LCURLY SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del do-while."); :} |
    DO LCURLY SENTENCIAS RCURLY LPAREN EXPRESIONES RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Falta palabra reservada while antes de la condición."); :} |
    DO error SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Faltan ambas llaves en el do-while."); :} 
;

ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY |
    FOR LPAREN error RPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la sentencia del for."); :} |
    FOR error RPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el for."); :} |
    FOR LPAREN SENTENCIA_FOR LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); :} |
    FOR LPAREN LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); :} |
    FOR error LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del for."); :} |
    FOR LPAREN SENTENCIA_FOR RPAREN error SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del for."); :}
;

SENTENCIA_FOR ::=
    DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR |
    EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR
;

EXPRESION_FOR ::= 
    /* vacío */ |
    EXPRESIONES |
    error {: syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); :}
;

SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES RCURLY |
            SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY |
            SWITCH LPAREN error RPAREN LCURLY CASES DEFAULT_STMT RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la condición del switch."); :} |
            SWITCH LPAREN EXPRESIONES_NUMERICAS LCURLY CASES DEFAULT_STMT RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); :} |
            SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN error CASES DEFAULT_STMT RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del switch."); :} |
            SWITCH error RPAREN LCURLY CASES DEFAULT_STMT RCURLY {: syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el switch."); :} |
            SWITCH LPAREN LCURLY CASES DEFAULT_STMT RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); :} |
            SWITCH error LCURLY CASES DEFAULT_STMT RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del switch."); :} |
            SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES LISTA_DEFAULT CASES RCURLY {: syntaxError(((Symbol) stack.peek()), "Múltiples definiciones de default en un switch."); :}
;

CASES ::= CASES CASE_STMT |;

CASE_STMT ::= CASE LITERALES COLON SENTENCIAS |
    CASE LITERALES COLON LCURLY SENTENCIAS RCURLY |
    CASE error COLON SENTENCIAS {: syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Error en la condición del case."); :} |
    CASE error COLON LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Error en la condición del case."); :} |
    CASE LITERALES LCURLY SENTENCIAS RCURLY {: syntaxError(((Symbol) stack.peek()), "Falta dos puntos en el case."); :} |
    CASE LITERALES SENTENCIAS {: syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Falta dos puntos en el case."); :}
;

DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS;

LISTA_DEFAULT ::= DEFAULT_STMT LISTA_DEFAULT | DEFAULT_STMT;

READ_WRITE ::= 
    READ LPAREN IDENTIFIER RPAREN SEMICOLON |
    READ LPAREN RPAREN SEMICOLON |
    WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON |
    READ error IDENTIFIER RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); :} |
    READ LPAREN IDENTIFIER error SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); :} |
    READ IDENTIFIER SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Faltan los paréntesis para la llamada a la funcion"); :} |
    READ error RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); :} |
    READ LPAREN error SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); :} |
    WRITE error LISTA_EXPRESIONES RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); :} | 
    WRITE LPAREN LISTA_EXPRESIONES error SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); :} | //hay un error porque es como si siguiera como entre LISTA_EXPRESIONES porque no sabe bien cuando parar
    READ LPAREN IDENTIFIER RPAREN {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :}  |
    READ LPAREN RPAREN {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} |
    WRITE LPAREN LISTA_EXPRESIONES RPAREN {: syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); :} |
    WRITE LPAREN error RPAREN SEMICOLON {: syntaxError(((Symbol) stack.peek()), "Falta una expresión entre los paréntesis"); :} 
    

;

LISTA_EXPRESIONES ::= EXPRESIONES |
                     LISTA_EXPRESIONES COMMA EXPRESIONES |
                     LISTA_EXPRESIONES COMMA error {: syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); :} |
                     COMMA EXPRESIONES {: syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); :} |
                     LISTA_EXPRESIONES error {: syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); :} 
;

T_DATO ::= INT | CHAR | LONG | SHORT | INT LONG | INT SHORT | LONG INT | SHORT INT;
OP_RELACIONALES ::= EQ_OP | NE_OP | LT_OP | GT_OP | LE_OP | GE_OP;
OP_LOGICOS ::= OR_OP | AND_OP | NOT_OP;
OP_ARITMETICOS ::= PLUS | MINUS | TIMES | DIVIDE | MOD | INC_OP | DEC_OP | PLUS_ASSIGN | MINUS_ASSIGN | TIMES_ASSIGN | DIV_ASSIGN;
LITERALES ::= NUMBER | CHAR_LITERAL | HEX_LITERAL | OCTAL_LITERAL | BINARY_LITERAL;

ARGUMENTOS ::= EXPRESIONES_LOGICAS |
               ARGUMENTOS COMMA EXPRESIONES_LOGICAS |
               ARGUMENTOS error EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); :} |
               ARGUMENTOS COMMA error {: syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); :} |
               COMMA EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); :} 
;

EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA |
            EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA |
            EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA |
            EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA |
            EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA |
            LPAREN EXPRESIONES_LOGICAS RPAREN |
            IDENTIFIER |
            IDENTIFIER LPAREN ARGUMENTOS RPAREN |
            IDENTIFIER LPAREN RPAREN |
            LITERALES |
            INCREMENTO_DECREMENTO |
            EXPRESION_ARITMETICA PLUS error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); :} |
            EXPRESION_ARITMETICA MINUS error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); :} |
            EXPRESION_ARITMETICA TIMES error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); :} |
            EXPRESION_ARITMETICA DIVIDE error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); :} |
            EXPRESION_ARITMETICA MOD {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); :} |
            LPAREN error RPAREN {: syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); :} |
            error TIMES EXPRESION_ARITMETICA {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); :} |
            error DIVIDE EXPRESION_ARITMETICA {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); :} |
            error PLUS EXPRESION_ARITMETICA {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); :} |
            error MINUS EXPRESION_ARITMETICA {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); :}
;

EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS |
            EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS |
            EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS |
            EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS |
            EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS |
            LPAREN EXPRESIONES_NUMERICAS RPAREN |
            IDENTIFIER |
            IDENTIFIER LPAREN ARGUMENTOS RPAREN |
            IDENTIFIER LPAREN RPAREN |
            LITERALES |
            INCREMENTO_DECREMENTO |
            EXPRESIONES_NUMERICAS PLUS error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); :} |
            EXPRESIONES_NUMERICAS MINUS error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); :} |
            EXPRESIONES_NUMERICAS TIMES error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); :} |
            EXPRESIONES_NUMERICAS DIVIDE error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); :} |
            EXPRESIONES_NUMERICAS MOD error {: syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); :} |
            error PLUS EXPRESIONES_NUMERICAS {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); :} |
            error MINUS EXPRESIONES_NUMERICAS {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); :} |
            error TIMES EXPRESIONES_NUMERICAS {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); :} |
            error DIVIDE EXPRESIONES_NUMERICAS {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); :} |
            error MOD EXPRESIONES_NUMERICAS {: syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); :} |
            LPAREN error RPAREN {: syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); :}
;

INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP |
                          IDENTIFIER DEC_OP | 
                          INC_OP IDENTIFIER | 
                          DEC_OP IDENTIFIER |
                          DEC_OP error {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); :} |
                          INC_OP error {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); :}    
;

EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS |
                         IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS |
                         IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS |
                         IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS |
                         IDENTIFIER ASSIGN EXPRESIONES_LOGICAS |
                         IDENTIFIER ASSIGN EXPRESION_ASIGNACION |
                         IDENTIFIER PLUS_ASSIGN error {: syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); :} |
                         IDENTIFIER MINUS_ASSIGN error {: syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); :} |
                         IDENTIFIER TIMES_ASSIGN error {: syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); :} |
                         IDENTIFIER DIV_ASSIGN error {: syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); :} |
                         IDENTIFIER ASSIGN error {: syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); :} |
                         PLUS_ASSIGN EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); :} |
                         MINUS_ASSIGN EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); :} |
                         TIMES_ASSIGN EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); :} |
                         DIV_ASSIGN EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); :} |
                         ASSIGN EXPRESIONES_LOGICAS {: syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); :}
;