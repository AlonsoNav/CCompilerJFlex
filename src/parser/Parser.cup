package parser;

import java_cup.runtime.*;

// Define las terminales (tokens) que provienen de JFlex
terminal PLUS, TIMES, LPAREN, RPAREN, MINUS, DIVIDE, MOD, NOT_OP, 
         BIT_AND, COMMA, DOT, LT_OP, GT_OP, ASSIGN, QUESTION, COLON, 
         SEMICOLON, LBRACKET, RBRACKET, LCURLY, RCURLY, 
         BIT_OR, BIT_NOT, BIT_XOR, AND_OP, OR_OP, INC_OP, DEC_OP,
         PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, 
         LSHIFT, RSHIFT, LSHIFT_ASSIGN, RSHIFT_ASSIGN, BIT_AND_ASSIGN, BIT_OR_ASSIGN, 
         BIT_XOR_ASSIGN, NE_OP, EQ_OP, LE_OP, GE_OP, PTR_OP, NUMBER, IDENTIFIER,
         STRING_LITERAL, CHAR_LITERAL, HEX_LITERAL, OCTAL_LITERAL, BINARY_LITERAL, 
         DOUBLE_LITERAL, AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, 
         DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER, 
         RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, 
         UNSIGNED, VOID, VOLATILE, WHILE, READ, WRITE, MAIN;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IFs, IF_ELSE,
    WHILEs, DO_WHILE, FORs, SENTENCIA_BOOLEANA, SENTENCIA_FOR, T_DATO, OP_RELACIONALES, 
    OP_LOGICOS, OP_ARITMETICOS, OP_BIT, READ_WRITE, LITERALES, ID_LIST, FUNCION, PARAMETROS, CONTROL_STATEMENT;

start with INICIO;

INICIO ::= 
    FUNCION |
    INICIO FUNCION |
    INT MAIN LPAREN RPAREN LCURLY SENTENCIA RCURLY |
    INICIO INT MAIN LPAREN RPAREN LCURLY SENTENCIA RCURLY |
    MAIN LPAREN RPAREN LCURLY SENTENCIA RCURLY |
    INICIO MAIN LPAREN RPAREN LCURLY SENTENCIA RCURLY
;

FUNCION ::= 
    T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIA RCURLY |
    VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIA RCURLY
;

PARAMETROS ::= 
    T_DATO IDENTIFIER |
    PARAMETROS COMMA T_DATO IDENTIFIER
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA READ_WRITE |
    READ_WRITE |
    CONTROL_STATEMENT 
;

CONTROL_STATEMENT ::= 
    BREAK SEMICOLON |
    CONTINUE SEMICOLON |
    RETURN LITERALES SEMICOLON |
    RETURN IDENTIFIER SEMICOLON 
;

DECLARACION ::= 
    T_DATO IDENTIFIER SEMICOLON | 
    T_DATO IDENTIFIER PLUS_ASSIGN LITERALES SEMICOLON |
    T_DATO IDENTIFIER MINUS_ASSIGN LITERALES SEMICOLON |
    T_DATO IDENTIFIER TIMES_ASSIGN LITERALES SEMICOLON |
    T_DATO IDENTIFIER DIV_ASSIGN LITERALES SEMICOLON |
    T_DATO IDENTIFIER MOD_ASSIGN LITERALES SEMICOLON |
    T_DATO IDENTIFIER ASSIGN LITERALES SEMICOLON |
    AUTO DECLARACION |
    CONST DECLARACION |
    STATIC DECLARACION |
    VOLATILE DECLARACION |
    LONG DECLARACION |
    SHORT DECLARACION |
    VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIA RCURLY
;

ID_LIST ::= DECLARACION |
            ID_LIST COMMA DECLARACION
;

IFs ::= IF LPAREN SENTENCIA_BOOLEANA RPAREN LCURLY SENTENCIA RCURLY
;

SENTENCIA_BOOLEANA ::= 
    IDENTIFIER OP_RELACIONALES NUMBER |
    IDENTIFIER OP_RELACIONALES IDENTIFIER |
    IDENTIFIER OP_RELACIONALES STRING_LITERAL |
    IDENTIFIER OP_RELACIONALES CHAR_LITERAL |
    IDENTIFIER OP_RELACIONALES DOUBLE_LITERAL |
    IDENTIFIER OP_RELACIONALES BINARY_LITERAL |
    IDENTIFIER OP_RELACIONALES HEX_LITERAL |
    IDENTIFIER OP_RELACIONALES OCTAL_LITERAL
;

IF_ELSE ::= IF LPAREN SENTENCIA_BOOLEANA RPAREN LCURLY SENTENCIA RCURLY ELSE LCURLY SENTENCIA RCURLY
;
WHILEs ::= WHILE LPAREN SENTENCIA_BOOLEANA RPAREN LCURLY SENTENCIA RCURLY
;
DO_WHILE ::= DO LCURLY SENTENCIA RCURLY WHILE LPAREN SENTENCIA_BOOLEANA RPAREN SEMICOLON
;
FORs ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIA RCURLY
;
SENTENCIA_FOR ::=
    T_DATO IDENTIFIER ASSIGN NUMBER SEMICOLON SENTENCIA_BOOLEANA SEMICOLON DECLARACION_FOR |
    IDENTIFIER ASSIGN NUMBER SEMICOLON SENTENCIA_BOOLEANA SEMICOLON DECLARACION_FOR
;
DECLARACION_FOR ::= 
    IDENTIFIER PLUS_ASSIGN NUMBER |
    IDENTIFIER MINUS_ASSIGN NUMBER |
    IDENTIFIER TIMES_ASSIGN NUMBER |
    IDENTIFIER DIV_ASSIGN NUMBER |
    IDENTIFIER MOD_ASSIGN NUMBER |
    IDENTIFIER INC_OP | 
    IDENTIFIER DEC_OP |
    INC_OP IDENTIFIER |
    DEC_OP IDENTIFIER
;

READ_WRITE ::= 
    READ LPAREN IDENTIFIER RPAREN SEMICOLON |
    READ LPAREN RPAREN SEMICOLON |
    WRITE LPAREN IDENTIFIER RPAREN SEMICOLON
;

T_DATO ::= INT | CHAR | DOUBLE | FLOAT |;
OP_RELACIONALES ::= EQ_OP | NE_OP | LT_OP | GT_OP | LE_OP | GE_OP | COLON |;
OP_LOGICOS ::= OR_OP | AND_OP | NOT_OP |;
OP_ARITMETICOS ::= PLUS | MINUS | TIMES | DIVIDE | MOD | INC_OP | DEC_OP | PLUS_ASSIGN | MINUS_ASSIGN | TIMES_ASSIGN | DIV_ASSIGN | MOD_ASSIGN |;
OP_BIT ::= BIT_AND | BIT_OR | BIT_XOR | BIT_NOT | LSHIFT | RSHIFT | LSHIFT_ASSIGN | RSHIFT_ASSIGN | BIT_AND_ASSIGN | BIT_OR_ASSIGN | BIT_XOR_ASSIGN |;
LITERALES ::= NUMBER | STRING_LITERAL | CHAR_LITERAL | DOUBLE_LITERAL | HEX_LITERAL | OCTAL_LITERAL | BINARY_LITERAL |;