
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\342\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\027\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\004\000" +
    "\002\024\013\000\002\024\012\000\002\024\012\000\002" +
    "\024\013\000\002\024\012\000\002\024\011\000\002\024" +
    "\011\000\002\024\012\000\002\025\004\000\002\025\006" +
    "\000\002\025\004\000\002\025\004\000\002\025\006\000" +
    "\002\025\006\000\002\025\005\000\002\035\004\000\002" +
    "\035\002\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\026\004\000\002\026\004\000\002\026\005\000\002" +
    "\026\005\000\002\026\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\004\005\000\002\004\006\000\002\004\005\000" +
    "\002\023\005\000\002\023\007\000\002\023\005\000\002" +
    "\023\003\000\002\006\012\000\002\006\011\000\002\006" +
    "\003\000\002\051\012\000\002\051\011\000\002\051\011" +
    "\000\002\051\010\000\002\051\011\000\002\051\010\000" +
    "\002\051\010\000\002\051\007\000\002\051\010\000\002" +
    "\051\007\000\002\051\012\000\002\051\011\000\002\012" +
    "\003\000\002\012\003\000\002\036\005\000\002\036\003" +
    "\000\002\034\005\000\002\034\003\000\002\007\013\000" +
    "\002\007\012\000\002\007\006\000\002\007\006\000\002" +
    "\007\004\000\002\010\011\000\002\010\011\000\002\010" +
    "\010\000\002\010\010\000\002\010\007\000\002\010\007" +
    "\000\002\010\011\000\002\040\013\000\002\011\011\000" +
    "\002\011\011\000\002\011\010\000\002\011\010\000\002" +
    "\011\007\000\002\011\007\000\002\011\011\000\002\013" +
    "\006\000\002\013\007\000\002\005\002\000\002\005\003" +
    "\000\002\005\003\000\002\042\012\000\002\042\011\000" +
    "\002\043\004\000\002\043\002\000\002\045\006\000\002" +
    "\044\005\000\002\021\007\000\002\021\006\000\002\021" +
    "\007\000\002\021\007\000\002\021\007\000\002\021\005" +
    "\000\002\021\006\000\002\021\006\000\002\021\007\000" +
    "\002\021\007\000\002\021\006\000\002\021\005\000\002" +
    "\021\006\000\002\021\007\000\002\050\003\000\002\050" +
    "\005\000\002\050\005\000\002\050\004\000\002\050\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\003\000\002" +
    "\033\006\000\002\033\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\047\003\000\002\047\006\000\002\047\005\000" +
    "\002\047\003\000\002\047\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b3\000\020\002\ufffd\074\017\075\015\111\005\112" +
    "\006\115\016\126\013\001\002\000\020\002\ufffe\074\017" +
    "\075\015\111\005\112\006\115\016\126\013\001\002\000" +
    "\012\003\uff86\062\uff86\112\u01b4\115\u01b3\001\002\000\010" +
    "\003\uff84\062\uff84\111\u01b2\001\002\000\104\002\ufffc\003" +
    "\ufffc\006\ufffc\021\ufffc\030\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\061\ufffc\062\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\067\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\100\ufffc\106\ufffc\110\ufffc\111\ufffc\112\ufffc\114\ufffc\115" +
    "\ufffc\122\ufffc\126\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002" +
    "\000\016\002\uffff\074\017\111\005\112\006\115\016\126" +
    "\u01af\001\002\000\004\062\u019c\001\002\000\004\002\u019b" +
    "\001\002\000\004\062\142\001\002\000\016\002\ufffa\074" +
    "\ufffa\111\ufffa\112\ufffa\115\ufffa\126\ufffa\001\002\000\012" +
    "\074\017\111\005\112\006\115\016\001\002\000\010\003" +
    "\uff83\062\uff83\111\020\001\002\000\006\003\uff85\062\uff85" +
    "\001\002\000\006\003\uff7f\062\uff7f\001\002\000\004\062" +
    "\022\001\002\000\010\015\uffce\021\140\024\uffce\001\002" +
    "\000\006\015\024\024\025\001\002\000\004\062\026\001" +
    "\002\000\106\002\uffd3\003\uffd3\006\uffd3\021\uffd3\024\uffd3" +
    "\030\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\061\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\072\uffd3\074\uffd3\075\uffd3\076\uffd3\100\uffd3\106\uffd3\110" +
    "\uffd3\111\uffd3\112\uffd3\114\uffd3\115\uffd3\122\uffd3\126\uffd3" +
    "\130\uffd3\131\uffd3\132\uffd3\001\002\000\010\015\uffd1\021" +
    "\027\024\uffd1\001\002\000\026\003\037\006\044\036\045" +
    "\037\043\061\034\062\041\064\042\065\035\066\046\067" +
    "\032\001\002\000\014\013\106\015\uffd0\024\uffd0\034\105" +
    "\035\103\001\002\000\136\003\uff57\004\uff57\005\uff57\006" +
    "\uff57\007\uff57\010\uff57\011\uff57\012\uff57\013\uff57\015\uff57" +
    "\017\uff57\020\uff57\021\uff57\024\uff57\027\uff57\030\uff57\034" +
    "\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041\uff57\042\uff57" +
    "\043\uff57\054\uff57\055\uff57\056\uff57\057\uff57\061\uff57\062" +
    "\uff57\064\uff57\065\uff57\066\uff57\067\uff57\072\uff57\073\uff57" +
    "\076\uff57\077\uff57\100\uff57\106\uff57\110\uff57\114\uff57\122" +
    "\uff57\130\uff57\131\uff57\132\uff57\001\002\000\140\003\uff66" +
    "\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012" +
    "\uff66\013\uff66\015\uff66\017\uff66\020\uff66\021\uff66\023\uff66" +
    "\024\uff66\027\uff66\030\uff66\034\uff66\035\uff66\036\uff66\037" +
    "\uff66\040\uff66\041\uff66\042\uff66\043\uff66\054\uff66\055\uff66" +
    "\056\uff66\057\uff66\061\uff66\062\uff66\064\uff66\065\uff66\066" +
    "\uff66\067\uff66\072\uff66\073\uff66\076\uff66\077\uff66\100\uff66" +
    "\106\uff66\110\uff66\114\uff66\122\uff66\130\uff66\131\uff66\132" +
    "\uff66\001\002\000\136\003\uffb9\004\062\005\065\006\uffb9" +
    "\007\uffb9\010\063\011\064\012\061\013\uffb9\015\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\024\uffb9\027\uffb9\030\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072\uffb9\073\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\106\uffb9\110\uffb9\114\uffb9\122\uffb9" +
    "\130\uffb9\131\uffb9\132\uffb9\001\002\000\140\003\uff6a\004" +
    "\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\015\uff6a\017\uff6a\020\uff6a\021\uff6a\023\uff6a\024" +
    "\uff6a\027\uff6a\030\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\054\uff6a\055\uff6a\056" +
    "\uff6a\057\uff6a\061\uff6a\062\uff6a\064\uff6a\065\uff6a\066\uff6a" +
    "\067\uff6a\072\uff6a\073\uff6a\076\uff6a\077\uff6a\100\uff6a\106" +
    "\uff6a\110\uff6a\114\uff6a\122\uff6a\130\uff6a\131\uff6a\132\uff6a" +
    "\001\002\000\140\003\uff68\004\uff68\005\uff68\006\uff68\007" +
    "\uff68\010\uff68\011\uff68\012\uff68\013\uff68\015\uff68\017\uff68" +
    "\020\uff68\021\uff68\023\uff68\024\uff68\027\uff68\030\uff68\034" +
    "\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68" +
    "\043\uff68\054\uff68\055\uff68\056\uff68\057\uff68\061\uff68\062" +
    "\uff68\064\uff68\065\uff68\066\uff68\067\uff68\072\uff68\073\uff68" +
    "\076\uff68\077\uff68\100\uff68\106\uff68\110\uff68\114\uff68\122" +
    "\uff68\130\uff68\131\uff68\132\uff68\001\002\000\124\003\uffbb" +
    "\006\uffbb\007\uffbb\013\uffbb\015\uffbb\017\110\020\114\021" +
    "\uffbb\024\uffbb\027\uffbb\030\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\054\113\055" +
    "\111\056\112\057\115\061\uffbb\062\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\072\uffbb\073\uffbb\076\uffbb\077\uffbb\100" +
    "\uffbb\106\uffbb\110\uffbb\114\uffbb\122\uffbb\130\uffbb\131\uffbb" +
    "\132\uffbb\001\002\000\012\004\054\005\057\010\055\011" +
    "\056\001\002\000\136\003\uff56\004\uff56\005\uff56\006\uff56" +
    "\007\uff56\010\uff56\011\uff56\012\uff56\013\uff56\015\uff56\017" +
    "\uff56\020\uff56\021\uff56\024\uff56\027\uff56\030\uff56\034\uff56" +
    "\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043" +
    "\uff56\054\uff56\055\uff56\056\uff56\057\uff56\061\uff56\062\uff56" +
    "\064\uff56\065\uff56\066\uff56\067\uff56\072\uff56\073\uff56\076" +
    "\uff56\077\uff56\100\uff56\106\uff56\110\uff56\114\uff56\122\uff56" +
    "\130\uff56\131\uff56\132\uff56\001\002\000\136\003\uff5a\004" +
    "\uff5a\005\uff5a\006\124\007\uff5a\010\uff5a\011\uff5a\012\uff5a" +
    "\013\uff5a\015\uff5a\017\uff5a\020\uff5a\021\uff5a\024\uff5a\027" +
    "\uff5a\030\uff5a\034\uff5a\035\uff5a\036\122\037\123\040\uff5a" +
    "\041\uff5a\042\uff5a\043\uff5a\054\uff5a\055\uff5a\056\uff5a\057" +
    "\uff5a\061\uff5a\062\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a" +
    "\072\uff5a\073\uff5a\076\uff5a\077\uff5a\100\uff5a\106\uff5a\110" +
    "\uff5a\114\uff5a\122\uff5a\130\uff5a\131\uff5a\132\uff5a\001\002" +
    "\000\140\003\uff69\004\uff69\005\uff69\006\uff69\007\uff69\010" +
    "\uff69\011\uff69\012\uff69\013\uff69\015\uff69\017\uff69\020\uff69" +
    "\021\uff69\023\uff69\024\uff69\027\uff69\030\uff69\034\uff69\035" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\054\uff69\055\uff69\056\uff69\057\uff69\061\uff69\062\uff69\064" +
    "\uff69\065\uff69\066\uff69\067\uff69\072\uff69\073\uff69\076\uff69" +
    "\077\uff69\100\uff69\106\uff69\110\uff69\114\uff69\122\uff69\130" +
    "\uff69\131\uff69\132\uff69\001\002\000\006\003\120\062\121" +
    "\001\002\000\026\003\052\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\032\001\002" +
    "\000\006\003\047\062\050\001\002\000\140\003\uff67\004" +
    "\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67" +
    "\013\uff67\015\uff67\017\uff67\020\uff67\021\uff67\023\uff67\024" +
    "\uff67\027\uff67\030\uff67\034\uff67\035\uff67\036\uff67\037\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\054\uff67\055\uff67\056" +
    "\uff67\057\uff67\061\uff67\062\uff67\064\uff67\065\uff67\066\uff67" +
    "\067\uff67\072\uff67\073\uff67\076\uff67\077\uff67\100\uff67\106" +
    "\uff67\110\uff67\114\uff67\122\uff67\130\uff67\131\uff67\132\uff67" +
    "\001\002\000\140\003\uff30\004\uff30\005\uff30\006\uff30\007" +
    "\uff30\010\uff30\011\uff30\012\uff30\013\uff30\015\uff30\017\uff30" +
    "\020\uff30\021\uff30\023\uff30\024\uff30\027\uff30\030\uff30\034" +
    "\uff30\035\uff30\036\uff30\037\uff30\040\uff30\041\uff30\042\uff30" +
    "\043\uff30\054\uff30\055\uff30\056\uff30\057\uff30\061\uff30\062" +
    "\uff30\064\uff30\065\uff30\066\uff30\067\uff30\072\uff30\073\uff30" +
    "\076\uff30\077\uff30\100\uff30\106\uff30\110\uff30\114\uff30\122" +
    "\uff30\130\uff30\131\uff30\132\uff30\001\002\000\140\003\uff33" +
    "\004\uff33\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012" +
    "\uff33\013\uff33\015\uff33\017\uff33\020\uff33\021\uff33\023\uff33" +
    "\024\uff33\027\uff33\030\uff33\034\uff33\035\uff33\036\uff33\037" +
    "\uff33\040\uff33\041\uff33\042\uff33\043\uff33\054\uff33\055\uff33" +
    "\056\uff33\057\uff33\061\uff33\062\uff33\064\uff33\065\uff33\066" +
    "\uff33\067\uff33\072\uff33\073\uff33\076\uff33\077\uff33\100\uff33" +
    "\106\uff33\110\uff33\114\uff33\122\uff33\130\uff33\131\uff33\132" +
    "\uff33\001\002\000\012\007\102\013\106\034\105\035\103" +
    "\001\002\000\014\004\054\005\057\007\053\010\055\011" +
    "\056\001\002\000\136\003\uff50\004\uff50\005\uff50\006\uff50" +
    "\007\uff50\010\uff50\011\uff50\012\uff50\013\uff50\015\uff50\017" +
    "\uff50\020\uff50\021\uff50\024\uff50\027\uff50\030\uff50\034\uff50" +
    "\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50\042\uff50\043" +
    "\uff50\054\uff50\055\uff50\056\uff50\057\uff50\061\uff50\062\uff50" +
    "\064\uff50\065\uff50\066\uff50\067\uff50\072\uff50\073\uff50\076" +
    "\uff50\077\uff50\100\uff50\106\uff50\110\uff50\114\uff50\122\uff50" +
    "\130\uff50\131\uff50\132\uff50\001\002\000\026\003\037\006" +
    "\044\036\045\037\043\061\034\062\041\064\042\065\035" +
    "\066\046\067\032\001\002\000\026\003\037\006\044\036" +
    "\045\037\043\061\034\062\041\064\042\065\035\066\046" +
    "\067\032\001\002\000\026\003\037\006\044\036\045\037" +
    "\043\061\034\062\041\064\042\065\035\066\046\067\032" +
    "\001\002\000\026\003\037\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\032\001\002" +
    "\000\136\003\uff4f\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010" +
    "\uff4f\011\uff4f\012\uff4f\013\uff4f\015\uff4f\017\uff4f\020\uff4f" +
    "\021\uff4f\024\uff4f\027\uff4f\030\uff4f\034\uff4f\035\uff4f\036" +
    "\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f\054\uff4f" +
    "\055\uff4f\056\uff4f\057\uff4f\061\uff4f\062\uff4f\064\uff4f\065" +
    "\uff4f\066\uff4f\067\uff4f\072\uff4f\073\uff4f\076\uff4f\077\uff4f" +
    "\100\uff4f\106\uff4f\110\uff4f\114\uff4f\122\uff4f\130\uff4f\131" +
    "\uff4f\132\uff4f\001\002\000\136\003\uff51\004\uff51\005\uff51" +
    "\006\044\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\015" +
    "\uff51\017\uff51\020\uff51\021\uff51\024\uff51\027\uff51\030\uff51" +
    "\034\uff51\035\uff51\036\045\037\043\040\uff51\041\uff51\042" +
    "\uff51\043\uff51\054\uff51\055\uff51\056\uff51\057\uff51\061\uff51" +
    "\062\uff51\064\uff51\065\uff51\066\uff51\067\uff51\072\uff51\073" +
    "\uff51\076\uff51\077\uff51\100\uff51\106\uff51\110\uff51\114\uff51" +
    "\122\uff51\130\uff51\131\uff51\132\uff51\001\002\000\026\003" +
    "\075\006\044\036\045\037\043\061\034\062\041\064\042" +
    "\065\035\066\046\067\032\001\002\000\026\003\073\006" +
    "\044\036\045\037\043\061\034\062\041\064\042\065\035" +
    "\066\046\067\032\001\002\000\026\003\071\006\044\036" +
    "\045\037\043\061\034\062\041\064\042\065\035\066\046" +
    "\067\032\001\002\000\026\003\067\006\044\036\045\037" +
    "\043\061\034\062\041\064\042\065\035\066\046\067\032" +
    "\001\002\000\136\003\uff5e\004\uff5e\005\uff5e\006\uff5e\007" +
    "\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e\015\uff5e\017\uff5e" +
    "\020\uff5e\021\uff5e\024\uff5e\027\uff5e\030\uff5e\034\uff5e\035" +
    "\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e" +
    "\054\uff5e\055\uff5e\056\uff5e\057\uff5e\061\uff5e\062\uff5e\064" +
    "\uff5e\065\uff5e\066\uff5e\067\uff5e\072\uff5e\073\uff5e\076\uff5e" +
    "\077\uff5e\100\uff5e\106\uff5e\110\uff5e\114\uff5e\122\uff5e\130" +
    "\uff5e\131\uff5e\132\uff5e\001\002\000\136\003\uff53\004\054" +
    "\005\057\006\uff53\007\uff53\010\055\011\056\012\uff53\013" +
    "\uff53\015\uff53\017\uff53\020\uff53\021\uff53\024\uff53\027\uff53" +
    "\030\uff53\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041" +
    "\uff53\042\uff53\043\uff53\054\uff53\055\uff53\056\uff53\057\uff53" +
    "\061\uff53\062\uff53\064\uff53\065\uff53\066\uff53\067\uff53\072" +
    "\uff53\073\uff53\076\uff53\077\uff53\100\uff53\106\uff53\110\uff53" +
    "\114\uff53\122\uff53\130\uff53\131\uff53\132\uff53\001\002\000" +
    "\136\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d" +
    "\011\uff5d\012\uff5d\013\uff5d\015\uff5d\017\uff5d\020\uff5d\021" +
    "\uff5d\024\uff5d\027\uff5d\030\uff5d\034\uff5d\035\uff5d\036\uff5d" +
    "\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\054\uff5d\055" +
    "\uff5d\056\uff5d\057\uff5d\061\uff5d\062\uff5d\064\uff5d\065\uff5d" +
    "\066\uff5d\067\uff5d\072\uff5d\073\uff5d\076\uff5d\077\uff5d\100" +
    "\uff5d\106\uff5d\110\uff5d\114\uff5d\122\uff5d\130\uff5d\131\uff5d" +
    "\132\uff5d\001\002\000\136\003\uff52\004\054\005\057\006" +
    "\uff52\007\uff52\010\055\011\056\012\uff52\013\uff52\015\uff52" +
    "\017\uff52\020\uff52\021\uff52\024\uff52\027\uff52\030\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\054\uff52\055\uff52\056\uff52\057\uff52\061\uff52\062" +
    "\uff52\064\uff52\065\uff52\066\uff52\067\uff52\072\uff52\073\uff52" +
    "\076\uff52\077\uff52\100\uff52\106\uff52\110\uff52\114\uff52\122" +
    "\uff52\130\uff52\131\uff52\132\uff52\001\002\000\136\003\uff5f" +
    "\004\uff5f\005\065\006\uff5f\007\uff5f\010\uff5f\011\064\012" +
    "\061\013\uff5f\015\uff5f\017\uff5f\020\uff5f\021\uff5f\024\uff5f" +
    "\027\uff5f\030\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040" +
    "\uff5f\041\uff5f\042\uff5f\043\uff5f\054\uff5f\055\uff5f\056\uff5f" +
    "\057\uff5f\061\uff5f\062\uff5f\064\uff5f\065\uff5f\066\uff5f\067" +
    "\uff5f\072\uff5f\073\uff5f\076\uff5f\077\uff5f\100\uff5f\106\uff5f" +
    "\110\uff5f\114\uff5f\122\uff5f\130\uff5f\131\uff5f\132\uff5f\001" +
    "\002\000\136\003\uff54\004\054\005\057\006\uff54\007\uff54" +
    "\010\055\011\056\012\uff54\013\uff54\015\uff54\017\uff54\020" +
    "\uff54\021\uff54\024\uff54\027\uff54\030\uff54\034\uff54\035\uff54" +
    "\036\uff54\037\uff54\040\uff54\041\uff54\042\uff54\043\uff54\054" +
    "\uff54\055\uff54\056\uff54\057\uff54\061\uff54\062\uff54\064\uff54" +
    "\065\uff54\066\uff54\067\uff54\072\uff54\073\uff54\076\uff54\077" +
    "\uff54\100\uff54\106\uff54\110\uff54\114\uff54\122\uff54\130\uff54" +
    "\131\uff54\132\uff54\001\002\000\136\003\uff60\004\uff60\005" +
    "\065\006\uff60\007\uff60\010\uff60\011\064\012\061\013\uff60" +
    "\015\uff60\017\uff60\020\uff60\021\uff60\024\uff60\027\uff60\030" +
    "\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60" +
    "\042\uff60\043\uff60\054\uff60\055\uff60\056\uff60\057\uff60\061" +
    "\uff60\062\uff60\064\uff60\065\uff60\066\uff60\067\uff60\072\uff60" +
    "\073\uff60\076\uff60\077\uff60\100\uff60\106\uff60\110\uff60\114" +
    "\uff60\122\uff60\130\uff60\131\uff60\132\uff60\001\002\000\136" +
    "\003\uff55\004\054\005\057\006\uff55\007\uff55\010\055\011" +
    "\056\012\uff55\013\uff55\015\uff55\017\uff55\020\uff55\021\uff55" +
    "\024\uff55\027\uff55\030\uff55\034\uff55\035\uff55\036\uff55\037" +
    "\uff55\040\uff55\041\uff55\042\uff55\043\uff55\054\uff55\055\uff55" +
    "\056\uff55\057\uff55\061\uff55\062\uff55\064\uff55\065\uff55\066" +
    "\uff55\067\uff55\072\uff55\073\uff55\076\uff55\077\uff55\100\uff55" +
    "\106\uff55\110\uff55\114\uff55\122\uff55\130\uff55\131\uff55\132" +
    "\uff55\001\002\000\136\003\uff5c\004\uff5c\005\uff5c\006\uff5c" +
    "\007\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\015\uff5c\017" +
    "\uff5c\020\uff5c\021\uff5c\024\uff5c\027\uff5c\030\uff5c\034\uff5c" +
    "\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043" +
    "\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\061\uff5c\062\uff5c" +
    "\064\uff5c\065\uff5c\066\uff5c\067\uff5c\072\uff5c\073\uff5c\076" +
    "\uff5c\077\uff5c\100\uff5c\106\uff5c\110\uff5c\114\uff5c\122\uff5c" +
    "\130\uff5c\131\uff5c\132\uff5c\001\002\000\136\003\uff4e\004" +
    "\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e" +
    "\013\uff4e\015\uff4e\017\uff4e\020\uff4e\021\uff4e\024\uff4e\027" +
    "\uff4e\030\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e\040\uff4e" +
    "\041\uff4e\042\uff4e\043\uff4e\054\uff4e\055\uff4e\056\uff4e\057" +
    "\uff4e\061\uff4e\062\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e" +
    "\072\uff4e\073\uff4e\076\uff4e\077\uff4e\100\uff4e\106\uff4e\110" +
    "\uff4e\114\uff4e\122\uff4e\130\uff4e\131\uff4e\132\uff4e\001\002" +
    "\000\136\003\uff4c\004\uff4c\005\065\006\uff4c\007\uff4c\010" +
    "\uff4c\011\064\012\061\013\uff4c\015\uff4c\017\uff4c\020\uff4c" +
    "\021\uff4c\024\uff4c\027\uff4c\030\uff4c\034\uff4c\035\uff4c\036" +
    "\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043\uff4c\054\uff4c" +
    "\055\uff4c\056\uff4c\057\uff4c\061\uff4c\062\uff4c\064\uff4c\065" +
    "\uff4c\066\uff4c\067\uff4c\072\uff4c\073\uff4c\076\uff4c\077\uff4c" +
    "\100\uff4c\106\uff4c\110\uff4c\114\uff4c\122\uff4c\130\uff4c\131" +
    "\uff4c\132\uff4c\001\002\000\136\003\uff4d\004\uff4d\005\065" +
    "\006\uff4d\007\uff4d\010\uff4d\011\064\012\061\013\uff4d\015" +
    "\uff4d\017\uff4d\020\uff4d\021\uff4d\024\uff4d\027\uff4d\030\uff4d" +
    "\034\uff4d\035\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042" +
    "\uff4d\043\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d\061\uff4d" +
    "\062\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d\072\uff4d\073" +
    "\uff4d\076\uff4d\077\uff4d\100\uff4d\106\uff4d\110\uff4d\114\uff4d" +
    "\122\uff4d\130\uff4d\131\uff4d\132\uff4d\001\002\000\136\003" +
    "\uff5b\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b\011\uff5b" +
    "\012\uff5b\013\uff5b\015\uff5b\017\uff5b\020\uff5b\021\uff5b\024" +
    "\uff5b\027\uff5b\030\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\054\uff5b\055\uff5b\056" +
    "\uff5b\057\uff5b\061\uff5b\062\uff5b\064\uff5b\065\uff5b\066\uff5b" +
    "\067\uff5b\072\uff5b\073\uff5b\076\uff5b\077\uff5b\100\uff5b\106" +
    "\uff5b\110\uff5b\114\uff5b\122\uff5b\130\uff5b\131\uff5b\132\uff5b" +
    "\001\002\000\026\003\uff78\006\uff78\036\uff78\037\uff78\061" +
    "\uff78\062\uff78\064\uff78\065\uff78\066\uff78\067\uff78\001\002" +
    "\000\026\003\037\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\032\001\002\000\026" +
    "\003\uff77\006\uff77\036\uff77\037\uff77\061\uff77\062\uff77\064" +
    "\uff77\065\uff77\066\uff77\067\uff77\001\002\000\026\003\uff76" +
    "\006\uff76\036\uff76\037\uff76\061\uff76\062\uff76\064\uff76\065" +
    "\uff76\066\uff76\067\uff76\001\002\000\124\003\uffbc\006\uffbc" +
    "\007\uffbc\013\uffbc\015\uffbc\017\110\020\114\021\uffbc\024" +
    "\uffbc\027\uffbc\030\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\054\113\055\111\056" +
    "\112\057\115\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\072\uffbc\073\uffbc\076\uffbc\077\uffbc\100\uffbc\106" +
    "\uffbc\110\uffbc\114\uffbc\122\uffbc\130\uffbc\131\uffbc\132\uffbc" +
    "\001\002\000\026\003\uff7c\006\uff7c\036\uff7c\037\uff7c\061" +
    "\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\001\002" +
    "\000\026\003\uff7e\006\uff7e\036\uff7e\037\uff7e\061\uff7e\062" +
    "\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000\026" +
    "\003\uff7a\006\uff7a\036\uff7a\037\uff7a\061\uff7a\062\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\001\002\000\026\003\uff7d" +
    "\006\uff7d\036\uff7d\037\uff7d\061\uff7d\062\uff7d\064\uff7d\065" +
    "\uff7d\066\uff7d\067\uff7d\001\002\000\026\003\uff7b\006\uff7b" +
    "\036\uff7b\037\uff7b\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066" +
    "\uff7b\067\uff7b\001\002\000\026\003\uff79\006\uff79\036\uff79" +
    "\037\uff79\061\uff79\062\uff79\064\uff79\065\uff79\066\uff79\067" +
    "\uff79\001\002\000\026\003\037\006\044\036\045\037\043" +
    "\061\034\062\041\064\042\065\035\066\046\067\032\001" +
    "\002\000\136\003\uffba\004\062\005\065\006\uffba\007\uffba" +
    "\010\063\011\064\012\061\013\uffba\015\uffba\017\uffba\020" +
    "\uffba\021\uffba\024\uffba\027\uffba\030\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\061\uffba\062\uffba\064\uffba" +
    "\065\uffba\066\uffba\067\uffba\072\uffba\073\uffba\076\uffba\077" +
    "\uffba\100\uffba\106\uffba\110\uffba\114\uffba\122\uffba\130\uffba" +
    "\131\uffba\132\uffba\001\002\000\140\003\uff31\004\uff31\005" +
    "\uff31\006\uff31\007\uff31\010\uff31\011\uff31\012\uff31\013\uff31" +
    "\015\uff31\017\uff31\020\uff31\021\uff31\023\uff31\024\uff31\027" +
    "\uff31\030\uff31\034\uff31\035\uff31\036\uff31\037\uff31\040\uff31" +
    "\041\uff31\042\uff31\043\uff31\054\uff31\055\uff31\056\uff31\057" +
    "\uff31\061\uff31\062\uff31\064\uff31\065\uff31\066\uff31\067\uff31" +
    "\072\uff31\073\uff31\076\uff31\077\uff31\100\uff31\106\uff31\110" +
    "\uff31\114\uff31\122\uff31\130\uff31\131\uff31\132\uff31\001\002" +
    "\000\140\003\uff32\004\uff32\005\uff32\006\uff32\007\uff32\010" +
    "\uff32\011\uff32\012\uff32\013\uff32\015\uff32\017\uff32\020\uff32" +
    "\021\uff32\023\uff32\024\uff32\027\uff32\030\uff32\034\uff32\035" +
    "\uff32\036\uff32\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32" +
    "\054\uff32\055\uff32\056\uff32\057\uff32\061\uff32\062\uff32\064" +
    "\uff32\065\uff32\066\uff32\067\uff32\072\uff32\073\uff32\076\uff32" +
    "\077\uff32\100\uff32\106\uff32\110\uff32\114\uff32\122\uff32\130" +
    "\uff32\131\uff32\132\uff32\001\002\000\140\003\uff35\004\uff35" +
    "\005\uff35\006\uff35\007\uff35\010\uff35\011\uff35\012\uff35\013" +
    "\uff35\015\uff35\017\uff35\020\uff35\021\uff35\023\uff35\024\uff35" +
    "\027\uff35\030\uff35\034\uff35\035\uff35\036\uff35\037\uff35\040" +
    "\uff35\041\uff35\042\uff35\043\uff35\054\uff35\055\uff35\056\uff35" +
    "\057\uff35\061\uff35\062\uff35\064\uff35\065\uff35\066\uff35\067" +
    "\uff35\072\uff35\073\uff35\076\uff35\077\uff35\100\uff35\106\uff35" +
    "\110\uff35\114\uff35\122\uff35\130\uff35\131\uff35\132\uff35\001" +
    "\002\000\140\003\uff34\004\uff34\005\uff34\006\uff34\007\uff34" +
    "\010\uff34\011\uff34\012\uff34\013\uff34\015\uff34\017\uff34\020" +
    "\uff34\021\uff34\023\uff34\024\uff34\027\uff34\030\uff34\034\uff34" +
    "\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042\uff34\043" +
    "\uff34\054\uff34\055\uff34\056\uff34\057\uff34\061\uff34\062\uff34" +
    "\064\uff34\065\uff34\066\uff34\067\uff34\072\uff34\073\uff34\076" +
    "\uff34\077\uff34\100\uff34\106\uff34\110\uff34\114\uff34\122\uff34" +
    "\130\uff34\131\uff34\132\uff34\001\002\000\032\003\037\006" +
    "\044\007\126\015\127\036\045\037\043\061\034\062\041" +
    "\064\042\065\035\066\046\067\032\001\002\000\010\003" +
    "\134\007\133\015\132\001\002\000\136\003\uff58\004\uff58" +
    "\005\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58\013" +
    "\uff58\015\uff58\017\uff58\020\uff58\021\uff58\024\uff58\027\uff58" +
    "\030\uff58\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041" +
    "\uff58\042\uff58\043\uff58\054\uff58\055\uff58\056\uff58\057\uff58" +
    "\061\uff58\062\uff58\064\uff58\065\uff58\066\uff58\067\uff58\072" +
    "\uff58\073\uff58\076\uff58\077\uff58\100\uff58\106\uff58\110\uff58" +
    "\114\uff58\122\uff58\130\uff58\131\uff58\132\uff58\001\002\000" +
    "\026\003\037\006\044\036\045\037\043\061\034\062\041" +
    "\064\042\065\035\066\046\067\032\001\002\000\016\003" +
    "\uff65\007\uff65\013\106\015\uff65\034\105\035\103\001\002" +
    "\000\016\003\uff61\007\uff61\013\106\015\uff61\034\105\035" +
    "\103\001\002\000\026\003\137\006\044\036\045\037\043" +
    "\061\034\062\041\064\042\065\035\066\046\067\032\001" +
    "\002\000\136\003\uff59\004\uff59\005\uff59\006\uff59\007\uff59" +
    "\010\uff59\011\uff59\012\uff59\013\uff59\015\uff59\017\uff59\020" +
    "\uff59\021\uff59\024\uff59\027\uff59\030\uff59\034\uff59\035\uff59" +
    "\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59\054" +
    "\uff59\055\uff59\056\uff59\057\uff59\061\uff59\062\uff59\064\uff59" +
    "\065\uff59\066\uff59\067\uff59\072\uff59\073\uff59\076\uff59\077" +
    "\uff59\100\uff59\106\uff59\110\uff59\114\uff59\122\uff59\130\uff59" +
    "\131\uff59\132\uff59\001\002\000\026\003\037\006\044\036" +
    "\045\037\043\061\034\062\041\064\042\065\035\066\046" +
    "\067\032\001\002\000\016\003\uff63\007\uff63\013\106\015" +
    "\uff63\034\105\035\103\001\002\000\016\003\uff64\007\uff64" +
    "\013\106\015\uff64\034\105\035\103\001\002\000\020\003" +
    "\uff62\004\054\005\057\007\uff62\010\055\011\056\015\uff62" +
    "\001\002\000\026\003\037\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\032\001\002" +
    "\000\014\013\106\015\uffcf\024\uffcf\034\105\035\103\001" +
    "\002\000\012\006\145\015\uffce\021\140\024\uffce\001\002" +
    "\000\006\015\024\024\144\001\002\000\106\002\uffd2\003" +
    "\uffd2\006\uffd2\021\uffd2\024\uffd2\030\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\061\uffd2\062\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\100\uffd2\106\uffd2\110\uffd2\111\uffd2\112\uffd2\114" +
    "\uffd2\115\uffd2\122\uffd2\126\uffd2\130\uffd2\131\uffd2\132\uffd2" +
    "\001\002\000\016\003\150\007\146\074\017\111\005\112" +
    "\006\115\016\001\002\000\004\027\u0195\001\002\000\006" +
    "\003\u0193\062\u0194\001\002\000\004\062\u0192\001\002\000" +
    "\016\007\154\015\152\074\017\111\005\112\006\115\016" +
    "\001\002\000\014\003\u018e\074\017\111\005\112\006\115" +
    "\016\001\002\000\004\062\u018c\001\002\000\004\027\155" +
    "\001\002\000\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\074" +
    "\017\075\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111\005" +
    "\112\006\114\uffe8\115\016\122\uffe8\126\161\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\102\003\uffe8\006\uffe8\021\uffe8" +
    "\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\074\017\075\015\076\uffe8\100\uffe8\106\uffe8\110" +
    "\uffe8\111\005\112\006\114\uffe8\115\016\122\uffe8\126\161" +
    "\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006" +
    "\044\021\175\030\204\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\032\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\004\062\022\001\002\000\004\062\022\001\002\000\006" +
    "\015\024\024\163\001\002\000\106\002\uffd4\003\uffd4\006" +
    "\uffd4\021\uffd4\024\uffd4\030\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\061\uffd4\062\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\072\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\100\uffd4\106\uffd4\110\uffd4\111\uffd4\112\uffd4\114\uffd4\115" +
    "\uffd4\122\uffd4\126\uffd4\130\uffd4\131\uffd4\132\uffd4\001\002" +
    "\000\072\003\uffe7\006\uffe7\021\uffe7\030\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\061\uffe7\062\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\072\uffe7\073\uffe7\076" +
    "\uffe7\077\uffe7\100\uffe7\106\uffe7\110\uffe7\114\uffe7\122\uffe7" +
    "\130\uffe7\131\uffe7\132\uffe7\001\002\000\026\003\037\006" +
    "\044\036\045\037\043\061\034\062\041\064\042\065\035" +
    "\066\046\067\032\001\002\000\072\003\uffe1\006\uffe1\021" +
    "\uffe1\030\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\072\uffe1\073\uffe1\076\uffe1\077\uffe1\100\uffe1\106\uffe1" +
    "\110\uffe1\114\uffe1\122\uffe1\130\uffe1\131\uffe1\132\uffe1\001" +
    "\002\000\072\003\uffe9\006\uffe9\021\uffe9\030\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072\uffe9\073\uffe9" +
    "\076\uffe9\077\uffe9\100\uffe9\106\uffe9\110\uffe9\114\uffe9\122" +
    "\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002\000\074\003\uffd8" +
    "\006\uffd8\021\uffd8\024\u0187\030\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\061\uffd8\062\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\072\uffd8\073\uffd8\076\uffd8\077" +
    "\uffd8\100\uffd8\106\uffd8\110\uffd8\114\uffd8\122\uffd8\130\uffd8" +
    "\131\uffd8\132\uffd8\001\002\000\006\003\u0160\006\u0161\001" +
    "\002\000\006\003\u014c\006\u014d\001\002\000\072\003\uffe6" +
    "\006\uffe6\021\uffe6\030\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\072\uffe6\073\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\106\uffe6\110\uffe6\114\uffe6\122\uffe6\130\uffe6\131\uffe6" +
    "\132\uffe6\001\002\000\072\003\uffe4\006\uffe4\021\uffe4\030" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\061\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\072" +
    "\uffe4\073\uffe4\076\uffe4\077\uffe4\100\uffe4\106\uffe4\110\uffe4" +
    "\114\uffe4\122\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002\000" +
    "\026\003\037\006\044\036\045\037\043\061\034\062\041" +
    "\064\042\065\035\066\046\067\032\001\002\000\006\003" +
    "\u0118\006\u0119\001\002\000\022\003\u0113\024\u0114\061\034" +
    "\062\u0115\064\042\065\035\066\046\067\032\001\002\000" +
    "\110\003\uffbd\006\uffbd\007\uffbd\013\106\015\uffbd\021\uffbd" +
    "\024\uffbd\027\uffbd\030\uffbd\034\105\035\103\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\061\uffbd\062\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd\073\uffbd\076" +
    "\uffbd\077\uffbd\100\uffbd\106\uffbd\110\uffbd\114\uffbd\122\uffbd" +
    "\130\uffbd\131\uffbd\132\uffbd\001\002\000\072\003\uffe2\006" +
    "\uffe2\021\uffe2\030\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\061\uffe2\062\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\072\uffe2\073\uffe2\076\uffe2\077\uffe2\100\uffe2" +
    "\106\uffe2\110\uffe2\114\uffe2\122\uffe2\130\uffe2\131\uffe2\132" +
    "\uffe2\001\002\000\074\003\uffd9\006\uffd9\021\uffd9\024\u0111" +
    "\030\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\072\uffd9\073\uffd9\076\uffd9\077\uffd9\100\uffd9\106\uffd9\110" +
    "\uffd9\114\uffd9\122\uffd9\130\uffd9\131\uffd9\132\uffd9\001\002" +
    "\000\102\003\uffbe\006\uffbe\007\uffbe\015\uffbe\021\uffbe\024" +
    "\uffbe\027\uffbe\030\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\067\uffbe\072\uffbe\073\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\106\uffbe\110\uffbe\114\uffbe\122\uffbe\130\uffbe\131\uffbe\132" +
    "\uffbe\001\002\000\016\002\ufff1\074\ufff1\111\ufff1\112\ufff1" +
    "\115\ufff1\126\ufff1\001\002\000\026\003\037\006\044\036" +
    "\045\037\043\061\034\062\041\064\042\065\035\066\046" +
    "\067\032\001\002\000\004\006\332\001\002\000\026\003" +
    "\037\006\044\036\045\037\043\061\034\062\041\064\042" +
    "\065\035\066\046\067\032\001\002\000\010\003\307\006" +
    "\311\062\310\001\002\000\006\003\253\006\254\001\002" +
    "\000\072\003\uffcb\006\uffcb\021\uffcb\030\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\061\uffcb\062\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb\073\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\106\uffcb\110\uffcb\114\uffcb\122\uffcb" +
    "\130\uffcb\131\uffcb\132\uffcb\001\002\000\072\003\uffe5\006" +
    "\uffe5\021\uffe5\030\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\061\uffe5\062\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\072\uffe5\073\uffe5\076\uffe5\077\uffe5\100\uffe5" +
    "\106\uffe5\110\uffe5\114\uffe5\122\uffe5\130\uffe5\131\uffe5\132" +
    "\uffe5\001\002\000\074\003\uffdf\006\uffdf\021\uffdf\024\252" +
    "\030\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\072\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\106\uffdf\110" +
    "\uffdf\114\uffdf\122\uffdf\130\uffdf\131\uffdf\132\uffdf\001\002" +
    "\000\026\003\037\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\032\001\002\000\072" +
    "\003\uffe3\006\uffe3\021\uffe3\030\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\061\uffe3\062\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3\076\uffe3\077" +
    "\uffe3\100\uffe3\106\uffe3\110\uffe3\114\uffe3\122\uffe3\130\uffe3" +
    "\131\uffe3\132\uffe3\001\002\000\004\027\241\001\002\000" +
    "\136\003\uff5a\004\uff5a\005\uff5a\006\124\007\uff5a\010\uff5a" +
    "\011\uff5a\012\uff5a\013\uff5a\015\uff5a\017\uff5a\020\uff5a\021" +
    "\225\024\uff5a\027\uff5a\030\uff5a\034\uff5a\035\uff5a\036\122" +
    "\037\123\040\223\041\222\042\224\043\221\054\uff5a\055" +
    "\uff5a\056\uff5a\057\uff5a\061\uff5a\062\uff5a\064\uff5a\065\uff5a" +
    "\066\uff5a\067\uff5a\072\uff5a\073\uff5a\076\uff5a\077\uff5a\100" +
    "\uff5a\106\uff5a\110\uff5a\114\uff5a\122\uff5a\130\uff5a\131\uff5a" +
    "\132\uff5a\001\002\000\026\003\240\006\044\036\045\037" +
    "\043\061\034\062\041\064\042\065\035\066\046\067\032" +
    "\001\002\000\026\003\236\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\032\001\002" +
    "\000\026\003\234\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\032\001\002\000\026" +
    "\003\232\006\044\036\045\037\043\061\034\062\041\064" +
    "\042\065\035\066\046\067\032\001\002\000\040\003\227" +
    "\006\044\021\175\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\032\001\002\000\102\003\uff2a\006\uff2a\007\uff2a\015" +
    "\uff2a\021\uff2a\024\uff2a\027\uff2a\030\uff2a\036\uff2a\037\uff2a" +
    "\040\uff2a\041\uff2a\042\uff2a\043\uff2a\061\uff2a\062\uff2a\064" +
    "\uff2a\065\uff2a\066\uff2a\067\uff2a\072\uff2a\073\uff2a\076\uff2a" +
    "\077\uff2a\100\uff2a\106\uff2a\110\uff2a\114\uff2a\122\uff2a\130" +
    "\uff2a\131\uff2a\132\uff2a\001\002\000\112\003\uff25\004\054" +
    "\005\057\006\uff25\007\uff25\010\055\011\056\015\uff25\021" +
    "\uff25\024\uff25\027\uff25\030\uff25\036\uff25\037\uff25\040\uff25" +
    "\041\uff25\042\uff25\043\uff25\061\uff25\062\uff25\064\uff25\065" +
    "\uff25\066\uff25\067\uff25\072\uff25\073\uff25\076\uff25\077\uff25" +
    "\100\uff25\106\uff25\110\uff25\114\uff25\122\uff25\130\uff25\131" +
    "\uff25\132\uff25\001\002\000\110\003\uff2b\006\uff2b\007\uff2b" +
    "\013\106\015\uff2b\021\uff2b\024\uff2b\027\uff2b\030\uff2b\034" +
    "\105\035\103\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b" +
    "\043\uff2b\061\uff2b\062\uff2b\064\uff2b\065\uff2b\066\uff2b\067" +
    "\uff2b\072\uff2b\073\uff2b\076\uff2b\077\uff2b\100\uff2b\106\uff2b" +
    "\110\uff2b\114\uff2b\122\uff2b\130\uff2b\131\uff2b\132\uff2b\001" +
    "\002\000\110\003\uff2d\006\uff2d\007\uff2d\013\106\015\uff2d" +
    "\021\uff2d\024\uff2d\027\uff2d\030\uff2d\034\105\035\103\036" +
    "\uff2d\037\uff2d\040\uff2d\041\uff2d\042\uff2d\043\uff2d\061\uff2d" +
    "\062\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\072\uff2d\073" +
    "\uff2d\076\uff2d\077\uff2d\100\uff2d\106\uff2d\110\uff2d\114\uff2d" +
    "\122\uff2d\130\uff2d\131\uff2d\132\uff2d\001\002\000\112\003" +
    "\uff27\004\054\005\057\006\uff27\007\uff27\010\055\011\056" +
    "\015\uff27\021\uff27\024\uff27\027\uff27\030\uff27\036\uff27\037" +
    "\uff27\040\uff27\041\uff27\042\uff27\043\uff27\061\uff27\062\uff27" +
    "\064\uff27\065\uff27\066\uff27\067\uff27\072\uff27\073\uff27\076" +
    "\uff27\077\uff27\100\uff27\106\uff27\110\uff27\114\uff27\122\uff27" +
    "\130\uff27\131\uff27\132\uff27\001\002\000\110\003\uff2f\006" +
    "\uff2f\007\uff2f\013\106\015\uff2f\021\uff2f\024\uff2f\027\uff2f" +
    "\030\uff2f\034\105\035\103\036\uff2f\037\uff2f\040\uff2f\041" +
    "\uff2f\042\uff2f\043\uff2f\061\uff2f\062\uff2f\064\uff2f\065\uff2f" +
    "\066\uff2f\067\uff2f\072\uff2f\073\uff2f\076\uff2f\077\uff2f\100" +
    "\uff2f\106\uff2f\110\uff2f\114\uff2f\122\uff2f\130\uff2f\131\uff2f" +
    "\132\uff2f\001\002\000\112\003\uff29\004\054\005\057\006" +
    "\uff29\007\uff29\010\055\011\056\015\uff29\021\uff29\024\uff29" +
    "\027\uff29\030\uff29\036\uff29\037\uff29\040\uff29\041\uff29\042" +
    "\uff29\043\uff29\061\uff29\062\uff29\064\uff29\065\uff29\066\uff29" +
    "\067\uff29\072\uff29\073\uff29\076\uff29\077\uff29\100\uff29\106" +
    "\uff29\110\uff29\114\uff29\122\uff29\130\uff29\131\uff29\132\uff29" +
    "\001\002\000\110\003\uff2e\006\uff2e\007\uff2e\013\106\015" +
    "\uff2e\021\uff2e\024\uff2e\027\uff2e\030\uff2e\034\105\035\103" +
    "\036\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e\043\uff2e\061" +
    "\uff2e\062\uff2e\064\uff2e\065\uff2e\066\uff2e\067\uff2e\072\uff2e" +
    "\073\uff2e\076\uff2e\077\uff2e\100\uff2e\106\uff2e\110\uff2e\114" +
    "\uff2e\122\uff2e\130\uff2e\131\uff2e\132\uff2e\001\002\000\112" +
    "\003\uff28\004\054\005\057\006\uff28\007\uff28\010\055\011" +
    "\056\015\uff28\021\uff28\024\uff28\027\uff28\030\uff28\036\uff28" +
    "\037\uff28\040\uff28\041\uff28\042\uff28\043\uff28\061\uff28\062" +
    "\uff28\064\uff28\065\uff28\066\uff28\067\uff28\072\uff28\073\uff28" +
    "\076\uff28\077\uff28\100\uff28\106\uff28\110\uff28\114\uff28\122" +
    "\uff28\130\uff28\131\uff28\132\uff28\001\002\000\110\003\uff2c" +
    "\006\uff2c\007\uff2c\013\106\015\uff2c\021\uff2c\024\uff2c\027" +
    "\uff2c\030\uff2c\034\105\035\103\036\uff2c\037\uff2c\040\uff2c" +
    "\041\uff2c\042\uff2c\043\uff2c\061\uff2c\062\uff2c\064\uff2c\065" +
    "\uff2c\066\uff2c\067\uff2c\072\uff2c\073\uff2c\076\uff2c\077\uff2c" +
    "\100\uff2c\106\uff2c\110\uff2c\114\uff2c\122\uff2c\130\uff2c\131" +
    "\uff2c\132\uff2c\001\002\000\112\003\uff26\004\054\005\057" +
    "\006\uff26\007\uff26\010\055\011\056\015\uff26\021\uff26\024" +
    "\uff26\027\uff26\030\uff26\036\uff26\037\uff26\040\uff26\041\uff26" +
    "\042\uff26\043\uff26\061\uff26\062\uff26\064\uff26\065\uff26\066" +
    "\uff26\067\uff26\072\uff26\073\uff26\076\uff26\077\uff26\100\uff26" +
    "\106\uff26\110\uff26\114\uff26\122\uff26\130\uff26\131\uff26\132" +
    "\uff26\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044" +
    "\021\175\030\243\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\032\072\202\076\170\100\217\106\171\110\176\114" +
    "\177\122\206\130\211\131\210\132\172\001\002\000\004" +
    "\130\244\001\002\000\004\006\245\001\002\000\040\003" +
    "\037\006\044\021\175\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\032\001\002\000\004\007\247\001\002\000\004" +
    "\024\250\001\002\000\072\003\uffac\006\uffac\021\uffac\030" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac\072" +
    "\uffac\073\uffac\076\uffac\077\uffac\100\uffac\106\uffac\110\uffac" +
    "\114\uffac\122\uffac\130\uffac\131\uffac\132\uffac\001\002\000" +
    "\110\003\uff23\006\uff23\007\uff23\013\106\015\uff23\021\uff23" +
    "\024\uff23\027\uff23\030\uff23\034\105\035\103\036\uff23\037" +
    "\uff23\040\uff23\041\uff23\042\uff23\043\uff23\061\uff23\062\uff23" +
    "\064\uff23\065\uff23\066\uff23\067\uff23\072\uff23\073\uff23\076" +
    "\uff23\077\uff23\100\uff23\106\uff23\110\uff23\114\uff23\122\uff23" +
    "\130\uff23\131\uff23\132\uff23\001\002\000\072\003\uffe0\006" +
    "\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\072\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132" +
    "\uffe0\001\002\000\006\007\300\027\301\001\002\000\042" +
    "\003\256\006\044\021\175\027\255\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\032\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\014\004\054\005\057\007\272\010\055\011\056\001\002" +
    "\000\006\007\260\027\261\001\002\000\006\003\264\027" +
    "\265\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044" +
    "\021\175\030\263\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\032\072\202\076\170\100\217\106\171\110\176\114" +
    "\177\122\206\130\211\131\210\132\172\001\002\000\072" +
    "\003\uffb0\006\uffb0\021\uffb0\030\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\061\uffb0\062\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\067\uffb0\072\uffb0\073\uffb0\076\uffb0\077" +
    "\uffb0\100\uffb0\106\uffb0\110\uffb0\114\uffb0\122\uffb0\130\uffb0" +
    "\131\uffb0\132\uffb0\001\002\000\066\003\uffe8\006\uffe8\021" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8" +
    "\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\267\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\032\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\072\003\uffb3\006\uffb3\021\uffb3" +
    "\030\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\072\uffb3\073\uffb3\076\uffb3\077\uffb3\100\uffb3\106\uffb3\110" +
    "\uffb3\114\uffb3\122\uffb3\130\uffb3\131\uffb3\132\uffb3\001\002" +
    "\000\066\003\037\006\044\021\175\030\271\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\032\072\202\076\170\100" +
    "\217\106\171\110\176\114\177\122\206\130\211\131\210" +
    "\132\172\001\002\000\072\003\uffad\006\uffad\021\uffad\030" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad\072" +
    "\uffad\073\uffad\076\uffad\077\uffad\100\uffad\106\uffad\110\uffad" +
    "\114\uffad\122\uffad\130\uffad\131\uffad\132\uffad\001\002\000" +
    "\004\027\273\001\002\000\066\003\uffe8\006\uffe8\021\uffe8" +
    "\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122" +
    "\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037" +
    "\006\044\021\175\030\275\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\032\072\202\076\170\100\217\106\171\110" +
    "\176\114\177\122\206\130\211\131\210\132\172\001\002" +
    "\000\072\003\uffb2\006\uffb2\021\uffb2\030\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\061\uffb2\062\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\072\uffb2\073\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\106\uffb2\110\uffb2\114\uffb2\122\uffb2" +
    "\130\uffb2\131\uffb2\132\uffb2\001\002\000\066\003\037\006" +
    "\044\021\175\030\277\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\032\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\072\003\uffaf\006\uffaf\021\uffaf\030\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\061\uffaf\062\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\072\uffaf\073\uffaf\076\uffaf" +
    "\077\uffaf\100\uffaf\106\uffaf\110\uffaf\114\uffaf\122\uffaf\130" +
    "\uffaf\131\uffaf\132\uffaf\001\002\000\004\027\304\001\002" +
    "\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\066\003\037\006\044\021\175\030" +
    "\303\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\032\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\072\003\uffae\006" +
    "\uffae\021\uffae\030\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\061\uffae\062\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\072\uffae\073\uffae\076\uffae\077\uffae\100\uffae" +
    "\106\uffae\110\uffae\114\uffae\122\uffae\130\uffae\131\uffae\132" +
    "\uffae\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044" +
    "\021\175\030\306\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\032\072\202\076\170\100\217\106\171\110\176\114" +
    "\177\122\206\130\211\131\210\132\172\001\002\000\072" +
    "\003\uffb1\006\uffb1\021\uffb1\030\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\061\uffb1\062\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\072\uffb1\073\uffb1\076\uffb1\077" +
    "\uffb1\100\uffb1\106\uffb1\110\uffb1\114\uffb1\122\uffb1\130\uffb1" +
    "\131\uffb1\132\uffb1\001\002\000\006\007\324\062\325\001" +
    "\002\000\004\024\323\001\002\000\010\003\313\007\312" +
    "\062\314\001\002\000\074\003\uff8e\006\uff8e\021\uff8e\024" +
    "\322\030\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\072\uff8e\073\uff8e\076\uff8e\077\uff8e\100\uff8e\106\uff8e" +
    "\110\uff8e\114\uff8e\122\uff8e\130\uff8e\131\uff8e\132\uff8e\001" +
    "\002\000\004\024\321\001\002\000\006\003\316\007\315" +
    "\001\002\000\074\003\uff8f\006\uff8f\021\uff8f\024\320\030" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\072" +
    "\uff8f\073\uff8f\076\uff8f\077\uff8f\100\uff8f\106\uff8f\110\uff8f" +
    "\114\uff8f\122\uff8f\130\uff8f\131\uff8f\132\uff8f\001\002\000" +
    "\004\024\317\001\002\000\072\003\uff95\006\uff95\021\uff95" +
    "\030\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\072\uff95\073\uff95\076\uff95\077\uff95\100\uff95\106\uff95\110" +
    "\uff95\114\uff95\122\uff95\130\uff95\131\uff95\132\uff95\001\002" +
    "\000\072\003\uff99\006\uff99\021\uff99\030\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\061\uff99\062\uff99" +
    "\064\uff99\065\uff99\066\uff99\067\uff99\072\uff99\073\uff99\076" +
    "\uff99\077\uff99\100\uff99\106\uff99\110\uff99\114\uff99\122\uff99" +
    "\130\uff99\131\uff99\132\uff99\001\002\000\072\003\uff92\006" +
    "\uff92\021\uff92\030\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\061\uff92\062\uff92\064\uff92\065\uff92\066" +
    "\uff92\067\uff92\072\uff92\073\uff92\076\uff92\077\uff92\100\uff92" +
    "\106\uff92\110\uff92\114\uff92\122\uff92\130\uff92\131\uff92\132" +
    "\uff92\001\002\000\072\003\uff98\006\uff98\021\uff98\030\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\061" +
    "\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98\072\uff98" +
    "\073\uff98\076\uff98\077\uff98\100\uff98\106\uff98\110\uff98\114" +
    "\uff98\122\uff98\130\uff98\131\uff98\132\uff98\001\002\000\072" +
    "\003\uff94\006\uff94\021\uff94\030\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\061\uff94\062\uff94\064\uff94" +
    "\065\uff94\066\uff94\067\uff94\072\uff94\073\uff94\076\uff94\077" +
    "\uff94\100\uff94\106\uff94\110\uff94\114\uff94\122\uff94\130\uff94" +
    "\131\uff94\132\uff94\001\002\000\004\024\330\001\002\000" +
    "\004\007\326\001\002\000\004\024\327\001\002\000\072" +
    "\003\uff96\006\uff96\021\uff96\030\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\061\uff96\062\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\072\uff96\073\uff96\076\uff96\077" +
    "\uff96\100\uff96\106\uff96\110\uff96\114\uff96\122\uff96\130\uff96" +
    "\131\uff96\132\uff96\001\002\000\072\003\uff93\006\uff93\021" +
    "\uff93\030\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\061\uff93\062\uff93\064\uff93\065\uff93\066\uff93\067" +
    "\uff93\072\uff93\073\uff93\076\uff93\077\uff93\100\uff93\106\uff93" +
    "\110\uff93\114\uff93\122\uff93\130\uff93\131\uff93\132\uff93\001" +
    "\002\000\110\003\uff22\006\uff22\007\uff22\013\106\015\uff22" +
    "\021\uff22\024\uff22\027\uff22\030\uff22\034\105\035\103\036" +
    "\uff22\037\uff22\040\uff22\041\uff22\042\uff22\043\uff22\061\uff22" +
    "\062\uff22\064\uff22\065\uff22\066\uff22\067\uff22\072\uff22\073" +
    "\uff22\076\uff22\077\uff22\100\uff22\106\uff22\110\uff22\114\uff22" +
    "\122\uff22\130\uff22\131\uff22\132\uff22\001\002\000\026\003" +
    "\335\006\340\036\045\037\043\061\034\062\337\064\042" +
    "\065\035\066\046\067\032\001\002\000\020\004\uff42\005" +
    "\uff42\007\uff42\010\uff42\011\uff42\012\uff42\023\uff42\001\002" +
    "\000\016\004\353\005\356\007\u0102\010\354\011\355\012" +
    "\352\001\002\000\014\004\345\005\350\010\346\011\347" +
    "\012\343\001\002\000\020\004\uff41\005\uff41\007\uff41\010" +
    "\uff41\011\uff41\012\uff41\023\uff41\001\002\000\026\004\uff45" +
    "\005\uff45\006\376\007\uff45\010\uff45\011\uff45\012\uff45\023" +
    "\uff45\036\122\037\123\001\002\000\026\003\342\006\340" +
    "\036\045\037\043\061\034\062\337\064\042\065\035\066" +
    "\046\067\032\001\002\000\016\004\353\005\356\007\375" +
    "\010\354\011\355\012\352\001\002\000\016\004\345\005" +
    "\350\007\344\010\346\011\347\012\343\001\002\000\026" +
    "\003\335\006\340\036\045\037\043\061\034\062\337\064" +
    "\042\065\035\066\046\067\032\001\002\000\020\004\uff36" +
    "\005\uff36\007\uff36\010\uff36\011\uff36\012\uff36\023\uff36\001" +
    "\002\000\026\003\335\006\340\036\045\037\043\061\034" +
    "\062\337\064\042\065\035\066\046\067\032\001\002\000" +
    "\026\003\335\006\340\036\045\037\043\061\034\062\337" +
    "\064\042\065\035\066\046\067\032\001\002\000\026\003" +
    "\335\006\340\036\045\037\043\061\034\062\337\064\042" +
    "\065\035\066\046\067\032\001\002\000\026\003\335\006" +
    "\340\036\045\037\043\061\034\062\337\064\042\065\035" +
    "\066\046\067\032\001\002\000\020\004\uff39\005\uff39\007" +
    "\uff39\010\uff39\011\uff39\012\uff39\023\uff39\001\002\000\026" +
    "\003\370\006\340\036\045\037\043\061\034\062\337\064" +
    "\042\065\035\066\046\067\032\001\002\000\026\003\366" +
    "\006\340\036\045\037\043\061\034\062\337\064\042\065" +
    "\035\066\046\067\032\001\002\000\026\003\364\006\340" +
    "\036\045\037\043\061\034\062\337\064\042\065\035\066" +
    "\046\067\032\001\002\000\026\003\362\006\340\036\045" +
    "\037\043\061\034\062\337\064\042\065\035\066\046\067" +
    "\032\001\002\000\026\003\360\006\340\036\045\037\043" +
    "\061\034\062\337\064\042\065\035\066\046\067\032\001" +
    "\002\000\020\004\uff49\005\uff49\007\uff49\010\uff49\011\uff49" +
    "\012\uff49\023\uff49\001\002\000\020\004\345\005\350\007" +
    "\uff3e\010\346\011\347\012\343\023\uff3e\001\002\000\020" +
    "\004\uff48\005\uff48\007\uff48\010\uff48\011\uff48\012\uff48\023" +
    "\uff48\001\002\000\020\004\345\005\350\007\uff3d\010\346" +
    "\011\347\012\343\023\uff3d\001\002\000\020\004\uff4a\005" +
    "\356\007\uff4a\010\uff4a\011\355\012\352\023\uff4a\001\002" +
    "\000\020\004\345\005\350\007\uff3f\010\346\011\347\012" +
    "\343\023\uff3f\001\002\000\020\004\uff4b\005\356\007\uff4b" +
    "\010\uff4b\011\355\012\352\023\uff4b\001\002\000\020\004" +
    "\345\005\350\007\uff40\010\346\011\347\012\343\023\uff40" +
    "\001\002\000\020\004\uff47\005\uff47\007\uff47\010\uff47\011" +
    "\uff47\012\uff47\023\uff47\001\002\000\020\004\345\005\350" +
    "\007\uff3c\010\346\011\347\012\343\023\uff3c\001\002\000" +
    "\020\004\uff38\005\uff38\007\uff38\010\uff38\011\uff38\012\uff38" +
    "\023\uff38\001\002\000\020\004\uff3a\005\356\007\uff3a\010" +
    "\uff3a\011\355\012\352\023\uff3a\001\002\000\020\004\uff3b" +
    "\005\356\007\uff3b\010\uff3b\011\355\012\352\023\uff3b\001" +
    "\002\000\020\004\uff37\005\uff37\007\uff37\010\uff37\011\uff37" +
    "\012\uff37\023\uff37\001\002\000\020\004\uff46\005\uff46\007" +
    "\uff46\010\uff46\011\uff46\012\uff46\023\uff46\001\002\000\032" +
    "\003\037\006\044\007\u0100\015\127\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\032\001\002" +
    "\000\010\003\134\007\u0101\015\132\001\002\000\020\004" +
    "\uff43\005\uff43\007\uff43\010\uff43\011\uff43\012\uff43\023\uff43" +
    "\001\002\000\020\004\uff44\005\uff44\007\uff44\010\uff44\011" +
    "\uff44\012\uff44\023\uff44\001\002\000\004\027\u0103\001\002" +
    "\000\010\030\uff9c\073\uff9c\077\uff9c\001\002\000\010\030" +
    "\u0109\073\u0108\077\u0105\001\002\000\004\023\u010e\001\002" +
    "\000\004\030\u010d\001\002\000\010\030\uff9d\073\uff9d\077" +
    "\uff9d\001\002\000\026\003\335\006\340\036\045\037\043" +
    "\061\034\062\337\064\042\065\035\066\046\067\032\001" +
    "\002\000\072\003\uff9e\006\uff9e\021\uff9e\030\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\061\uff9e\062" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\072\uff9e\073\uff9e" +
    "\076\uff9e\077\uff9e\100\uff9e\106\uff9e\110\uff9e\114\uff9e\122" +
    "\uff9e\130\uff9e\131\uff9e\132\uff9e\001\002\000\016\004\353" +
    "\005\356\010\354\011\355\012\352\023\u010b\001\002\000" +
    "\072\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\072\003\037\006\044" +
    "\021\175\030\uff9b\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\032\072\202\073\uff9b\076\170\077\uff9b\100\217\106" +
    "\171\110\176\114\177\122\206\130\211\131\210\132\172" +
    "\001\002\000\072\003\uff9f\006\uff9f\021\uff9f\030\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\061\uff9f" +
    "\062\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\072\uff9f\073" +
    "\uff9f\076\uff9f\077\uff9f\100\uff9f\106\uff9f\110\uff9f\114\uff9f" +
    "\122\uff9f\130\uff9f\131\uff9f\132\uff9f\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\uff9a\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\032\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\110\003\uff21\006\uff21\007\uff21" +
    "\013\106\015\uff21\021\uff21\024\uff21\027\uff21\030\uff21\034" +
    "\105\035\103\036\uff21\037\uff21\040\uff21\041\uff21\042\uff21" +
    "\043\uff21\061\uff21\062\uff21\064\uff21\065\uff21\066\uff21\067" +
    "\uff21\072\uff21\073\uff21\076\uff21\077\uff21\100\uff21\106\uff21" +
    "\110\uff21\114\uff21\122\uff21\130\uff21\131\uff21\132\uff21\001" +
    "\002\000\072\003\uffde\006\uffde\021\uffde\030\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\061\uffde\062" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\072\uffde\073\uffde" +
    "\076\uffde\077\uffde\100\uffde\106\uffde\110\uffde\114\uffde\122" +
    "\uffde\130\uffde\131\uffde\132\uffde\001\002\000\074\003\uffd7" +
    "\006\uffd7\021\uffd7\024\u0117\030\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\061\uffd7\062\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\072\uffd7\073\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\106\uffd7\110\uffd7\114\uffd7\122\uffd7\130\uffd7" +
    "\131\uffd7\132\uffd7\001\002\000\072\003\uffd5\006\uffd5\021" +
    "\uffd5\030\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\061\uffd5\062\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\072\uffd5\073\uffd5\076\uffd5\077\uffd5\100\uffd5\106\uffd5" +
    "\110\uffd5\114\uffd5\122\uffd5\130\uffd5\131\uffd5\132\uffd5\001" +
    "\002\000\072\003\uffda\006\uffda\021\uffda\030\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\061\uffda\062" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\072\uffda\073\uffda" +
    "\076\uffda\077\uffda\100\uffda\106\uffda\110\uffda\114\uffda\122" +
    "\uffda\130\uffda\131\uffda\132\uffda\001\002\000\074\003\uffd6" +
    "\006\uffd6\021\uffd6\024\u0116\030\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\061\uffd6\062\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\072\uffd6\073\uffd6\076\uffd6\077" +
    "\uffd6\100\uffd6\106\uffd6\110\uffd6\114\uffd6\122\uffd6\130\uffd6" +
    "\131\uffd6\132\uffd6\001\002\000\072\003\uffdb\006\uffdb\021" +
    "\uffdb\030\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\072\uffdb\073\uffdb\076\uffdb\077\uffdb\100\uffdb\106\uffdb" +
    "\110\uffdb\114\uffdb\122\uffdb\130\uffdb\131\uffdb\132\uffdb\001" +
    "\002\000\072\003\uffdc\006\uffdc\021\uffdc\030\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\073\uffdc" +
    "\076\uffdc\077\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\006\007\u0142" +
    "\027\u0143\001\002\000\042\003\u011b\006\044\021\175\027" +
    "\u011a\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\032\001" +
    "\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8" +
    "\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\014\004\054\005\057\007\u013a" +
    "\010\055\011\056\001\002\000\006\007\u011d\027\u011e\001" +
    "\002\000\006\003\u012a\027\u0136\001\002\000\066\003\uffe8" +
    "\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110" +
    "\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002" +
    "\000\066\003\037\006\044\021\175\030\u0120\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\032\072\202\076\170\100" +
    "\217\106\171\110\176\114\177\122\206\130\211\131\210" +
    "\132\172\001\002\000\074\003\uffc5\006\uffc5\021\uffc5\030" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\061\uffc5\062\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\072" +
    "\uffc5\073\uffc5\076\uffc5\077\uffc5\100\uffc5\102\u0121\106\uffc5" +
    "\110\uffc5\114\uffc5\122\uffc5\130\uffc5\131\uffc5\132\uffc5\001" +
    "\002\000\010\003\u0123\027\u0125\110\u0126\001\002\000\072" +
    "\003\uffc6\006\uffc6\021\uffc6\030\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\061\uffc6\062\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\072\uffc6\073\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\106\uffc6\110\uffc6\114\uffc6\122\uffc6\130\uffc6" +
    "\131\uffc6\132\uffc6\001\002\000\066\003\uffe8\006\uffe8\021" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8" +
    "\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\072\003" +
    "\uffb4\006\uffb4\021\uffb4\030\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\061\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\072\uffb4\073\uffb4\076\uffb4\077\uffb4" +
    "\100\uffb4\106\uffb4\110\uffb4\114\uffb4\122\uffb4\130\uffb4\131" +
    "\uffb4\132\uffb4\001\002\000\066\003\uffe8\006\uffe8\021\uffe8" +
    "\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122" +
    "\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\006\003\u0118" +
    "\006\u0127\001\002\000\042\003\u011b\006\044\021\175\027" +
    "\u011a\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\032\001" +
    "\002\000\006\007\u0129\027\u011e\001\002\000\006\003\u012a" +
    "\027\u012b\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072" +
    "\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8" +
    "\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\066\003\037\006\044\021\175\030\u012d\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\032\072\202\076\170\100\217" +
    "\106\171\110\176\114\177\122\206\130\211\131\210\132" +
    "\172\001\002\000\074\003\uffb7\006\uffb7\021\uffb7\030\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\061" +
    "\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\072\uffb7" +
    "\073\uffb7\076\uffb7\077\uffb7\100\uffb7\102\u0121\106\uffb7\110" +
    "\uffb7\114\uffb7\122\uffb7\130\uffb7\131\uffb7\132\uffb7\001\002" +
    "\000\072\003\uffb8\006\uffb8\021\uffb8\030\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\061\uffb8\062\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\072\uffb8\073\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\106\uffb8\110\uffb8\114\uffb8\122\uffb8" +
    "\130\uffb8\131\uffb8\132\uffb8\001\002\000\066\003\037\006" +
    "\044\021\175\030\u0130\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\032\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\074\003\uffbf\006\uffbf\021\uffbf\030\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\061\uffbf\062\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\072\uffbf\073\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\102\u0121\106\uffbf\110\uffbf\114\uffbf\122" +
    "\uffbf\130\uffbf\131\uffbf\132\uffbf\001\002\000\072\003\uffc0" +
    "\006\uffc0\021\uffc0\030\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130\uffc0\131\uffc0" +
    "\132\uffc0\001\002\000\066\003\037\006\044\021\175\030" +
    "\u0133\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\032\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\072\003\uffb6\006" +
    "\uffb6\021\uffb6\030\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\072\uffb6\073\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\106\uffb6\110\uffb6\114\uffb6\122\uffb6\130\uffb6\131\uffb6\132" +
    "\uffb6\001\002\000\066\003\037\006\044\021\175\030\u0135" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\032\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\072\003\uffb5\006\uffb5" +
    "\021\uffb5\030\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\072\uffb5\073\uffb5\076\uffb5\077\uffb5\100\uffb5\106" +
    "\uffb5\110\uffb5\114\uffb5\122\uffb5\130\uffb5\131\uffb5\132\uffb5" +
    "\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021" +
    "\175\030\u0138\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\032\072\202\076\170\100\217\106\171\110\176\114\177" +
    "\122\206\130\211\131\210\132\172\001\002\000\074\003" +
    "\uffcc\006\uffcc\021\uffcc\030\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\061\uffcc\062\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\072\uffcc\073\uffcc\076\uffcc\077\uffcc" +
    "\100\uffcc\102\u0121\106\uffcc\110\uffcc\114\uffcc\122\uffcc\130" +
    "\uffcc\131\uffcc\132\uffcc\001\002\000\072\003\uffcd\006\uffcd" +
    "\021\uffcd\030\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\067\uffcd\072\uffcd\073\uffcd\076\uffcd\077\uffcd\100\uffcd\106" +
    "\uffcd\110\uffcd\114\uffcd\122\uffcd\130\uffcd\131\uffcd\132\uffcd" +
    "\001\002\000\004\027\u013b\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\066\003\037\006\044\021\175\030\u013d\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\032\072\202\076\170\100\217" +
    "\106\171\110\176\114\177\122\206\130\211\131\210\132" +
    "\172\001\002\000\074\003\uffc9\006\uffc9\021\uffc9\030\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\061" +
    "\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\072\uffc9" +
    "\073\uffc9\076\uffc9\077\uffc9\100\uffc9\102\u0121\106\uffc9\110" +
    "\uffc9\114\uffc9\122\uffc9\130\uffc9\131\uffc9\132\uffc9\001\002" +
    "\000\072\003\uffca\006\uffca\021\uffca\030\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\061\uffca\062\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\072\uffca\073\uffca\076" +
    "\uffca\077\uffca\100\uffca\106\uffca\110\uffca\114\uffca\122\uffca" +
    "\130\uffca\131\uffca\132\uffca\001\002\000\066\003\037\006" +
    "\044\021\175\030\u0140\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\032\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\074\003\uffc3\006\uffc3\021\uffc3\030\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\061\uffc3\062\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\072\uffc3\073\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\102\u0121\106\uffc3\110\uffc3\114\uffc3\122" +
    "\uffc3\130\uffc3\131\uffc3\132\uffc3\001\002\000\072\003\uffc4" +
    "\006\uffc4\021\uffc4\030\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\072\uffc4\073\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\106\uffc4\110\uffc4\114\uffc4\122\uffc4\130\uffc4\131\uffc4" +
    "\132\uffc4\001\002\000\004\027\u0147\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\u0145\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\032\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\074\003\uffc1\006\uffc1\021\uffc1" +
    "\030\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\072\uffc1\073\uffc1\076\uffc1\077\uffc1\100\uffc1\102\u0121\106" +
    "\uffc1\110\uffc1\114\uffc1\122\uffc1\130\uffc1\131\uffc1\132\uffc1" +
    "\001\002\000\072\003\uffc2\006\uffc2\021\uffc2\030\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\061\uffc2" +
    "\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\072\uffc2\073" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\106\uffc2\110\uffc2\114\uffc2" +
    "\122\uffc2\130\uffc2\131\uffc2\132\uffc2\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\u0149\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\032\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\074\003\uffc7\006\uffc7\021\uffc7" +
    "\030\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\072\uffc7\073\uffc7\076\uffc7\077\uffc7\100\uffc7\102\u0121\106" +
    "\uffc7\110\uffc7\114\uffc7\122\uffc7\130\uffc7\131\uffc7\132\uffc7" +
    "\001\002\000\072\003\uffc8\006\uffc8\021\uffc8\030\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\061\uffc8" +
    "\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\072\uffc8\073" +
    "\uffc8\076\uffc8\077\uffc8\100\uffc8\106\uffc8\110\uffc8\114\uffc8" +
    "\122\uffc8\130\uffc8\131\uffc8\132\uffc8\001\002\000\110\003" +
    "\uff20\006\uff20\007\uff20\013\106\015\uff20\021\uff20\024\uff20" +
    "\027\uff20\030\uff20\034\105\035\103\036\uff20\037\uff20\040" +
    "\uff20\041\uff20\042\uff20\043\uff20\061\uff20\062\uff20\064\uff20" +
    "\065\uff20\066\uff20\067\uff20\072\uff20\073\uff20\076\uff20\077" +
    "\uff20\100\uff20\106\uff20\110\uff20\114\uff20\122\uff20\130\uff20" +
    "\131\uff20\132\uff20\001\002\000\042\003\037\006\044\015" +
    "\u014f\021\175\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\032\001\002\000\042\003\u0150\006\044\015\u014f\021\175" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\032\001\002" +
    "\000\010\003\u0157\007\u0156\015\u0155\001\002\000\040\003" +
    "\037\006\044\021\175\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\032\001\002\000\014\004\054\005\057\007\u0152" +
    "\010\055\011\056\001\002\000\010\003\uff8b\007\uff8b\015" +
    "\uff8b\001\002\000\004\024\u0153\001\002\000\072\003\uff8c" +
    "\006\uff8c\021\uff8c\030\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\067\uff8c\072\uff8c\073\uff8c\076\uff8c\077\uff8c\100" +
    "\uff8c\106\uff8c\110\uff8c\114\uff8c\122\uff8c\130\uff8c\131\uff8c" +
    "\132\uff8c\001\002\000\010\003\uff88\007\uff88\015\uff88\001" +
    "\002\000\040\003\u015a\006\044\021\175\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\032\001\002\000\074\003\uff8d" +
    "\006\uff8d\021\uff8d\024\u0159\030\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\061\uff8d\062\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\072\uff8d\073\uff8d\076\uff8d\077" +
    "\uff8d\100\uff8d\106\uff8d\110\uff8d\114\uff8d\122\uff8d\130\uff8d" +
    "\131\uff8d\132\uff8d\001\002\000\012\003\uff87\007\uff87\015" +
    "\uff87\024\u0158\001\002\000\072\003\uff90\006\uff90\021\uff90" +
    "\030\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90" +
    "\072\uff90\073\uff90\076\uff90\077\uff90\100\uff90\106\uff90\110" +
    "\uff90\114\uff90\122\uff90\130\uff90\131\uff90\132\uff90\001\002" +
    "\000\072\003\uff97\006\uff97\021\uff97\030\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\061\uff97\062\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\072\uff97\073\uff97\076" +
    "\uff97\077\uff97\100\uff97\106\uff97\110\uff97\114\uff97\122\uff97" +
    "\130\uff97\131\uff97\132\uff97\001\002\000\020\003\uff89\004" +
    "\054\005\057\007\uff89\010\055\011\056\015\uff89\001\002" +
    "\000\010\003\uff8a\007\uff8a\015\uff8a\001\002\000\010\003" +
    "\u015e\007\u015d\015\u0155\001\002\000\004\024\u015f\001\002" +
    "\000\010\003\uff87\007\uff87\015\uff87\001\002\000\072\003" +
    "\uff91\006\uff91\021\uff91\030\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\061\uff91\062\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\072\uff91\073\uff91\076\uff91\077\uff91" +
    "\100\uff91\106\uff91\110\uff91\114\uff91\122\uff91\130\uff91\131" +
    "\uff91\132\uff91\001\002\000\006\007\u0180\027\u0181\001\002" +
    "\000\060\003\u0165\006\044\021\175\024\uffa2\027\u0164\036" +
    "\045\037\043\040\165\041\215\042\207\043\205\061\034" +
    "\062\220\064\042\065\035\066\046\067\032\074\017\075" +
    "\015\111\005\112\006\115\016\126\161\001\002\000\006" +
    "\007\u0176\027\u0177\001\002\000\042\003\u0169\006\044\021" +
    "\175\024\uffa2\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\032\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\016\004\054\005\057" +
    "\007\u016d\010\055\011\056\024\uffa0\001\002\000\004\024" +
    "\u0168\001\002\000\010\007\uffa1\024\uffa1\027\uffa1\001\002" +
    "\000\042\003\u0169\006\044\021\175\024\uffa2\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\032\001\002\000\020\004" +
    "\054\005\057\007\uffa0\010\055\011\056\024\uffa0\027\uffa0" +
    "\001\002\000\004\024\u016b\001\002\000\044\003\u0169\006" +
    "\044\007\uffa2\021\175\027\uffa2\036\045\037\043\040\165" +
    "\041\215\042\207\043\205\061\034\062\220\064\042\065" +
    "\035\066\046\067\032\001\002\000\006\007\uffa3\027\uffa3" +
    "\001\002\000\004\027\u016e\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\066\003\037\006\044\021\175\030\u0170\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\032\072\202\076\170\100\217" +
    "\106\171\110\176\114\177\122\206\130\211\131\210\132" +
    "\172\001\002\000\072\003\uffaa\006\uffaa\021\uffaa\030\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\061" +
    "\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\072\uffaa" +
    "\073\uffaa\076\uffaa\077\uffaa\100\uffaa\106\uffaa\110\uffaa\114" +
    "\uffaa\122\uffaa\130\uffaa\131\uffaa\132\uffaa\001\002\000\066" +
    "\003\037\006\044\021\175\030\u0172\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\032\072\202\076\170\100\217\106" +
    "\171\110\176\114\177\122\206\130\211\131\210\132\172" +
    "\001\002\000\072\003\uffa7\006\uffa7\021\uffa7\030\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\061\uffa7" +
    "\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\072\uffa7\073" +
    "\uffa7\076\uffa7\077\uffa7\100\uffa7\106\uffa7\110\uffa7\114\uffa7" +
    "\122\uffa7\130\uffa7\131\uffa7\132\uffa7\001\002\000\004\024" +
    "\u0174\001\002\000\044\003\u0169\006\044\007\uffa2\021\175" +
    "\027\uffa2\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\032" +
    "\001\002\000\006\007\uffa4\027\uffa4\001\002\000\006\003" +
    "\u017a\027\u017b\001\002\000\066\003\uffe8\006\uffe8\021\uffe8" +
    "\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122" +
    "\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037" +
    "\006\044\021\175\030\u0179\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\032\072\202\076\170\100\217\106\171\110" +
    "\176\114\177\122\206\130\211\131\210\132\172\001\002" +
    "\000\072\003\uffa8\006\uffa8\021\uffa8\030\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\061\uffa8\062\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\072\uffa8\073\uffa8\076" +
    "\uffa8\077\uffa8\100\uffa8\106\uffa8\110\uffa8\114\uffa8\122\uffa8" +
    "\130\uffa8\131\uffa8\132\uffa8\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8" +
    "\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132" +
    "\uffe8\001\002\000\066\003\037\006\044\021\175\030\u017d" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\032\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\072\003\uffab\006\uffab" +
    "\021\uffab\030\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab" +
    "\067\uffab\072\uffab\073\uffab\076\uffab\077\uffab\100\uffab\106" +
    "\uffab\110\uffab\114\uffab\122\uffab\130\uffab\131\uffab\132\uffab" +
    "\001\002\000\066\003\037\006\044\021\175\030\u017f\036" +
    "\045\037\043\040\165\041\215\042\207\043\205\061\034" +
    "\062\220\064\042\065\035\066\046\067\032\072\202\076" +
    "\170\100\217\106\171\110\176\114\177\122\206\130\211" +
    "\131\210\132\172\001\002\000\072\003\uffa5\006\uffa5\021" +
    "\uffa5\030\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067" +
    "\uffa5\072\uffa5\073\uffa5\076\uffa5\077\uffa5\100\uffa5\106\uffa5" +
    "\110\uffa5\114\uffa5\122\uffa5\130\uffa5\131\uffa5\132\uffa5\001" +
    "\002\000\004\027\u0184\001\002\000\066\003\uffe8\006\uffe8" +
    "\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114" +
    "\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066" +
    "\003\037\006\044\021\175\030\u0183\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\032\072\202\076\170\100\217\106" +
    "\171\110\176\114\177\122\206\130\211\131\210\132\172" +
    "\001\002\000\072\003\uffa6\006\uffa6\021\uffa6\030\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\061\uffa6" +
    "\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\072\uffa6\073" +
    "\uffa6\076\uffa6\077\uffa6\100\uffa6\106\uffa6\110\uffa6\114\uffa6" +
    "\122\uffa6\130\uffa6\131\uffa6\132\uffa6\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\u0186\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\032\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\072\003\uffa9\006\uffa9\021\uffa9" +
    "\030\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\072\uffa9\073\uffa9\076\uffa9\077\uffa9\100\uffa9\106\uffa9\110" +
    "\uffa9\114\uffa9\122\uffa9\130\uffa9\131\uffa9\132\uffa9\001\002" +
    "\000\072\003\uffdd\006\uffdd\021\uffdd\030\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\061\uffdd\062\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\073\uffdd\076" +
    "\uffdd\077\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd\122\uffdd" +
    "\130\uffdd\131\uffdd\132\uffdd\001\002\000\110\003\uff24\006" +
    "\uff24\007\uff24\013\106\015\uff24\021\uff24\024\uff24\027\uff24" +
    "\030\uff24\034\105\035\103\036\uff24\037\uff24\040\uff24\041" +
    "\uff24\042\uff24\043\uff24\061\uff24\062\uff24\064\uff24\065\uff24" +
    "\066\uff24\067\uff24\072\uff24\073\uff24\076\uff24\077\uff24\100" +
    "\uff24\106\uff24\110\uff24\114\uff24\122\uff24\130\uff24\131\uff24" +
    "\132\uff24\001\002\000\066\003\037\006\044\021\175\030" +
    "\u018b\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\032\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\104\002\ufffb\003" +
    "\ufffb\006\ufffb\021\ufffb\030\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\061\ufffb\062\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\072\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\100\ufffb\106\ufffb\110\ufffb\111\ufffb\112\ufffb\114\ufffb\115" +
    "\ufffb\122\ufffb\126\ufffb\130\ufffb\131\ufffb\132\ufffb\001\002" +
    "\000\016\002\ufff5\074\ufff5\111\ufff5\112\ufff5\115\ufff5\126" +
    "\ufff5\001\002\000\016\007\uffea\015\uffea\074\uffea\111\uffea" +
    "\112\uffea\115\uffea\001\002\000\006\003\u0190\062\u0191\001" +
    "\002\000\004\062\u018f\001\002\000\016\007\uffec\015\uffec" +
    "\074\uffec\111\uffec\112\uffec\115\uffec\001\002\000\016\007" +
    "\uffeb\015\uffeb\074\uffeb\111\uffeb\112\uffeb\115\uffeb\001\002" +
    "\000\016\007\uffef\015\uffef\074\uffef\111\uffef\112\uffef\115" +
    "\uffef\001\002\000\016\007\uffee\015\uffee\074\uffee\111\uffee" +
    "\112\uffee\115\uffee\001\002\000\016\007\uffed\015\uffed\074" +
    "\uffed\111\uffed\112\uffed\115\uffed\001\002\000\016\007\ufff0" +
    "\015\ufff0\074\ufff0\111\ufff0\112\ufff0\115\ufff0\001\002\000" +
    "\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\074\017\075\015" +
    "\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111\005\112\006\114" +
    "\uffe8\115\016\122\uffe8\126\161\130\uffe8\131\uffe8\132\uffe8" +
    "\001\002\000\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\074" +
    "\017\075\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111\005" +
    "\112\006\114\uffe8\115\016\122\uffe8\126\161\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021\175" +
    "\030\u0198\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\032" +
    "\072\202\076\170\100\217\106\171\110\176\114\177\122" +
    "\206\130\211\131\210\132\172\001\002\000\016\002\ufff2" +
    "\074\ufff2\111\ufff2\112\ufff2\115\ufff2\126\ufff2\001\002\000" +
    "\066\003\037\006\044\021\175\030\u019a\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\032\072\202\076\170\100\217" +
    "\106\171\110\176\114\177\122\206\130\211\131\210\132" +
    "\172\001\002\000\016\002\ufff6\074\ufff6\111\ufff6\112\ufff6" +
    "\115\ufff6\126\ufff6\001\002\000\004\002\001\001\002\000" +
    "\012\006\u019d\015\uffce\021\140\024\uffce\001\002\000\016" +
    "\003\150\007\u019e\074\017\111\005\112\006\115\016\001" +
    "\002\000\004\027\u01a7\001\002\000\016\007\u01a0\015\152" +
    "\074\017\111\005\112\006\115\016\001\002\000\004\027" +
    "\u01a1\001\002\000\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\074\017\075\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111" +
    "\005\112\006\114\uffe8\115\016\122\uffe8\126\161\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\102\003\uffe8\006\uffe8\021" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\072\uffe8\074\017\075\015\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\111\005\112\006\114\uffe8\115\016\122\uffe8\126" +
    "\161\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037" +
    "\006\044\021\175\030\u01a4\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\032\072\202\076\170\100\217\106\171\110" +
    "\176\114\177\122\206\130\211\131\210\132\172\001\002" +
    "\000\016\002\ufff4\074\ufff4\111\ufff4\112\ufff4\115\ufff4\126" +
    "\ufff4\001\002\000\066\003\037\006\044\021\175\030\u01a6" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\032\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\016\002\ufff8\074\ufff8" +
    "\111\ufff8\112\ufff8\115\ufff8\126\ufff8\001\002\000\102\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\074\017\075\015\076\uffe8" +
    "\100\uffe8\106\uffe8\110\uffe8\111\005\112\006\114\uffe8\115" +
    "\016\122\uffe8\126\161\130\uffe8\131\uffe8\132\uffe8\001\002" +
    "\000\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\074\017\075" +
    "\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111\005\112\006" +
    "\114\uffe8\115\016\122\uffe8\126\161\130\uffe8\131\uffe8\132" +
    "\uffe8\001\002\000\066\003\037\006\044\021\175\030\u01aa" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\032\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\016\002\ufff3\074\ufff3" +
    "\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001\002\000\066\003" +
    "\037\006\044\021\175\030\u01ac\036\045\037\043\040\165" +
    "\041\215\042\207\043\205\061\034\062\220\064\042\065" +
    "\035\066\046\067\032\072\202\076\170\100\217\106\171" +
    "\110\176\114\177\122\206\130\211\131\210\132\172\001" +
    "\002\000\016\002\ufff7\074\ufff7\111\ufff7\112\ufff7\115\ufff7" +
    "\126\ufff7\001\002\000\004\062\u01b1\001\002\000\016\002" +
    "\ufff9\074\ufff9\111\ufff9\112\ufff9\115\ufff9\126\ufff9\001\002" +
    "\000\004\062\u01b0\001\002\000\004\006\145\001\002\000" +
    "\004\006\u019d\001\002\000\006\003\uff80\062\uff80\001\002" +
    "\000\006\003\uff81\062\uff81\001\002\000\006\003\uff82\062" +
    "\uff82\001\002\000\016\002\000\074\017\111\005\112\006" +
    "\115\016\126\u01af\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b3\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\u0189\014\010\024\013" +
    "\030\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u01ac\024\u01ad\001\001\000\004" +
    "\023\161\001\001\000\002\001\001\000\004\023\142\001" +
    "\001\000\002\001\001\000\004\014\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\030\032\037\033\032\034\035\036\027\001\001\000\004" +
    "\016\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\030\032\037\033\032\034\035\036\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\030\032\037\033\100\001\001" +
    "\000\010\022\030\032\037\033\077\001\001\000\010\022" +
    "\030\032\037\033\076\001\001\000\010\022\030\032\037" +
    "\033\057\001\001\000\002\001\001\000\010\022\030\032" +
    "\037\033\075\001\001\000\010\022\030\032\037\033\073" +
    "\001\001\000\010\022\030\032\037\033\071\001\001\000" +
    "\010\022\030\032\037\033\067\001\001\000\010\022\030" +
    "\032\037\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\030\032\037\033\032\034\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\030\032" +
    "\037\033\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\030\032\037\033\032\034\035\036\127\037\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\030\032\037\033\032\034\035\036\130\001\001\000\004" +
    "\016\103\001\001\000\004\016\103\001\001\000\014\022" +
    "\030\032\037\033\032\034\035\036\135\001\001\000\002" +
    "\001\001\000\014\022\030\032\037\033\032\034\035\036" +
    "\134\001\001\000\004\016\103\001\001\000\004\016\103" +
    "\001\001\000\002\001\001\000\014\022\030\032\037\033" +
    "\032\034\035\036\140\001\001\000\004\016\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\146\025\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\152\001\001\000" +
    "\004\014\u018c\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\006\014\157\027\155\035\156\001\001\000" +
    "\010\004\u0189\014\157\035\u0188\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\030\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\042\165\051\211\001\001\000\004\023\161\001\001\000" +
    "\004\023\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\030\032\037\033\032\034" +
    "\035\036\u0187\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\030\032\037" +
    "\033\032\034\035\036\u014a\001\001\000\002\001\001\000" +
    "\004\022\u0111\001\001\000\004\016\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\030\032\037\033\032\034\035\036\u010f" +
    "\001\001\000\002\001\001\000\014\022\030\032\037\033" +
    "\032\034\035\036\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\030\032\037\033\032\034\035\036\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\030\032\037\033\032\034\035\036\236" +
    "\001\001\000\014\022\030\032\037\033\032\034\035\036" +
    "\234\001\001\000\014\022\030\032\037\033\032\034\035" +
    "\036\232\001\001\000\014\022\030\032\037\033\032\034" +
    "\035\036\230\001\001\000\016\022\030\031\225\032\037" +
    "\033\032\034\035\036\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\103\001\001\000\004\016\103" +
    "\001\001\000\002\001\001\000\004\016\103\001\001\000" +
    "\002\001\001\000\004\016\103\001\001\000\002\001\001" +
    "\000\004\016\103\001\001\000\002\001\001\000\004\035" +
    "\241\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\030\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\042\165\051\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\245\022" +
    "\030\031\202\032\037\033\032\034\035\036\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\256\022\030\031\202\032\037\033\032\034" +
    "\035\036\177\001\001\000\004\035\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\261\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\030\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\042\165\051\211\001\001" +
    "\000\002\001\001\000\004\035\267\001\001\000\004\035" +
    "\265\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\030\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\042\165\051\211\001\001" +
    "\000\002\001\001\000\042\003\166\006\163\010\212\011" +
    "\173\012\213\021\215\022\030\026\200\031\202\032\037" +
    "\033\032\034\035\036\177\040\172\042\165\051\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\273" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\030\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\042\165\051\211\001\001\000" +
    "\002\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\030\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\042\165\051\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\301\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\030\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\042\165\051\211\001\001\000\002" +
    "\001\001\000\004\035\304\001\001\000\042\003\166\006" +
    "\163\010\212\011\173\012\213\021\215\022\030\026\200" +
    "\031\202\032\037\033\032\034\035\036\177\040\172\042" +
    "\165\051\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\103\001\001\000\010\022\332" +
    "\032\335\047\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\332\032\335\047\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\332\032\335\047\373" +
    "\001\001\000\002\001\001\000\010\022\332\032\335\047" +
    "\372\001\001\000\010\022\332\032\335\047\371\001\001" +
    "\000\010\022\332\032\335\047\370\001\001\000\010\022" +
    "\332\032\335\047\350\001\001\000\002\001\001\000\010" +
    "\022\332\032\335\047\366\001\001\000\010\022\332\032" +
    "\335\047\364\001\001\000\010\022\332\032\335\047\362" +
    "\001\001\000\010\022\332\032\335\047\360\001\001\000" +
    "\010\022\332\032\335\047\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\030\032\037\033\032\034" +
    "\035\036\127\037\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0103\001\001\000\006\044\u0105\045\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\332\032\335\047\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u010b\001\001\000\042\003\166\006" +
    "\163\010\212\011\173\012\213\021\215\022\030\026\200" +
    "\031\202\032\037\033\032\034\035\036\177\040\172\042" +
    "\165\051\211\001\001\000\002\001\001\000\004\035\u010e" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\030\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\042\165\051\211\001\001\000" +
    "\004\016\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\u011b\022\030\031\202\032\037\033\032\034\035\036" +
    "\177\001\001\000\004\035\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u011e\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\030\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\042\165\051\211\001\001\000\004" +
    "\007\u0121\001\001\000\004\051\u0123\001\001\000\002\001" +
    "\001\000\004\035\u0133\001\001\000\002\001\001\000\004" +
    "\035\u0131\001\001\000\002\001\001\000\020\012\u0127\022" +
    "\030\031\202\032\037\033\032\034\035\036\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u012e\001" +
    "\001\000\004\035\u012b\001\001\000\042\003\166\006\163" +
    "\010\212\011\173\012\213\021\215\022\030\026\200\031" +
    "\202\032\037\033\032\034\035\036\177\040\172\042\165" +
    "\051\211\001\001\000\004\007\u012d\001\001\000\002\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\030\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\042\165\051\211\001\001\000\004" +
    "\007\u0130\001\001\000\002\001\001\000\042\003\166\006" +
    "\163\010\212\011\173\012\213\021\215\022\030\026\200" +
    "\031\202\032\037\033\032\034\035\036\177\040\172\042" +
    "\165\051\211\001\001\000\002\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\030\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\042\165\051\211\001\001\000\002\001\001\000\004\035" +
    "\u0136\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\030\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\042\165\051\211\001\001" +
    "\000\004\007\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u013b\001\001\000\042\003\166\006\163" +
    "\010\212\011\173\012\213\021\215\022\030\026\200\031" +
    "\202\032\037\033\032\034\035\036\177\040\172\042\165" +
    "\051\211\001\001\000\004\007\u013d\001\001\000\002\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\030\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\042\165\051\211\001\001\000\004" +
    "\007\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0143\001\001\000\042\003\166\006\163\010\212" +
    "\011\173\012\213\021\215\022\030\026\200\031\202\032" +
    "\037\033\032\034\035\036\177\040\172\042\165\051\211" +
    "\001\001\000\004\007\u0145\001\001\000\002\001\001\000" +
    "\004\035\u0147\001\001\000\042\003\166\006\163\010\212" +
    "\011\173\012\213\021\215\022\030\026\200\031\202\032" +
    "\037\033\032\034\035\036\177\040\172\042\165\051\211" +
    "\001\001\000\004\007\u0149\001\001\000\002\001\001\000" +
    "\004\016\103\001\001\000\022\012\u0150\022\030\031\202" +
    "\032\037\033\032\034\035\036\177\050\u015b\001\001\000" +
    "\022\012\u0150\022\030\031\202\032\037\033\032\034\035" +
    "\036\177\050\u014d\001\001\000\002\001\001\000\020\012" +
    "\u0153\022\030\031\202\032\037\033\032\034\035\036\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\u015a" +
    "\022\030\031\202\032\037\033\032\034\035\036\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\u0162\005\u0165\012" +
    "\u0166\013\u0161\014\157\022\030\031\202\032\037\033\032" +
    "\034\035\036\177\001\001\000\002\001\001\000\022\005" +
    "\u0172\012\u0166\022\030\031\202\032\037\033\032\034\035" +
    "\036\177\001\001\000\004\035\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\u0169" +
    "\012\u0166\022\030\031\202\032\037\033\032\034\035\036" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\u016b\012\u0166\022\030\031\202\032\037\033\032\034" +
    "\035\036\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u016e\001\001\000\042\003\166\006\163\010" +
    "\212\011\173\012\213\021\215\022\030\026\200\031\202" +
    "\032\037\033\032\034\035\036\177\040\172\042\165\051" +
    "\211\001\001\000\002\001\001\000\042\003\166\006\163" +
    "\010\212\011\173\012\213\021\215\022\030\026\200\031" +
    "\202\032\037\033\032\034\035\036\177\040\172\042\165" +
    "\051\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\u0174\012\u0166\022\030\031\202\032\037\033\032" +
    "\034\035\036\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u0177\001\001\000\042\003\166\006\163" +
    "\010\212\011\173\012\213\021\215\022\030\026\200\031" +
    "\202\032\037\033\032\034\035\036\177\040\172\042\165" +
    "\051\211\001\001\000\002\001\001\000\004\035\u017d\001" +
    "\001\000\004\035\u017b\001\001\000\042\003\166\006\163" +
    "\010\212\011\173\012\213\021\215\022\030\026\200\031" +
    "\202\032\037\033\032\034\035\036\177\040\172\042\165" +
    "\051\211\001\001\000\002\001\001\000\042\003\166\006" +
    "\163\010\212\011\173\012\213\021\215\022\030\026\200" +
    "\031\202\032\037\033\032\034\035\036\177\040\172\042" +
    "\165\051\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0181\001\001\000\042\003\166\006\163\010" +
    "\212\011\173\012\213\021\215\022\030\026\200\031\202" +
    "\032\037\033\032\034\035\036\177\040\172\042\165\051" +
    "\211\001\001\000\002\001\001\000\004\035\u0184\001\001" +
    "\000\042\003\166\006\163\010\212\011\173\012\213\021" +
    "\215\022\030\026\200\031\202\032\037\033\032\034\035" +
    "\036\177\040\172\042\165\051\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\103\001\001\000\042" +
    "\003\166\006\163\010\212\011\173\012\213\021\215\022" +
    "\030\026\200\031\202\032\037\033\032\034\035\036\177" +
    "\040\172\042\165\051\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\006\014\157\027\u0195\035\u0196\001\001\000" +
    "\010\004\u0189\014\157\035\u0198\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\030\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\042\165\051\211\001\001\000\002\001\001\000\042\003" +
    "\166\006\163\010\212\011\173\012\213\021\215\022\030" +
    "\026\200\031\202\032\037\033\032\034\035\036\177\040" +
    "\172\042\165\051\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\146\025\u019e\001" +
    "\001\000\002\001\001\000\004\014\152\001\001\000\002" +
    "\001\001\000\012\004\006\014\157\027\u01a1\035\u01a2\001" +
    "\001\000\010\004\u0189\014\157\035\u01a4\001\001\000\042" +
    "\003\166\006\163\010\212\011\173\012\213\021\215\022" +
    "\030\026\200\031\202\032\037\033\032\034\035\036\177" +
    "\040\172\042\165\051\211\001\001\000\002\001\001\000" +
    "\042\003\166\006\163\010\212\011\173\012\213\021\215" +
    "\022\030\026\200\031\202\032\037\033\032\034\035\036" +
    "\177\040\172\042\165\051\211\001\001\000\002\001\001" +
    "\000\012\004\006\014\157\027\u01a7\035\u01a8\001\001\000" +
    "\010\004\u0189\014\157\035\u01aa\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\030\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\042\165\051\211\001\001\000\002\001\001\000\042\003" +
    "\166\006\163\010\212\011\173\012\213\021\215\022\030" +
    "\026\200\031\202\032\037\033\032\034\035\036\177\040" +
    "\172\042\165\051\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\u01ac\024\u01ad\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado.";
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= error IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= T_DATO error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= PARAMETROS COMMA error IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= PARAMETROS COMMA T_DATO error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= PARAMETROS T_DATO IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Los parámetros deben estar separados por una coma"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTROL_STATEMENT ::= RETURN LITERALES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTROL_STATEMENT ::= RETURN IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTROL_STATEMENT ::= RETURN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURA_IF ::= ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESTRUCTURA_ELSE ::= ELSE error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del else."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESTRUCTURA_ELSE ::= ELSE ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESTRUCTURA_WHILE ::= WHILE LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESTRUCTURA_WHILE ::= WHILE error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ESTRUCTURA_WHILE ::= WHILE LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESTRUCTURA_WHILE ::= WHILE error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESTRUCTURA_FOR ::= FOR LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la sentencia del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESTRUCTURA_FOR ::= FOR error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ESTRUCTURA_FOR ::= FOR LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ESTRUCTURA_FOR ::= FOR error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION_FOR ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASE_STMT ::= CASE EXPRESIONES_NUMERICAS COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // READ_WRITE ::= READ error IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // READ_WRITE ::= READ LPAREN IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // READ_WRITE ::= READ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan los paréntesis para la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // READ_WRITE ::= READ error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // READ_WRITE ::= READ LPAREN error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // READ_WRITE ::= WRITE error LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // READ_WRITE ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // READ_WRITE ::= WRITE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta una expresión entre los paréntesis"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LISTA_EXPRESIONES ::= COMMA EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ARGUMENTOS ::= ARGUMENTOS error EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ARGUMENTOS ::= ARGUMENTOS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ARGUMENTOS ::= COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESION_ARITMETICA ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESION_ARITMETICA ::= error TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPRESION_ARITMETICA ::= error DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPRESION_ARITMETICA ::= error PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION_ARITMETICA ::= error MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPRESIONES_NUMERICAS ::= error PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPRESIONES_NUMERICAS ::= error MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPRESIONES_NUMERICAS ::= error TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPRESIONES_NUMERICAS ::= error DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPRESIONES_NUMERICAS ::= error MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPRESIONES_NUMERICAS ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INCREMENTO_DECREMENTO ::= DEC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INCREMENTO_DECREMENTO ::= INC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPRESION_ASIGNACION ::= PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPRESION_ASIGNACION ::= MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPRESION_ASIGNACION ::= TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPRESION_ASIGNACION ::= DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPRESION_ASIGNACION ::= ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
