
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\030\004\000\002\024\013\000\002\024\012\000" +
    "\002\024\012\000\002\024\013\000\002\024\012\000\002" +
    "\024\011\000\002\024\011\000\002\024\012\000\002\025" +
    "\004\000\002\025\006\000\002\036\004\000\002\036\002" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\004\005\000\002\004\006\000\002\023\005\000" +
    "\002\023\007\000\002\023\005\000\002\023\003\000\002" +
    "\006\012\000\002\012\003\000\002\012\003\000\002\037" +
    "\005\000\002\037\003\000\002\035\005\000\002\035\003" +
    "\000\002\007\013\000\002\007\006\000\002\007\002\000" +
    "\002\010\011\000\002\041\013\000\002\011\011\000\002" +
    "\013\006\000\002\013\007\000\002\005\003\000\002\005" +
    "\002\000\002\043\012\000\002\043\011\000\002\044\004" +
    "\000\002\044\002\000\002\047\006\000\002\046\005\000" +
    "\002\021\007\000\002\021\006\000\002\021\007\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\040\003\000\002\040\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\034" +
    "\006\000\002\034\005\000\002\034\003\000\002\034\003" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\003\000\002\052\006\000\002\052\005\000\002\052" +
    "\003\000\002\052\003\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\016\074\015\075\017\111\005\112\006\115" +
    "\016\126\013\001\002\000\016\074\015\075\017\111\005" +
    "\112\006\115\016\126\013\001\002\000\010\062\uffc1\112" +
    "\u0105\115\u0104\001\002\000\006\062\uffbf\111\u0103\001\002" +
    "\000\066\006\ufffe\030\ufffe\036\ufffe\037\ufffe\061\ufffe\062" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\072\ufffe\074\ufffe" +
    "\075\ufffe\076\ufffe\100\ufffe\106\ufffe\110\ufffe\111\ufffe\112" +
    "\ufffe\114\ufffe\115\ufffe\122\ufffe\126\ufffe\130\ufffe\131\ufffe" +
    "\132\ufffe\001\002\000\016\002\uffff\074\015\111\005\112" +
    "\006\115\016\126\013\001\002\000\004\062\357\001\002" +
    "\000\004\002\356\001\002\000\004\062\114\001\002\000" +
    "\016\002\ufffc\074\ufffc\111\ufffc\112\ufffc\115\ufffc\126\ufffc" +
    "\001\002\000\004\062\uffc0\001\002\000\006\062\uffbe\111" +
    "\113\001\002\000\012\074\015\111\005\112\006\115\016" +
    "\001\002\000\004\062\021\001\002\000\010\015\uffdc\021" +
    "\111\024\uffdc\001\002\000\006\015\023\024\024\001\002" +
    "\000\004\062\025\001\002\000\070\006\uffe0\024\uffe0\030" +
    "\uffe0\036\uffe0\037\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\072\uffe0\074\uffe0\075\uffe0\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\111\uffe0\112\uffe0\114\uffe0\115\uffe0" +
    "\122\uffe0\126\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000" +
    "\010\015\uffdf\021\026\024\uffdf\001\002\000\024\006\042" +
    "\036\041\037\043\061\033\062\037\064\040\065\034\066" +
    "\044\067\030\001\002\000\014\013\053\015\uffde\024\uffde" +
    "\034\052\035\050\001\002\000\046\004\uffa1\005\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\017\uffa1" +
    "\020\uffa1\023\uffa1\024\uffa1\034\uffa1\035\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\001\002\000\044\004\uff95\005\uff95" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\015\uff95\017" +
    "\uff95\020\uff95\024\uff95\034\uff95\035\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\001\002\000\044\004\066\005\071\007" +
    "\uffd5\010\067\011\070\012\065\013\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\024\uffd5\034\uffd5\035\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\001\002\000\046\004\uffa5\005\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5\020" +
    "\uffa5\023\uffa5\024\uffa5\034\uffa5\035\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\001\002\000\046\004\uffa3\005\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3" +
    "\020\uffa3\023\uffa3\024\uffa3\034\uffa3\035\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\001\002\000\032\007\uffd7\013\uffd7" +
    "\015\uffd7\017\056\020\061\024\uffd7\034\uffd7\035\uffd7\054" +
    "\060\055\055\056\057\057\062\001\002\000\044\004\uff94" +
    "\005\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\015" +
    "\uff94\017\uff94\020\uff94\024\uff94\034\uff94\035\uff94\054\uff94" +
    "\055\uff94\056\uff94\057\uff94\001\002\000\052\004\uff98\005" +
    "\uff98\006\102\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\015\uff98\017\uff98\020\uff98\024\uff98\034\uff98\035\uff98\036" +
    "\100\037\101\054\uff98\055\uff98\056\uff98\057\uff98\001\002" +
    "\000\046\004\uffa4\005\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\023\uffa4\024\uffa4" +
    "\034\uffa4\035\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001" +
    "\002\000\004\062\077\001\002\000\024\006\042\036\041" +
    "\037\043\061\033\062\037\064\040\065\034\066\044\067" +
    "\030\001\002\000\004\062\045\001\002\000\046\004\uffa2" +
    "\005\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015" +
    "\uffa2\017\uffa2\020\uffa2\023\uffa2\024\uffa2\034\uffa2\035\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002\000\046\004" +
    "\uff85\005\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85" +
    "\015\uff85\017\uff85\020\uff85\023\uff85\024\uff85\034\uff85\035" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\001\002\000\012" +
    "\007\047\013\053\034\052\035\050\001\002\000\044\004" +
    "\uff99\005\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\015\uff99\017\uff99\020\uff99\024\uff99\034\uff99\035\uff99\054" +
    "\uff99\055\uff99\056\uff99\057\uff99\001\002\000\024\006\uffb3" +
    "\036\uffb3\037\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\001\002\000\024\006\042\036\041\037\043" +
    "\061\033\062\037\064\040\065\034\066\044\067\030\001" +
    "\002\000\024\006\uffb2\036\uffb2\037\uffb2\061\uffb2\062\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000\024\006" +
    "\uffb1\036\uffb1\037\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\001\002\000\032\007\uffd8\013\uffd8\015" +
    "\uffd8\017\056\020\061\024\uffd8\034\uffd8\035\uffd8\054\060" +
    "\055\055\056\057\057\062\001\002\000\024\006\uffb9\036" +
    "\uffb9\037\uffb9\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\001\002\000\024\006\uffb7\036\uffb7\037\uffb7\061" +
    "\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002" +
    "\000\024\006\uffb5\036\uffb5\037\uffb5\061\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\024\006\uffb8" +
    "\036\uffb8\037\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066" +
    "\uffb8\067\uffb8\001\002\000\024\006\uffb6\036\uffb6\037\uffb6" +
    "\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001" +
    "\002\000\024\006\uffb4\036\uffb4\037\uffb4\061\uffb4\062\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002\000\024\006" +
    "\042\036\041\037\043\061\033\062\037\064\040\065\034" +
    "\066\044\067\030\001\002\000\044\004\066\005\071\007" +
    "\uffd6\010\067\011\070\012\065\013\uffd6\015\uffd6\017\uffd6" +
    "\020\uffd6\024\uffd6\034\uffd6\035\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\001\002\000\024\006\042\036\041\037\043" +
    "\061\033\062\037\064\040\065\034\066\044\067\030\001" +
    "\002\000\024\006\042\036\041\037\043\061\033\062\037" +
    "\064\040\065\034\066\044\067\030\001\002\000\024\006" +
    "\042\036\041\037\043\061\033\062\037\064\040\065\034" +
    "\066\044\067\030\001\002\000\024\006\042\036\041\037" +
    "\043\061\033\062\037\064\040\065\034\066\044\067\030" +
    "\001\002\000\024\006\042\036\041\037\043\061\033\062" +
    "\037\064\040\065\034\066\044\067\030\001\002\000\044" +
    "\004\uff9c\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\015\uff9c\017\uff9c\020\uff9c\024\uff9c\034\uff9c\035\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\044\004" +
    "\uff9b\005\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\015\uff9b\017\uff9b\020\uff9b\024\uff9b\034\uff9b\035\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002\000\044\004\uff9d" +
    "\005\071\007\uff9d\010\uff9d\011\070\012\065\013\uff9d\015" +
    "\uff9d\017\uff9d\020\uff9d\024\uff9d\034\uff9d\035\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\001\002\000\044\004\uff9e\005" +
    "\071\007\uff9e\010\uff9e\011\070\012\065\013\uff9e\015\uff9e" +
    "\017\uff9e\020\uff9e\024\uff9e\034\uff9e\035\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\001\002\000\044\004\uff9a\005\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a\017" +
    "\uff9a\020\uff9a\024\uff9a\034\uff9a\035\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\001\002\000\046\004\uff86\005\uff86\007" +
    "\uff86\010\uff86\011\uff86\012\uff86\013\uff86\015\uff86\017\uff86" +
    "\020\uff86\023\uff86\024\uff86\034\uff86\035\uff86\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\001\002\000\046\004\uff88\005\uff88" +
    "\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\015\uff88\017" +
    "\uff88\020\uff88\023\uff88\024\uff88\034\uff88\035\uff88\054\uff88" +
    "\055\uff88\056\uff88\057\uff88\001\002\000\046\004\uff87\005" +
    "\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87" +
    "\017\uff87\020\uff87\023\uff87\024\uff87\034\uff87\035\uff87\054" +
    "\uff87\055\uff87\056\uff87\057\uff87\001\002\000\026\006\042" +
    "\007\104\036\041\037\043\061\033\062\037\064\040\065" +
    "\034\066\044\067\030\001\002\000\014\007\uffa0\013\053" +
    "\015\uffa0\034\052\035\050\001\002\000\044\004\uff96\005" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\015\uff96" +
    "\017\uff96\020\uff96\024\uff96\034\uff96\035\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\001\002\000\006\007\107\015\106" +
    "\001\002\000\024\006\042\036\041\037\043\061\033\062" +
    "\037\064\040\065\034\066\044\067\030\001\002\000\044" +
    "\004\uff97\005\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\015\uff97\017\uff97\020\uff97\024\uff97\034\uff97\035\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\001\002\000\014\007" +
    "\uff9f\013\053\015\uff9f\034\052\035\050\001\002\000\024" +
    "\006\042\036\041\037\043\061\033\062\037\064\040\065" +
    "\034\066\044\067\030\001\002\000\014\013\053\015\uffdd" +
    "\024\uffdd\034\052\035\050\001\002\000\004\062\uffba\001" +
    "\002\000\004\006\115\001\002\000\014\007\117\074\015" +
    "\111\005\112\006\115\016\001\002\000\004\062\355\001" +
    "\002\000\004\027\347\001\002\000\006\007\122\015\121" +
    "\001\002\000\012\074\015\111\005\112\006\115\016\001" +
    "\002\000\004\027\123\001\002\000\064\006\uffef\030\uffef" +
    "\036\uffef\037\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\072\uffef\074\015\075\017\076\uffef\100\uffef" +
    "\106\uffef\110\uffef\111\005\112\006\114\uffef\115\016\122" +
    "\uffef\130\uffef\131\uffef\132\uffef\001\002\000\064\006\uffef" +
    "\030\uffef\036\uffef\037\uffef\061\uffef\062\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\072\uffef\074\015\075\017\076\uffef" +
    "\100\uffef\106\uffef\110\uffef\111\005\112\006\114\uffef\115" +
    "\016\122\uffef\130\uffef\131\uffef\132\uffef\001\002\000\052" +
    "\006\042\030\135\036\041\037\043\061\033\062\137\064" +
    "\040\065\034\066\044\067\030\072\151\076\132\100\145" +
    "\106\154\110\142\114\136\122\141\130\133\131\131\132" +
    "\144\001\002\000\004\062\021\001\002\000\006\015\023" +
    "\024\130\001\002\000\070\006\uffe1\024\uffe1\030\uffe1\036" +
    "\uffe1\037\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\072\uffe1\074\uffe1\075\uffe1\076\uffe1\100\uffe1\106" +
    "\uffe1\110\uffe1\111\uffe1\112\uffe1\114\uffe1\115\uffe1\122\uffe1" +
    "\126\uffe1\130\uffe1\131\uffe1\132\uffe1\001\002\000\004\006" +
    "\334\001\002\000\004\024\333\001\002\000\004\006\325" +
    "\001\002\000\056\006\ufff0\030\ufff0\036\ufff0\037\ufff0\061" +
    "\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\072\ufff0" +
    "\073\ufff0\076\ufff0\077\ufff0\100\ufff0\106\ufff0\110\ufff0\114" +
    "\ufff0\122\ufff0\130\ufff0\131\ufff0\132\ufff0\001\002\000\016" +
    "\002\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001" +
    "\002\000\020\024\320\061\033\062\322\064\040\065\034" +
    "\066\044\067\030\001\002\000\062\004\uff98\005\uff98\006" +
    "\102\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\017\uff98" +
    "\020\uff98\021\311\024\uff98\034\uff98\035\uff98\036\100\037" +
    "\101\040\307\041\306\042\310\043\305\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\001\002\000\056\006\uffea\030\uffea\036" +
    "\uffea\037\uffea\061\uffea\062\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\072\uffea\073\uffea\076\uffea\077\uffea\100\uffea\106" +
    "\uffea\110\uffea\114\uffea\122\uffea\130\uffea\131\uffea\132\uffea" +
    "\001\002\000\004\006\241\001\002\000\004\006\216\001" +
    "\002\000\056\006\uffeb\030\uffeb\036\uffeb\037\uffeb\061\uffeb" +
    "\062\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\072\uffeb\073" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\106\uffeb\110\uffeb\114\uffeb" +
    "\122\uffeb\130\uffeb\131\uffeb\132\uffeb\001\002\000\004\006" +
    "\212\001\002\000\004\027\202\001\002\000\006\007\uffda" +
    "\024\uffda\001\002\000\056\006\uffe9\030\uffe9\036\uffe9\037" +
    "\uffe9\061\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\072\uffe9\073\uffe9\076\uffe9\077\uffe9\100\uffe9\106\uffe9\110" +
    "\uffe9\114\uffe9\122\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002" +
    "\000\056\006\uffed\030\uffed\036\uffed\037\uffed\061\uffed\062" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\073\uffed" +
    "\076\uffed\077\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122" +
    "\uffed\130\uffed\131\uffed\132\uffed\001\002\000\004\024\201" +
    "\001\002\000\056\006\uffec\030\uffec\036\uffec\037\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\073\uffec\076\uffec\077\uffec\100\uffec\106\uffec\110\uffec\114" +
    "\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\004" +
    "\024\200\001\002\000\004\006\160\001\002\000\056\006" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\014\007\uffd9\013\053\024" +
    "\uffd9\034\052\035\050\001\002\000\056\006\uffee\030\uffee" +
    "\036\uffee\037\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\072\uffee\073\uffee\076\uffee\077\uffee\100\uffee" +
    "\106\uffee\110\uffee\114\uffee\122\uffee\130\uffee\131\uffee\132" +
    "\uffee\001\002\000\040\006\042\024\uffcb\036\041\037\043" +
    "\061\033\062\137\064\040\065\034\066\044\067\030\074" +
    "\015\075\017\111\005\112\006\115\016\001\002\000\004" +
    "\007\174\001\002\000\026\006\042\024\uffcb\036\041\037" +
    "\043\061\033\062\137\064\040\065\034\066\044\067\030" +
    "\001\002\000\004\024\165\001\002\000\006\007\uffcc\024" +
    "\uffcc\001\002\000\026\006\042\024\uffcb\036\041\037\043" +
    "\061\033\062\137\064\040\065\034\066\044\067\030\001" +
    "\002\000\004\024\167\001\002\000\026\006\042\007\uffcb" +
    "\036\041\037\043\061\033\062\137\064\040\065\034\066" +
    "\044\067\030\001\002\000\004\007\uffcd\001\002\000\004" +
    "\024\172\001\002\000\026\006\042\007\uffcb\036\041\037" +
    "\043\061\033\062\137\064\040\065\034\066\044\067\030" +
    "\001\002\000\004\007\uffce\001\002\000\004\027\175\001" +
    "\002\000\052\006\uffef\030\uffef\036\uffef\037\uffef\061\uffef" +
    "\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\072\uffef\076" +
    "\uffef\100\uffef\106\uffef\110\uffef\114\uffef\122\uffef\130\uffef" +
    "\131\uffef\132\uffef\001\002\000\052\006\042\030\177\036" +
    "\041\037\043\061\033\062\137\064\040\065\034\066\044" +
    "\067\030\072\151\076\132\100\145\106\154\110\142\114" +
    "\136\122\141\130\133\131\131\132\144\001\002\000\056" +
    "\006\uffcf\030\uffcf\036\uffcf\037\uffcf\061\uffcf\062\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\072\uffcf\073\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\106\uffcf\110\uffcf\114\uffcf\122\uffcf\130" +
    "\uffcf\131\uffcf\132\uffcf\001\002\000\056\006\uffe7\030\uffe7" +
    "\036\uffe7\037\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\072\uffe7\073\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\106\uffe7\110\uffe7\114\uffe7\122\uffe7\130\uffe7\131\uffe7\132" +
    "\uffe7\001\002\000\056\006\uffe6\030\uffe6\036\uffe6\037\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072" +
    "\uffe6\073\uffe6\076\uffe6\077\uffe6\100\uffe6\106\uffe6\110\uffe6" +
    "\114\uffe6\122\uffe6\130\uffe6\131\uffe6\132\uffe6\001\002\000" +
    "\052\006\uffef\030\uffef\036\uffef\037\uffef\061\uffef\062\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\072\uffef\076\uffef\100" +
    "\uffef\106\uffef\110\uffef\114\uffef\122\uffef\130\uffef\131\uffef" +
    "\132\uffef\001\002\000\052\006\042\030\204\036\041\037" +
    "\043\061\033\062\137\064\040\065\034\066\044\067\030" +
    "\072\151\076\132\100\145\106\154\110\142\114\136\122" +
    "\141\130\133\131\131\132\144\001\002\000\004\130\205" +
    "\001\002\000\004\006\206\001\002\000\024\006\042\036" +
    "\041\037\043\061\033\062\137\064\040\065\034\066\044" +
    "\067\030\001\002\000\004\007\210\001\002\000\004\024" +
    "\211\001\002\000\056\006\uffd0\030\uffd0\036\uffd0\037\uffd0" +
    "\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\072" +
    "\uffd0\073\uffd0\076\uffd0\077\uffd0\100\uffd0\106\uffd0\110\uffd0" +
    "\114\uffd0\122\uffd0\130\uffd0\131\uffd0\132\uffd0\001\002\000" +
    "\024\006\042\036\041\037\043\061\033\062\137\064\040" +
    "\065\034\066\044\067\030\001\002\000\004\007\214\001" +
    "\002\000\004\024\215\001\002\000\056\006\uffc2\030\uffc2" +
    "\036\uffc2\037\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\072\uffc2\073\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\106\uffc2\110\uffc2\114\uffc2\122\uffc2\130\uffc2\131\uffc2\132" +
    "\uffc2\001\002\000\024\006\042\036\041\037\043\061\033" +
    "\062\137\064\040\065\034\066\044\067\030\001\002\000" +
    "\004\007\220\001\002\000\004\027\221\001\002\000\052" +
    "\006\uffef\030\uffef\036\uffef\037\uffef\061\uffef\062\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\072\uffef\076\uffef\100\uffef" +
    "\106\uffef\110\uffef\114\uffef\122\uffef\130\uffef\131\uffef\132" +
    "\uffef\001\002\000\052\006\042\030\223\036\041\037\043" +
    "\061\033\062\137\064\040\065\034\066\044\067\030\072" +
    "\151\076\132\100\145\106\154\110\142\114\136\122\141" +
    "\130\133\131\131\132\144\001\002\000\060\006\uffd2\030" +
    "\uffd2\036\uffd2\037\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\072\uffd2\073\uffd2\076\uffd2\077\uffd2\100" +
    "\uffd2\102\224\106\uffd2\110\uffd2\114\uffd2\122\uffd2\130\uffd2" +
    "\131\uffd2\132\uffd2\001\002\000\006\027\226\110\227\001" +
    "\002\000\056\006\uffdb\030\uffdb\036\uffdb\037\uffdb\061\uffdb" +
    "\062\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\072\uffdb\073" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\106\uffdb\110\uffdb\114\uffdb" +
    "\122\uffdb\130\uffdb\131\uffdb\132\uffdb\001\002\000\052\006" +
    "\uffef\030\uffef\036\uffef\037\uffef\061\uffef\062\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\072\uffef\076\uffef\100\uffef\106" +
    "\uffef\110\uffef\114\uffef\122\uffef\130\uffef\131\uffef\132\uffef" +
    "\001\002\000\004\006\230\001\002\000\024\006\042\036" +
    "\041\037\043\061\033\062\137\064\040\065\034\066\044" +
    "\067\030\001\002\000\004\007\232\001\002\000\004\027" +
    "\233\001\002\000\052\006\uffef\030\uffef\036\uffef\037\uffef" +
    "\061\uffef\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\072" +
    "\uffef\076\uffef\100\uffef\106\uffef\110\uffef\114\uffef\122\uffef" +
    "\130\uffef\131\uffef\132\uffef\001\002\000\052\006\042\030" +
    "\235\036\041\037\043\061\033\062\137\064\040\065\034" +
    "\066\044\067\030\072\151\076\132\100\145\106\154\110" +
    "\142\114\136\122\141\130\133\131\131\132\144\001\002" +
    "\000\060\006\uffd2\030\uffd2\036\uffd2\037\uffd2\061\uffd2\062" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2\073\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\102\224\106\uffd2\110\uffd2\114" +
    "\uffd2\122\uffd2\130\uffd2\131\uffd2\132\uffd2\001\002\000\056" +
    "\006\uffd4\030\uffd4\036\uffd4\037\uffd4\061\uffd4\062\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\072\uffd4\073\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\106\uffd4\110\uffd4\114\uffd4\122\uffd4\130" +
    "\uffd4\131\uffd4\132\uffd4\001\002\000\052\006\042\030\240" +
    "\036\041\037\043\061\033\062\137\064\040\065\034\066" +
    "\044\067\030\072\151\076\132\100\145\106\154\110\142" +
    "\114\136\122\141\130\133\131\131\132\144\001\002\000" +
    "\056\006\uffd3\030\uffd3\036\uffd3\037\uffd3\061\uffd3\062\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\072\uffd3\073\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\106\uffd3\110\uffd3\114\uffd3\122\uffd3" +
    "\130\uffd3\131\uffd3\132\uffd3\001\002\000\024\006\246\036" +
    "\041\037\043\061\033\062\245\064\040\065\034\066\044" +
    "\067\030\001\002\000\020\004\uff8a\005\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\023\uff8a\001\002\000\016\004\252" +
    "\005\255\007\267\010\253\011\254\012\250\001\002\000" +
    "\020\004\uff89\005\uff89\007\uff89\010\uff89\011\uff89\012\uff89" +
    "\023\uff89\001\002\000\026\004\uff8d\005\uff8d\006\263\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\023\uff8d\036\100\037\101" +
    "\001\002\000\024\006\246\036\041\037\043\061\033\062" +
    "\245\064\040\065\034\066\044\067\030\001\002\000\016" +
    "\004\252\005\255\007\251\010\253\011\254\012\250\001" +
    "\002\000\024\006\246\036\041\037\043\061\033\062\245" +
    "\064\040\065\034\066\044\067\030\001\002\000\020\004" +
    "\uff8e\005\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\023\uff8e" +
    "\001\002\000\024\006\246\036\041\037\043\061\033\062" +
    "\245\064\040\065\034\066\044\067\030\001\002\000\024" +
    "\006\246\036\041\037\043\061\033\062\245\064\040\065" +
    "\034\066\044\067\030\001\002\000\024\006\246\036\041" +
    "\037\043\061\033\062\245\064\040\065\034\066\044\067" +
    "\030\001\002\000\024\006\246\036\041\037\043\061\033" +
    "\062\245\064\040\065\034\066\044\067\030\001\002\000" +
    "\020\004\uff91\005\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\023\uff91\001\002\000\020\004\uff90\005\uff90\007\uff90\010" +
    "\uff90\011\uff90\012\uff90\023\uff90\001\002\000\020\004\uff92" +
    "\005\255\007\uff92\010\uff92\011\254\012\250\023\uff92\001" +
    "\002\000\020\004\uff93\005\255\007\uff93\010\uff93\011\254" +
    "\012\250\023\uff93\001\002\000\020\004\uff8f\005\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\023\uff8f\001\002\000\026" +
    "\006\042\007\264\036\041\037\043\061\033\062\037\064" +
    "\040\065\034\066\044\067\030\001\002\000\020\004\uff8b" +
    "\005\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\023\uff8b\001" +
    "\002\000\006\007\266\015\106\001\002\000\020\004\uff8c" +
    "\005\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\023\uff8c\001" +
    "\002\000\004\027\270\001\002\000\010\030\uffc7\073\uffc7" +
    "\077\uffc7\001\002\000\010\030\276\073\275\077\272\001" +
    "\002\000\004\023\303\001\002\000\004\030\302\001\002" +
    "\000\010\030\uffc8\073\uffc8\077\uffc8\001\002\000\024\006" +
    "\246\036\041\037\043\061\033\062\245\064\040\065\034" +
    "\066\044\067\030\001\002\000\056\006\uffc9\030\uffc9\036" +
    "\uffc9\037\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\072\uffc9\073\uffc9\076\uffc9\077\uffc9\100\uffc9\106" +
    "\uffc9\110\uffc9\114\uffc9\122\uffc9\130\uffc9\131\uffc9\132\uffc9" +
    "\001\002\000\016\004\252\005\255\010\253\011\254\012" +
    "\250\023\300\001\002\000\056\006\uffef\030\uffef\036\uffef" +
    "\037\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\072\uffef\073\uffef\076\uffef\077\uffef\100\uffef\106\uffef" +
    "\110\uffef\114\uffef\122\uffef\130\uffef\131\uffef\132\uffef\001" +
    "\002\000\056\006\042\030\uffc6\036\041\037\043\061\033" +
    "\062\137\064\040\065\034\066\044\067\030\072\151\073" +
    "\uffc6\076\132\077\uffc6\100\145\106\154\110\142\114\136" +
    "\122\141\130\133\131\131\132\144\001\002\000\056\006" +
    "\uffca\030\uffca\036\uffca\037\uffca\061\uffca\062\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\072\uffca\073\uffca\076\uffca\077" +
    "\uffca\100\uffca\106\uffca\110\uffca\114\uffca\122\uffca\130\uffca" +
    "\131\uffca\132\uffca\001\002\000\052\006\uffef\030\uffef\036" +
    "\uffef\037\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066\uffef" +
    "\067\uffef\072\uffef\076\uffef\100\uffef\106\uffef\110\uffef\114" +
    "\uffef\122\uffef\130\uffef\131\uffef\132\uffef\001\002\000\052" +
    "\006\042\030\uffc5\036\041\037\043\061\033\062\137\064" +
    "\040\065\034\066\044\067\030\072\151\076\132\100\145" +
    "\106\154\110\142\114\136\122\141\130\133\131\131\132" +
    "\144\001\002\000\024\006\042\036\041\037\043\061\033" +
    "\062\037\064\040\065\034\066\044\067\030\001\002\000" +
    "\024\006\042\036\041\037\043\061\033\062\037\064\040" +
    "\065\034\066\044\067\030\001\002\000\024\006\042\036" +
    "\041\037\043\061\033\062\037\064\040\065\034\066\044" +
    "\067\030\001\002\000\024\006\042\036\041\037\043\061" +
    "\033\062\037\064\040\065\034\066\044\067\030\001\002" +
    "\000\024\006\042\036\041\037\043\061\033\062\137\064" +
    "\040\065\034\066\044\067\030\001\002\000\014\007\uff80" +
    "\013\053\024\uff80\034\052\035\050\001\002\000\006\007" +
    "\uff7f\024\uff7f\001\002\000\014\007\uff82\013\053\024\uff82" +
    "\034\052\035\050\001\002\000\014\007\uff84\013\053\024" +
    "\uff84\034\052\035\050\001\002\000\014\007\uff83\013\053" +
    "\024\uff83\034\052\035\050\001\002\000\014\007\uff81\013" +
    "\053\024\uff81\034\052\035\050\001\002\000\056\006\uffe2" +
    "\030\uffe2\036\uffe2\037\uffe2\061\uffe2\062\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\072\uffe2\073\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\106\uffe2\110\uffe2\114\uffe2\122\uffe2\130\uffe2\131" +
    "\uffe2\132\uffe2\001\002\000\004\024\324\001\002\000\004" +
    "\024\323\001\002\000\056\006\uffe3\030\uffe3\036\uffe3\037" +
    "\uffe3\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\072\uffe3\073\uffe3\076\uffe3\077\uffe3\100\uffe3\106\uffe3\110" +
    "\uffe3\114\uffe3\122\uffe3\130\uffe3\131\uffe3\132\uffe3\001\002" +
    "\000\056\006\uffe4\030\uffe4\036\uffe4\037\uffe4\061\uffe4\062" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\072\uffe4\073\uffe4" +
    "\076\uffe4\077\uffe4\100\uffe4\106\uffe4\110\uffe4\114\uffe4\122" +
    "\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002\000\024\006\042" +
    "\036\041\037\043\061\033\062\137\064\040\065\034\066" +
    "\044\067\030\001\002\000\004\007\327\001\002\000\004" +
    "\027\330\001\002\000\052\006\uffef\030\uffef\036\uffef\037" +
    "\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\072\uffef\076\uffef\100\uffef\106\uffef\110\uffef\114\uffef\122" +
    "\uffef\130\uffef\131\uffef\132\uffef\001\002\000\052\006\042" +
    "\030\332\036\041\037\043\061\033\062\137\064\040\065" +
    "\034\066\044\067\030\072\151\076\132\100\145\106\154" +
    "\110\142\114\136\122\141\130\133\131\131\132\144\001" +
    "\002\000\056\006\uffd1\030\uffd1\036\uffd1\037\uffd1\061\uffd1" +
    "\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\072\uffd1\073" +
    "\uffd1\076\uffd1\077\uffd1\100\uffd1\106\uffd1\110\uffd1\114\uffd1" +
    "\122\uffd1\130\uffd1\131\uffd1\132\uffd1\001\002\000\056\006" +
    "\uffe5\030\uffe5\036\uffe5\037\uffe5\061\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\072\uffe5\073\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\106\uffe5\110\uffe5\114\uffe5\122\uffe5\130\uffe5" +
    "\131\uffe5\132\uffe5\001\002\000\006\007\335\062\336\001" +
    "\002\000\004\024\341\001\002\000\004\007\337\001\002" +
    "\000\004\024\340\001\002\000\056\006\uffc4\030\uffc4\036" +
    "\uffc4\037\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\072\uffc4\073\uffc4\076\uffc4\077\uffc4\100\uffc4\106" +
    "\uffc4\110\uffc4\114\uffc4\122\uffc4\130\uffc4\131\uffc4\132\uffc4" +
    "\001\002\000\056\006\uffc3\030\uffc3\036\uffc3\037\uffc3\061" +
    "\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\072\uffc3" +
    "\073\uffc3\076\uffc3\077\uffc3\100\uffc3\106\uffc3\110\uffc3\114" +
    "\uffc3\122\uffc3\130\uffc3\131\uffc3\132\uffc3\001\002\000\066" +
    "\006\ufffd\030\ufffd\036\ufffd\037\ufffd\061\ufffd\062\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\072\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\100\ufffd\106\ufffd\110\ufffd\111\ufffd\112\ufffd\114" +
    "\ufffd\115\ufffd\122\ufffd\126\ufffd\130\ufffd\131\ufffd\132\ufffd" +
    "\001\002\000\052\006\042\030\344\036\041\037\043\061" +
    "\033\062\137\064\040\065\034\066\044\067\030\072\151" +
    "\076\132\100\145\106\154\110\142\114\136\122\141\130" +
    "\133\131\131\132\144\001\002\000\016\002\ufff7\074\ufff7" +
    "\111\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000\004\062" +
    "\346\001\002\000\006\007\ufff1\015\ufff1\001\002\000\064" +
    "\006\uffef\030\uffef\036\uffef\037\uffef\061\uffef\062\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\072\uffef\074\015\075\017" +
    "\076\uffef\100\uffef\106\uffef\110\uffef\111\005\112\006\114" +
    "\uffef\115\016\122\uffef\130\uffef\131\uffef\132\uffef\001\002" +
    "\000\064\006\uffef\030\uffef\036\uffef\037\uffef\061\uffef\062" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\072\uffef\074\015" +
    "\075\017\076\uffef\100\uffef\106\uffef\110\uffef\111\005\112" +
    "\006\114\uffef\115\016\122\uffef\130\uffef\131\uffef\132\uffef" +
    "\001\002\000\052\006\042\030\352\036\041\037\043\061" +
    "\033\062\137\064\040\065\034\066\044\067\030\072\151" +
    "\076\132\100\145\106\154\110\142\114\136\122\141\130" +
    "\133\131\131\132\144\001\002\000\016\002\ufff4\074\ufff4" +
    "\111\ufff4\112\ufff4\115\ufff4\126\ufff4\001\002\000\052\006" +
    "\042\030\354\036\041\037\043\061\033\062\137\064\040" +
    "\065\034\066\044\067\030\072\151\076\132\100\145\106" +
    "\154\110\142\114\136\122\141\130\133\131\131\132\144" +
    "\001\002\000\016\002\ufff8\074\ufff8\111\ufff8\112\ufff8\115" +
    "\ufff8\126\ufff8\001\002\000\006\007\ufff2\015\ufff2\001\002" +
    "\000\004\002\001\001\002\000\012\006\360\015\uffdc\021" +
    "\111\024\uffdc\001\002\000\014\007\361\074\015\111\005" +
    "\112\006\115\016\001\002\000\004\027\372\001\002\000" +
    "\006\007\363\015\121\001\002\000\004\027\364\001\002" +
    "\000\064\006\uffef\030\uffef\036\uffef\037\uffef\061\uffef\062" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\072\uffef\074\015" +
    "\075\017\076\uffef\100\uffef\106\uffef\110\uffef\111\005\112" +
    "\006\114\uffef\115\016\122\uffef\130\uffef\131\uffef\132\uffef" +
    "\001\002\000\064\006\uffef\030\uffef\036\uffef\037\uffef\061" +
    "\uffef\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\072\uffef" +
    "\074\015\075\017\076\uffef\100\uffef\106\uffef\110\uffef\111" +
    "\005\112\006\114\uffef\115\016\122\uffef\130\uffef\131\uffef" +
    "\132\uffef\001\002\000\052\006\042\030\367\036\041\037" +
    "\043\061\033\062\137\064\040\065\034\066\044\067\030" +
    "\072\151\076\132\100\145\106\154\110\142\114\136\122" +
    "\141\130\133\131\131\132\144\001\002\000\016\002\ufff6" +
    "\074\ufff6\111\ufff6\112\ufff6\115\ufff6\126\ufff6\001\002\000" +
    "\052\006\042\030\371\036\041\037\043\061\033\062\137" +
    "\064\040\065\034\066\044\067\030\072\151\076\132\100" +
    "\145\106\154\110\142\114\136\122\141\130\133\131\131" +
    "\132\144\001\002\000\016\002\ufffa\074\ufffa\111\ufffa\112" +
    "\ufffa\115\ufffa\126\ufffa\001\002\000\064\006\uffef\030\uffef" +
    "\036\uffef\037\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\072\uffef\074\015\075\017\076\uffef\100\uffef" +
    "\106\uffef\110\uffef\111\005\112\006\114\uffef\115\016\122" +
    "\uffef\130\uffef\131\uffef\132\uffef\001\002\000\064\006\uffef" +
    "\030\uffef\036\uffef\037\uffef\061\uffef\062\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\072\uffef\074\015\075\017\076\uffef" +
    "\100\uffef\106\uffef\110\uffef\111\005\112\006\114\uffef\115" +
    "\016\122\uffef\130\uffef\131\uffef\132\uffef\001\002\000\052" +
    "\006\042\030\375\036\041\037\043\061\033\062\137\064" +
    "\040\065\034\066\044\067\030\072\151\076\132\100\145" +
    "\106\154\110\142\114\136\122\141\130\133\131\131\132" +
    "\144\001\002\000\016\002\ufff5\074\ufff5\111\ufff5\112\ufff5" +
    "\115\ufff5\126\ufff5\001\002\000\052\006\042\030\377\036" +
    "\041\037\043\061\033\062\137\064\040\065\034\066\044" +
    "\067\030\072\151\076\132\100\145\106\154\110\142\114" +
    "\136\122\141\130\133\131\131\132\144\001\002\000\016" +
    "\002\ufff9\074\ufff9\111\ufff9\112\ufff9\115\ufff9\126\ufff9\001" +
    "\002\000\004\062\u0102\001\002\000\016\002\ufffb\074\ufffb" +
    "\111\ufffb\112\ufffb\115\ufffb\126\ufffb\001\002\000\004\006" +
    "\360\001\002\000\004\062\uffbb\001\002\000\004\062\uffbc" +
    "\001\002\000\004\062\uffbd\001\002\000\016\002\000\074" +
    "\015\111\005\112\006\115\016\126\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\341\014\010\024\013" +
    "\030\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\377\024\u0100\001\001\000\004" +
    "\023\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\017\001\001\000\004\023\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\030\033\035\034\031\035" +
    "\034\037\026\001\001\000\004\016\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\030\033\035\034\031\035\034\037\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\030\033\035\034\031\035\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\030\033\035\034\063\001\001\000\002\001" +
    "\001\000\010\022\030\033\035\034\075\001\001\000\010" +
    "\022\030\033\035\034\074\001\001\000\010\022\030\033" +
    "\035\034\073\001\001\000\010\022\030\033\035\034\072" +
    "\001\001\000\010\022\030\033\035\034\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\030\033\035\034\031" +
    "\035\034\037\102\040\104\001\001\000\004\016\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\030" +
    "\033\035\034\031\035\034\037\107\001\001\000\002\001" +
    "\001\000\004\016\050\001\001\000\014\022\030\033\035" +
    "\034\031\035\034\037\111\001\001\000\004\016\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\115" +
    "\025\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\344\001\001\000\002\001\001" +
    "\000\012\004\006\014\125\027\123\036\124\001\001\000" +
    "\010\004\341\014\125\036\342\001\001\000\040\003\133" +
    "\006\156\010\151\011\142\012\152\021\137\022\030\026" +
    "\146\032\145\033\035\034\031\035\034\037\155\041\147" +
    "\043\154\001\001\000\004\023\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\050\001\001\000\002\001\001\000\030\004" +
    "\161\005\162\012\163\013\160\014\125\022\030\032\145" +
    "\033\035\034\031\035\034\037\155\001\001\000\002\001" +
    "\001\000\022\005\170\012\163\022\030\032\145\033\035" +
    "\034\031\035\034\037\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\165\012\163\022\030\032\145" +
    "\033\035\034\031\035\034\037\155\001\001\000\002\001" +
    "\001\000\022\005\167\012\163\022\030\032\145\033\035" +
    "\034\031\035\034\037\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\172\012\163\022\030\032\145" +
    "\033\035\034\031\035\034\037\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\175\001\001\000\040" +
    "\003\133\006\156\010\151\011\142\012\152\021\137\022" +
    "\030\026\146\032\145\033\035\034\031\035\034\037\155" +
    "\041\147\043\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\202\001\001\000\040" +
    "\003\133\006\156\010\151\011\142\012\152\021\137\022" +
    "\030\026\146\032\145\033\035\034\031\035\034\037\155" +
    "\041\147\043\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\206\022\030\032\145\033\035\034\031" +
    "\035\034\037\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\212\022\030\032\145" +
    "\033\035\034\031\035\034\037\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\216" +
    "\022\030\032\145\033\035\034\031\035\034\037\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\221" +
    "\001\001\000\040\003\133\006\156\010\151\011\142\012" +
    "\152\021\137\022\030\026\146\032\145\033\035\034\031" +
    "\035\034\037\155\041\147\043\154\001\001\000\004\007" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\236\001\001\000\002\001\001\000\020\012\230\022" +
    "\030\032\145\033\035\034\031\035\034\037\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\233\001" +
    "\001\000\040\003\133\006\156\010\151\011\142\012\152" +
    "\021\137\022\030\026\146\032\145\033\035\034\031\035" +
    "\034\037\155\041\147\043\154\001\001\000\004\007\235" +
    "\001\001\000\002\001\001\000\040\003\133\006\156\010" +
    "\151\011\142\012\152\021\137\022\030\026\146\032\145" +
    "\033\035\034\031\035\034\037\155\041\147\043\154\001" +
    "\001\000\002\001\001\000\010\022\241\033\243\052\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\241\033\243\052\246" +
    "\001\001\000\002\001\001\000\010\022\241\033\243\052" +
    "\261\001\001\000\002\001\001\000\010\022\241\033\243" +
    "\052\260\001\001\000\010\022\241\033\243\052\257\001" +
    "\001\000\010\022\241\033\243\052\256\001\001\000\010" +
    "\022\241\033\243\052\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\030\033\035\034\031\035\034\037" +
    "\102\040\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\270\001" +
    "\001\000\006\046\272\047\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\241\033" +
    "\243\052\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\300\001\001\000\040\003\133\006\156\010" +
    "\151\011\142\012\152\021\137\022\030\026\146\032\145" +
    "\033\035\034\031\035\034\037\155\041\147\043\154\001" +
    "\001\000\002\001\001\000\004\036\303\001\001\000\040" +
    "\003\133\006\156\010\151\011\142\012\152\021\137\022" +
    "\030\026\146\032\145\033\035\034\031\035\034\037\155" +
    "\041\147\043\154\001\001\000\014\022\030\033\035\034" +
    "\031\035\034\037\316\001\001\000\014\022\030\033\035" +
    "\034\031\035\034\037\315\001\001\000\014\022\030\033" +
    "\035\034\031\035\034\037\314\001\001\000\014\022\030" +
    "\033\035\034\031\035\034\037\313\001\001\000\016\022" +
    "\030\032\312\033\035\034\031\035\034\037\311\001\001" +
    "\000\004\016\050\001\001\000\002\001\001\000\004\016" +
    "\050\001\001\000\004\016\050\001\001\000\004\016\050" +
    "\001\001\000\004\016\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\325\022\030\032\145\033\035\034" +
    "\031\035\034\037\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\330\001\001\000\040\003\133\006" +
    "\156\010\151\011\142\012\152\021\137\022\030\026\146" +
    "\032\145\033\035\034\031\035\034\037\155\041\147\043" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\133\006\156\010\151\011\142\012\152\021" +
    "\137\022\030\026\146\032\145\033\035\034\031\035\034" +
    "\037\155\041\147\043\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\006\014\125" +
    "\027\347\036\350\001\001\000\010\004\341\014\125\036" +
    "\352\001\001\000\040\003\133\006\156\010\151\011\142" +
    "\012\152\021\137\022\030\026\146\032\145\033\035\034" +
    "\031\035\034\037\155\041\147\043\154\001\001\000\002" +
    "\001\001\000\040\003\133\006\156\010\151\011\142\012" +
    "\152\021\137\022\030\026\146\032\145\033\035\034\031" +
    "\035\034\037\155\041\147\043\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\115\025\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\006\014\125" +
    "\027\364\036\365\001\001\000\010\004\341\014\125\036" +
    "\367\001\001\000\040\003\133\006\156\010\151\011\142" +
    "\012\152\021\137\022\030\026\146\032\145\033\035\034" +
    "\031\035\034\037\155\041\147\043\154\001\001\000\002" +
    "\001\001\000\040\003\133\006\156\010\151\011\142\012" +
    "\152\021\137\022\030\026\146\032\145\033\035\034\031" +
    "\035\034\037\155\041\147\043\154\001\001\000\002\001" +
    "\001\000\012\004\006\014\125\027\372\036\373\001\001" +
    "\000\010\004\341\014\125\036\375\001\001\000\040\003" +
    "\133\006\156\010\151\011\142\012\152\021\137\022\030" +
    "\026\146\032\145\033\035\034\031\035\034\037\155\041" +
    "\147\043\154\001\001\000\002\001\001\000\040\003\133" +
    "\006\156\010\151\011\142\012\152\021\137\022\030\026" +
    "\146\032\145\033\035\034\031\035\034\037\155\041\147" +
    "\043\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\377\024\u0100\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE_STMT ::= CASE EXPRESIONES_NUMERICAS COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // READ_WRITE ::= WRITE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
