
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\030\004\000\002\024\013\000\002\024\012\000" +
    "\002\024\012\000\002\024\013\000\002\024\012\000\002" +
    "\024\011\000\002\024\011\000\002\024\012\000\002\025" +
    "\004\000\002\025\006\000\002\036\003\000\002\036\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\026\004\000\002\026\004\000\002\026\005\000\002\026" +
    "\005\000\002\026\004\000\002\004\005\000\002\004\006" +
    "\000\002\023\005\000\002\023\007\000\002\023\005\000" +
    "\002\023\003\000\002\006\012\000\002\012\003\000\002" +
    "\012\003\000\002\037\005\000\002\037\003\000\002\035" +
    "\005\000\002\035\003\000\002\007\013\000\002\007\006" +
    "\000\002\007\002\000\002\010\011\000\002\041\013\000" +
    "\002\011\011\000\002\013\006\000\002\013\007\000\002" +
    "\005\003\000\002\005\002\000\002\021\007\000\002\021" +
    "\006\000\002\021\007\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\040\003\000\002" +
    "\040\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\003\000\002\034\006\000\002\034\005\000" +
    "\002\034\003\000\002\034\003\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\016\074\017\075\015\111\005\112\006\115" +
    "\016\126\013\001\002\000\016\074\017\075\015\111\005" +
    "\112\006\115\016\126\013\001\002\000\010\062\uffc9\112" +
    "\336\115\335\001\002\000\006\062\uffc7\111\334\001\002" +
    "\000\040\072\ufffe\074\ufffe\075\ufffe\076\ufffe\100\ufffe\106" +
    "\ufffe\110\ufffe\111\ufffe\112\ufffe\114\ufffe\115\ufffe\126\ufffe" +
    "\130\ufffe\131\ufffe\132\ufffe\001\002\000\016\002\uffff\074" +
    "\017\111\005\112\006\115\016\126\013\001\002\000\004" +
    "\062\310\001\002\000\004\002\307\001\002\000\004\062" +
    "\114\001\002\000\016\002\ufffc\074\ufffc\111\ufffc\112\ufffc" +
    "\115\ufffc\126\ufffc\001\002\000\012\074\017\111\005\112" +
    "\006\115\016\001\002\000\006\062\uffc6\111\020\001\002" +
    "\000\004\062\uffc8\001\002\000\004\062\uffc2\001\002\000" +
    "\004\062\022\001\002\000\010\015\uffde\021\112\024\uffde" +
    "\001\002\000\006\015\024\024\025\001\002\000\004\062" +
    "\026\001\002\000\064\006\uffe2\024\uffe2\036\uffe2\037\uffe2" +
    "\061\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\072" +
    "\uffe2\074\uffe2\075\uffe2\076\uffe2\100\uffe2\106\uffe2\110\uffe2" +
    "\111\uffe2\112\uffe2\114\uffe2\115\uffe2\126\uffe2\130\uffe2\131" +
    "\uffe2\132\uffe2\001\002\000\010\015\uffe1\021\027\024\uffe1" +
    "\001\002\000\024\006\042\036\044\037\043\061\034\062" +
    "\040\064\041\065\035\066\045\067\031\001\002\000\014" +
    "\013\055\015\uffe0\024\uffe0\034\054\035\052\001\002\000" +
    "\044\004\uffa9\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\015\uffa9\017\uffa9\020\uffa9\024\uffa9\034\uffa9\035" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000\044" +
    "\004\uff9d\005\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\015\uff9d\017\uff9d\020\uff9d\024\uff9d\034\uff9d\035\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\044\004" +
    "\070\005\073\007\uffd7\010\071\011\072\012\067\013\uffd7" +
    "\015\uffd7\017\uffd7\020\uffd7\024\uffd7\034\uffd7\035\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000\044\004\uffad" +
    "\005\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\015" +
    "\uffad\017\uffad\020\uffad\024\uffad\034\uffad\035\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\001\002\000\044\004\uffab\005" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\015\uffab" +
    "\017\uffab\020\uffab\024\uffab\034\uffab\035\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\001\002\000\032\007\uffd9\013\uffd9" +
    "\015\uffd9\017\057\020\063\024\uffd9\034\uffd9\035\uffd9\054" +
    "\062\055\060\056\061\057\064\001\002\000\044\004\uff9c" +
    "\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015" +
    "\uff9c\017\uff9c\020\uff9c\024\uff9c\034\uff9c\035\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\001\002\000\052\004\uffa0\005" +
    "\uffa0\006\103\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\015\uffa0\017\uffa0\020\uffa0\024\uffa0\034\uffa0\035\uffa0\036" +
    "\101\037\102\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001\002" +
    "\000\044\004\uffac\005\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\015\uffac\017\uffac\020\uffac\024\uffac\034\uffac" +
    "\035\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002\000" +
    "\024\006\042\036\044\037\043\061\034\062\040\064\041" +
    "\065\035\066\045\067\031\001\002\000\004\062\047\001" +
    "\002\000\004\062\046\001\002\000\044\004\uffaa\005\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\024\uffaa\034\uffaa\035\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\001\002\000\044\004\uff99\005\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\015\uff99\017\uff99" +
    "\020\uff99\024\uff99\034\uff99\035\uff99\054\uff99\055\uff99\056" +
    "\uff99\057\uff99\001\002\000\044\004\uff98\005\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\015\uff98\017\uff98\020" +
    "\uff98\024\uff98\034\uff98\035\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\001\002\000\012\007\051\013\055\034\054\035" +
    "\052\001\002\000\044\004\uffa1\005\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\015\uffa1\017\uffa1\020\uffa1\024" +
    "\uffa1\034\uffa1\035\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\001\002\000\024\006\uffbb\036\uffbb\037\uffbb\061\uffbb\062" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002\000\024" +
    "\006\042\036\044\037\043\061\034\062\040\064\041\065" +
    "\035\066\045\067\031\001\002\000\024\006\uffba\036\uffba" +
    "\037\uffba\061\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067" +
    "\uffba\001\002\000\024\006\uffb9\036\uffb9\037\uffb9\061\uffb9" +
    "\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\001\002\000" +
    "\032\007\uffda\013\uffda\015\uffda\017\057\020\063\024\uffda" +
    "\034\uffda\035\uffda\054\062\055\060\056\061\057\064\001" +
    "\002\000\024\006\uffbf\036\uffbf\037\uffbf\061\uffbf\062\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002\000\024\006" +
    "\uffc1\036\uffc1\037\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\001\002\000\024\006\uffbd\036\uffbd\037" +
    "\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd" +
    "\001\002\000\024\006\uffc0\036\uffc0\037\uffc0\061\uffc0\062" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000\024" +
    "\006\uffbe\036\uffbe\037\uffbe\061\uffbe\062\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\001\002\000\024\006\uffbc\036\uffbc" +
    "\037\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\001\002\000\024\006\042\036\044\037\043\061\034" +
    "\062\040\064\041\065\035\066\045\067\031\001\002\000" +
    "\044\004\070\005\073\007\uffd8\010\071\011\072\012\067" +
    "\013\uffd8\015\uffd8\017\uffd8\020\uffd8\024\uffd8\034\uffd8\035" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002\000\024" +
    "\006\042\036\044\037\043\061\034\062\040\064\041\065" +
    "\035\066\045\067\031\001\002\000\024\006\042\036\044" +
    "\037\043\061\034\062\040\064\041\065\035\066\045\067" +
    "\031\001\002\000\024\006\042\036\044\037\043\061\034" +
    "\062\040\064\041\065\035\066\045\067\031\001\002\000" +
    "\024\006\042\036\044\037\043\061\034\062\040\064\041" +
    "\065\035\066\045\067\031\001\002\000\024\006\042\036" +
    "\044\037\043\061\034\062\040\064\041\065\035\066\045" +
    "\067\031\001\002\000\044\004\uffa4\005\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\024\uffa4\034\uffa4\035\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\001\002\000\044\004\uffa3\005\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\024" +
    "\uffa3\034\uffa3\035\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\001\002\000\044\004\uffa5\005\073\007\uffa5\010\uffa5\011" +
    "\072\012\067\013\uffa5\015\uffa5\017\uffa5\020\uffa5\024\uffa5" +
    "\034\uffa5\035\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001" +
    "\002\000\044\004\uffa6\005\073\007\uffa6\010\uffa6\011\072" +
    "\012\067\013\uffa6\015\uffa6\017\uffa6\020\uffa6\024\uffa6\034" +
    "\uffa6\035\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001\002" +
    "\000\044\004\uffa2\005\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\015\uffa2\017\uffa2\020\uffa2\024\uffa2\034\uffa2" +
    "\035\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002\000" +
    "\044\004\uff9b\005\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\015\uff9b\017\uff9b\020\uff9b\024\uff9b\034\uff9b\035" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002\000\044" +
    "\004\uff9a\005\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\015\uff9a\017\uff9a\020\uff9a\024\uff9a\034\uff9a\035\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002\000\026\006" +
    "\042\007\105\036\044\037\043\061\034\062\040\064\041" +
    "\065\035\066\045\067\031\001\002\000\014\007\uffa8\013" +
    "\055\015\uffa8\034\054\035\052\001\002\000\044\004\uff9e" +
    "\005\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015" +
    "\uff9e\017\uff9e\020\uff9e\024\uff9e\034\uff9e\035\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\001\002\000\006\007\110\015" +
    "\107\001\002\000\024\006\042\036\044\037\043\061\034" +
    "\062\040\064\041\065\035\066\045\067\031\001\002\000" +
    "\044\004\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\015\uff9f\017\uff9f\020\uff9f\024\uff9f\034\uff9f\035" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000\014" +
    "\007\uffa7\013\055\015\uffa7\034\054\035\052\001\002\000" +
    "\024\006\042\036\044\037\043\061\034\062\040\064\041" +
    "\065\035\066\045\067\031\001\002\000\014\013\055\015" +
    "\uffdf\024\uffdf\034\054\035\052\001\002\000\004\006\115" +
    "\001\002\000\014\007\117\074\017\111\005\112\006\115" +
    "\016\001\002\000\004\062\306\001\002\000\004\027\300" +
    "\001\002\000\006\007\122\015\121\001\002\000\012\074" +
    "\017\111\005\112\006\115\016\001\002\000\004\027\123" +
    "\001\002\000\036\072\142\074\017\075\015\076\125\100" +
    "\136\106\145\110\133\111\005\112\006\114\130\115\016" +
    "\130\126\131\124\132\135\001\002\000\004\006\270\001" +
    "\002\000\004\024\267\001\002\000\004\006\261\001\002" +
    "\000\026\030\ufff0\072\ufff0\076\ufff0\100\ufff0\106\ufff0\110" +
    "\ufff0\114\ufff0\130\ufff0\131\ufff0\132\ufff0\001\002\000\020" +
    "\024\254\061\034\062\256\064\041\065\035\066\045\067" +
    "\031\001\002\000\026\030\uffea\072\uffea\076\uffea\100\uffea" +
    "\106\uffea\110\uffea\114\uffea\130\uffea\131\uffea\132\uffea\001" +
    "\002\000\026\030\253\072\142\076\125\100\136\106\145" +
    "\110\133\114\130\130\126\131\124\132\135\001\002\000" +
    "\004\006\230\001\002\000\026\030\uffeb\072\uffeb\076\uffeb" +
    "\100\uffeb\106\uffeb\110\uffeb\114\uffeb\130\uffeb\131\uffeb\132" +
    "\uffeb\001\002\000\004\006\224\001\002\000\004\027\214" +
    "\001\002\000\026\030\uffe9\072\uffe9\076\uffe9\100\uffe9\106" +
    "\uffe9\110\uffe9\114\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002" +
    "\000\036\072\142\074\017\075\015\076\125\100\136\106" +
    "\145\110\133\111\005\112\006\114\130\115\016\130\126" +
    "\131\124\132\135\001\002\000\026\030\uffed\072\uffed\076" +
    "\uffed\100\uffed\106\uffed\110\uffed\114\uffed\130\uffed\131\uffed" +
    "\132\uffed\001\002\000\004\024\210\001\002\000\026\030" +
    "\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec" +
    "\130\uffec\131\uffec\132\uffec\001\002\000\004\062\022\001" +
    "\002\000\004\006\147\001\002\000\026\030\uffee\072\uffee" +
    "\076\uffee\100\uffee\106\uffee\110\uffee\114\uffee\130\uffee\131" +
    "\uffee\132\uffee\001\002\000\040\006\042\024\uffcd\036\044" +
    "\037\043\061\034\062\152\064\041\065\035\066\045\067" +
    "\031\074\017\075\015\111\005\112\006\115\016\001\002" +
    "\000\004\007\201\001\002\000\026\006\042\024\uffcd\036" +
    "\044\037\043\061\034\062\152\064\041\065\035\066\045" +
    "\067\031\001\002\000\062\004\uffa0\005\uffa0\006\103\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\017\uffa0\020\uffa0" +
    "\021\167\024\uffa0\034\uffa0\035\uffa0\036\101\037\102\040" +
    "\165\041\163\042\166\043\164\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\001\002\000\006\007\uffdc\024\uffdc\001\002\000" +
    "\004\024\157\001\002\000\006\007\uffce\024\uffce\001\002" +
    "\000\014\007\uffdb\013\055\024\uffdb\034\054\035\052\001" +
    "\002\000\026\006\042\024\uffcd\036\044\037\043\061\034" +
    "\062\152\064\041\065\035\066\045\067\031\001\002\000" +
    "\004\024\161\001\002\000\026\006\042\007\uffcd\036\044" +
    "\037\043\061\034\062\152\064\041\065\035\066\045\067" +
    "\031\001\002\000\004\007\uffcf\001\002\000\024\006\042" +
    "\036\044\037\043\061\034\062\040\064\041\065\035\066" +
    "\045\067\031\001\002\000\024\006\042\036\044\037\043" +
    "\061\034\062\040\064\041\065\035\066\045\067\031\001" +
    "\002\000\024\006\042\036\044\037\043\061\034\062\040" +
    "\064\041\065\035\066\045\067\031\001\002\000\024\006" +
    "\042\036\044\037\043\061\034\062\040\064\041\065\035" +
    "\066\045\067\031\001\002\000\024\006\042\036\044\037" +
    "\043\061\034\062\152\064\041\065\035\066\045\067\031" +
    "\001\002\000\014\007\uff93\013\055\024\uff93\034\054\035" +
    "\052\001\002\000\006\007\uff92\024\uff92\001\002\000\014" +
    "\007\uff95\013\055\024\uff95\034\054\035\052\001\002\000" +
    "\014\007\uff97\013\055\024\uff97\034\054\035\052\001\002" +
    "\000\014\007\uff94\013\055\024\uff94\034\054\035\052\001" +
    "\002\000\014\007\uff96\013\055\024\uff96\034\054\035\052" +
    "\001\002\000\004\024\177\001\002\000\026\006\042\007" +
    "\uffcd\036\044\037\043\061\034\062\152\064\041\065\035" +
    "\066\045\067\031\001\002\000\004\007\uffd0\001\002\000" +
    "\004\027\202\001\002\000\024\072\142\076\125\100\136" +
    "\106\145\110\133\114\130\130\126\131\124\132\135\001" +
    "\002\000\026\030\205\072\142\076\125\100\136\106\145" +
    "\110\133\114\130\130\126\131\124\132\135\001\002\000" +
    "\026\030\uffef\072\uffef\076\uffef\100\uffef\106\uffef\110\uffef" +
    "\114\uffef\130\uffef\131\uffef\132\uffef\001\002\000\026\030" +
    "\uffd1\072\uffd1\076\uffd1\100\uffd1\106\uffd1\110\uffd1\114\uffd1" +
    "\130\uffd1\131\uffd1\132\uffd1\001\002\000\006\015\024\024" +
    "\207\001\002\000\064\006\uffe3\024\uffe3\036\uffe3\037\uffe3" +
    "\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\072" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\100\uffe3\106\uffe3\110\uffe3" +
    "\111\uffe3\112\uffe3\114\uffe3\115\uffe3\126\uffe3\130\uffe3\131" +
    "\uffe3\132\uffe3\001\002\000\026\030\uffe8\072\uffe8\076\uffe8" +
    "\100\uffe8\106\uffe8\110\uffe8\114\uffe8\130\uffe8\131\uffe8\132" +
    "\uffe8\001\002\000\040\072\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\100\ufffd\106\ufffd\110\ufffd\111\ufffd\112\ufffd\114\ufffd\115" +
    "\ufffd\126\ufffd\130\ufffd\131\ufffd\132\ufffd\001\002\000\026" +
    "\030\213\072\142\076\125\100\136\106\145\110\133\114" +
    "\130\130\126\131\124\132\135\001\002\000\016\002\ufff7" +
    "\074\ufff7\111\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000" +
    "\024\072\142\076\125\100\136\106\145\110\133\114\130" +
    "\130\126\131\124\132\135\001\002\000\026\030\216\072" +
    "\142\076\125\100\136\106\145\110\133\114\130\130\126" +
    "\131\124\132\135\001\002\000\004\130\217\001\002\000" +
    "\004\006\220\001\002\000\024\006\042\036\044\037\043" +
    "\061\034\062\152\064\041\065\035\066\045\067\031\001" +
    "\002\000\004\007\222\001\002\000\004\024\223\001\002" +
    "\000\026\030\uffd2\072\uffd2\076\uffd2\100\uffd2\106\uffd2\110" +
    "\uffd2\114\uffd2\130\uffd2\131\uffd2\132\uffd2\001\002\000\024" +
    "\006\042\036\044\037\043\061\034\062\152\064\041\065" +
    "\035\066\045\067\031\001\002\000\004\007\226\001\002" +
    "\000\004\024\227\001\002\000\026\030\uffca\072\uffca\076" +
    "\uffca\100\uffca\106\uffca\110\uffca\114\uffca\130\uffca\131\uffca" +
    "\132\uffca\001\002\000\024\006\042\036\044\037\043\061" +
    "\034\062\152\064\041\065\035\066\045\067\031\001\002" +
    "\000\004\007\232\001\002\000\004\027\233\001\002\000" +
    "\024\072\142\076\125\100\136\106\145\110\133\114\130" +
    "\130\126\131\124\132\135\001\002\000\026\030\235\072" +
    "\142\076\125\100\136\106\145\110\133\114\130\130\126" +
    "\131\124\132\135\001\002\000\030\030\uffd4\072\uffd4\076" +
    "\uffd4\100\uffd4\102\236\106\uffd4\110\uffd4\114\uffd4\130\uffd4" +
    "\131\uffd4\132\uffd4\001\002\000\006\027\240\110\241\001" +
    "\002\000\026\030\uffdd\072\uffdd\076\uffdd\100\uffdd\106\uffdd" +
    "\110\uffdd\114\uffdd\130\uffdd\131\uffdd\132\uffdd\001\002\000" +
    "\024\072\142\076\125\100\136\106\145\110\133\114\130" +
    "\130\126\131\124\132\135\001\002\000\004\006\242\001" +
    "\002\000\024\006\042\036\044\037\043\061\034\062\152" +
    "\064\041\065\035\066\045\067\031\001\002\000\004\007" +
    "\244\001\002\000\004\027\245\001\002\000\024\072\142" +
    "\076\125\100\136\106\145\110\133\114\130\130\126\131" +
    "\124\132\135\001\002\000\026\030\247\072\142\076\125" +
    "\100\136\106\145\110\133\114\130\130\126\131\124\132" +
    "\135\001\002\000\030\030\uffd4\072\uffd4\076\uffd4\100\uffd4" +
    "\102\236\106\uffd4\110\uffd4\114\uffd4\130\uffd4\131\uffd4\132" +
    "\uffd4\001\002\000\026\030\uffd6\072\uffd6\076\uffd6\100\uffd6" +
    "\106\uffd6\110\uffd6\114\uffd6\130\uffd6\131\uffd6\132\uffd6\001" +
    "\002\000\026\030\252\072\142\076\125\100\136\106\145" +
    "\110\133\114\130\130\126\131\124\132\135\001\002\000" +
    "\026\030\uffd5\072\uffd5\076\uffd5\100\uffd5\106\uffd5\110\uffd5" +
    "\114\uffd5\130\uffd5\131\uffd5\132\uffd5\001\002\000\016\002" +
    "\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001\002" +
    "\000\026\030\uffe4\072\uffe4\076\uffe4\100\uffe4\106\uffe4\110" +
    "\uffe4\114\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002\000\004" +
    "\024\260\001\002\000\004\024\257\001\002\000\026\030" +
    "\uffe5\072\uffe5\076\uffe5\100\uffe5\106\uffe5\110\uffe5\114\uffe5" +
    "\130\uffe5\131\uffe5\132\uffe5\001\002\000\026\030\uffe6\072" +
    "\uffe6\076\uffe6\100\uffe6\106\uffe6\110\uffe6\114\uffe6\130\uffe6" +
    "\131\uffe6\132\uffe6\001\002\000\024\006\042\036\044\037" +
    "\043\061\034\062\152\064\041\065\035\066\045\067\031" +
    "\001\002\000\004\007\263\001\002\000\004\027\264\001" +
    "\002\000\024\072\142\076\125\100\136\106\145\110\133" +
    "\114\130\130\126\131\124\132\135\001\002\000\026\030" +
    "\266\072\142\076\125\100\136\106\145\110\133\114\130" +
    "\130\126\131\124\132\135\001\002\000\026\030\uffd3\072" +
    "\uffd3\076\uffd3\100\uffd3\106\uffd3\110\uffd3\114\uffd3\130\uffd3" +
    "\131\uffd3\132\uffd3\001\002\000\026\030\uffe7\072\uffe7\076" +
    "\uffe7\100\uffe7\106\uffe7\110\uffe7\114\uffe7\130\uffe7\131\uffe7" +
    "\132\uffe7\001\002\000\006\007\271\062\272\001\002\000" +
    "\004\024\275\001\002\000\004\007\273\001\002\000\004" +
    "\024\274\001\002\000\026\030\uffcc\072\uffcc\076\uffcc\100" +
    "\uffcc\106\uffcc\110\uffcc\114\uffcc\130\uffcc\131\uffcc\132\uffcc" +
    "\001\002\000\026\030\uffcb\072\uffcb\076\uffcb\100\uffcb\106" +
    "\uffcb\110\uffcb\114\uffcb\130\uffcb\131\uffcb\132\uffcb\001\002" +
    "\000\004\062\277\001\002\000\006\007\ufff1\015\ufff1\001" +
    "\002\000\036\072\142\074\017\075\015\076\125\100\136" +
    "\106\145\110\133\111\005\112\006\114\130\115\016\130" +
    "\126\131\124\132\135\001\002\000\026\030\305\072\142" +
    "\076\125\100\136\106\145\110\133\114\130\130\126\131" +
    "\124\132\135\001\002\000\036\072\142\074\017\075\015" +
    "\076\125\100\136\106\145\110\133\111\005\112\006\114" +
    "\130\115\016\130\126\131\124\132\135\001\002\000\026" +
    "\030\304\072\142\076\125\100\136\106\145\110\133\114" +
    "\130\130\126\131\124\132\135\001\002\000\016\002\ufff8" +
    "\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126\ufff8\001\002\000" +
    "\016\002\ufff4\074\ufff4\111\ufff4\112\ufff4\115\ufff4\126\ufff4" +
    "\001\002\000\006\007\ufff2\015\ufff2\001\002\000\004\002" +
    "\001\001\002\000\012\006\311\015\uffde\021\112\024\uffde" +
    "\001\002\000\014\007\312\074\017\111\005\112\006\115" +
    "\016\001\002\000\004\027\323\001\002\000\006\007\314" +
    "\015\121\001\002\000\004\027\315\001\002\000\036\072" +
    "\142\074\017\075\015\076\125\100\136\106\145\110\133" +
    "\111\005\112\006\114\130\115\016\130\126\131\124\132" +
    "\135\001\002\000\026\030\322\072\142\076\125\100\136" +
    "\106\145\110\133\114\130\130\126\131\124\132\135\001" +
    "\002\000\036\072\142\074\017\075\015\076\125\100\136" +
    "\106\145\110\133\111\005\112\006\114\130\115\016\130" +
    "\126\131\124\132\135\001\002\000\026\030\321\072\142" +
    "\076\125\100\136\106\145\110\133\114\130\130\126\131" +
    "\124\132\135\001\002\000\016\002\ufffa\074\ufffa\111\ufffa" +
    "\112\ufffa\115\ufffa\126\ufffa\001\002\000\016\002\ufff6\074" +
    "\ufff6\111\ufff6\112\ufff6\115\ufff6\126\ufff6\001\002\000\036" +
    "\072\142\074\017\075\015\076\125\100\136\106\145\110" +
    "\133\111\005\112\006\114\130\115\016\130\126\131\124" +
    "\132\135\001\002\000\026\030\330\072\142\076\125\100" +
    "\136\106\145\110\133\114\130\130\126\131\124\132\135" +
    "\001\002\000\036\072\142\074\017\075\015\076\125\100" +
    "\136\106\145\110\133\111\005\112\006\114\130\115\016" +
    "\130\126\131\124\132\135\001\002\000\026\030\327\072" +
    "\142\076\125\100\136\106\145\110\133\114\130\130\126" +
    "\131\124\132\135\001\002\000\016\002\ufff9\074\ufff9\111" +
    "\ufff9\112\ufff9\115\ufff9\126\ufff9\001\002\000\016\002\ufff5" +
    "\074\ufff5\111\ufff5\112\ufff5\115\ufff5\126\ufff5\001\002\000" +
    "\004\062\333\001\002\000\016\002\ufffb\074\ufffb\111\ufffb" +
    "\112\ufffb\115\ufffb\126\ufffb\001\002\000\004\006\311\001" +
    "\002\000\004\062\uffc3\001\002\000\004\062\uffc4\001\002" +
    "\000\004\062\uffc5\001\002\000\016\002\000\074\017\111" +
    "\005\112\006\115\016\126\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\210\014\010\024\013" +
    "\030\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\330\024\331\001\001\000\004" +
    "\023\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\031\033" +
    "\036\034\032\035\035\037\027\001\001\000\004\016\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\031\033\036\034\032\035\035\037\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\031\033\036\034\032\035\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\031\033" +
    "\036\034\065\001\001\000\002\001\001\000\010\022\031" +
    "\033\036\034\077\001\001\000\010\022\031\033\036\034" +
    "\076\001\001\000\010\022\031\033\036\034\075\001\001" +
    "\000\010\022\031\033\036\034\074\001\001\000\010\022" +
    "\031\033\036\034\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\031" +
    "\033\036\034\032\035\035\037\103\040\105\001\001\000" +
    "\004\016\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\031\033\036\034\032\035\035\037\110\001" +
    "\001\000\002\001\001\000\004\016\052\001\001\000\014" +
    "\022\031\033\036\034\032\035\035\037\112\001\001\000" +
    "\004\016\052\001\001\000\002\001\001\000\006\014\115" +
    "\025\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\275\001\001\000\002\001\001" +
    "\000\030\003\126\004\006\006\145\010\142\011\133\014" +
    "\143\021\130\026\136\027\137\036\131\041\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\254\001\001\000\002\001\001" +
    "\000\020\003\203\006\145\010\142\011\133\021\130\026" +
    "\136\041\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\126\004\210\006\145\010\142\011\133\014\143" +
    "\021\130\026\136\036\211\041\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\150\005\153\012\154\013\147\014\143\022\031\032\152" +
    "\033\036\034\032\035\035\037\155\001\001\000\002\001" +
    "\001\000\022\005\175\012\154\022\031\032\152\033\036" +
    "\034\032\035\035\037\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\022\005\157\012\154\022\031\032" +
    "\152\033\036\034\032\035\035\037\155\001\001\000\002" +
    "\001\001\000\022\005\161\012\154\022\031\032\152\033" +
    "\036\034\032\035\035\037\155\001\001\000\002\001\001" +
    "\000\014\022\031\033\036\034\032\035\035\037\174\001" +
    "\001\000\014\022\031\033\036\034\032\035\035\037\173" +
    "\001\001\000\014\022\031\033\036\034\032\035\035\037" +
    "\172\001\001\000\014\022\031\033\036\034\032\035\035" +
    "\037\171\001\001\000\016\022\031\032\170\033\036\034" +
    "\032\035\035\037\167\001\001\000\004\016\052\001\001" +
    "\000\002\001\001\000\004\016\052\001\001\000\004\016" +
    "\052\001\001\000\004\016\052\001\001\000\004\016\052" +
    "\001\001\000\002\001\001\000\022\005\177\012\154\022" +
    "\031\032\152\033\036\034\032\035\035\037\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\126\006" +
    "\145\010\142\011\133\021\130\026\136\036\202\041\140" +
    "\001\001\000\020\003\203\006\145\010\142\011\133\021" +
    "\130\026\136\041\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\203\006\145\010\142" +
    "\011\133\021\130\026\136\041\140\001\001\000\002\001" +
    "\001\000\022\003\126\006\145\010\142\011\133\021\130" +
    "\026\136\036\214\041\140\001\001\000\020\003\203\006" +
    "\145\010\142\011\133\021\130\026\136\041\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\220\022" +
    "\031\032\152\033\036\034\032\035\035\037\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\224\022\031\032\152\033\036\034\032\035\035" +
    "\037\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\230\022\031\032\152\033\036" +
    "\034\032\035\035\037\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\126\006\145\010\142\011\133" +
    "\021\130\026\136\036\233\041\140\001\001\000\020\003" +
    "\203\006\145\010\142\011\133\021\130\026\136\041\140" +
    "\001\001\000\004\007\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\126\006\145\010\142\011\133" +
    "\021\130\026\136\036\250\041\140\001\001\000\002\001" +
    "\001\000\020\012\242\022\031\032\152\033\036\034\032" +
    "\035\035\037\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\126\006\145\010\142\011\133\021\130" +
    "\026\136\036\245\041\140\001\001\000\020\003\203\006" +
    "\145\010\142\011\133\021\130\026\136\041\140\001\001" +
    "\000\004\007\247\001\001\000\002\001\001\000\020\003" +
    "\203\006\145\010\142\011\133\021\130\026\136\041\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\261\022\031\032\152\033" +
    "\036\034\032\035\035\037\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\126\006\145\010\142\011" +
    "\133\021\130\026\136\036\264\041\140\001\001\000\020" +
    "\003\203\006\145\010\142\011\133\021\130\026\136\041" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\126\004\006\006\145\010" +
    "\142\011\133\014\143\021\130\026\136\027\301\036\300" +
    "\041\140\001\001\000\020\003\203\006\145\010\142\011" +
    "\133\021\130\026\136\041\140\001\001\000\026\003\126" +
    "\004\210\006\145\010\142\011\133\014\143\021\130\026" +
    "\136\036\302\041\140\001\001\000\020\003\203\006\145" +
    "\010\142\011\133\021\130\026\136\041\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\115\025\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\126\004\006\006\145\010\142\011\133\014" +
    "\143\021\130\026\136\027\316\036\315\041\140\001\001" +
    "\000\020\003\203\006\145\010\142\011\133\021\130\026" +
    "\136\041\140\001\001\000\026\003\126\004\210\006\145" +
    "\010\142\011\133\014\143\021\130\026\136\036\317\041" +
    "\140\001\001\000\020\003\203\006\145\010\142\011\133" +
    "\021\130\026\136\041\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\126\004\006\006\145\010\142" +
    "\011\133\014\143\021\130\026\136\027\324\036\323\041" +
    "\140\001\001\000\020\003\203\006\145\010\142\011\133" +
    "\021\130\026\136\041\140\001\001\000\026\003\126\004" +
    "\210\006\145\010\142\011\133\014\143\021\130\026\136" +
    "\036\325\041\140\001\001\000\020\003\203\006\145\010" +
    "\142\011\133\021\130\026\136\041\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\330\024\331\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // READ_WRITE ::= WRITE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
