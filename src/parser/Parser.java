
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\027\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\004\000" +
    "\002\024\013\000\002\024\012\000\002\024\012\000\002" +
    "\024\013\000\002\024\012\000\002\024\011\000\002\024" +
    "\011\000\002\024\012\000\002\025\004\000\002\025\006" +
    "\000\002\036\004\000\002\036\002\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\003\000\002\026\003\000\002\026\004\000\002" +
    "\026\004\000\002\004\005\000\002\004\006\000\002\004" +
    "\005\000\002\023\005\000\002\023\007\000\002\023\005" +
    "\000\002\023\003\000\002\006\012\000\002\006\011\000" +
    "\002\006\012\000\002\006\011\000\002\006\011\000\002" +
    "\006\010\000\002\006\011\000\002\006\010\000\002\006" +
    "\010\000\002\006\007\000\002\006\010\000\002\006\007" +
    "\000\002\006\012\000\002\006\011\000\002\006\012\000" +
    "\002\006\011\000\002\006\010\000\002\012\003\000\002" +
    "\012\003\000\002\037\005\000\002\037\003\000\002\035" +
    "\005\000\002\035\003\000\002\007\013\000\002\007\012" +
    "\000\002\007\006\000\002\010\011\000\002\041\013\000" +
    "\002\011\011\000\002\013\006\000\002\013\007\000\002" +
    "\005\002\000\002\005\003\000\002\005\003\000\002\043" +
    "\012\000\002\043\011\000\002\044\004\000\002\044\002" +
    "\000\002\046\006\000\002\045\005\000\002\021\007\000" +
    "\002\021\006\000\002\021\007\000\002\051\003\000\002" +
    "\051\005\000\002\051\005\000\002\051\004\000\002\051" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\040\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\004\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\034\006\000\002\034\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\003\000\002\050\006\000\002\050\005" +
    "\000\002\050\003\000\002\050\003\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\020\002\ufffd\074\015\075\017\111\005\112" +
    "\006\115\016\126\013\001\002\000\020\002\ufffe\074\015" +
    "\075\017\111\005\112\006\115\016\126\013\001\002\000" +
    "\010\062\uffa3\112\u0168\115\u0167\001\002\000\006\062\uffa1" +
    "\111\u0166\001\002\000\104\002\ufffc\003\ufffc\006\ufffc\021" +
    "\ufffc\030\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\100\ufffc\106\ufffc" +
    "\110\ufffc\111\ufffc\112\ufffc\114\ufffc\115\ufffc\122\ufffc\126" +
    "\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002\000\016\002\uffff" +
    "\074\015\111\005\112\006\115\016\126\u0163\001\002\000" +
    "\004\062\u0150\001\002\000\004\002\u014f\001\002\000\004" +
    "\062\142\001\002\000\016\002\ufffa\074\ufffa\111\ufffa\112" +
    "\ufffa\115\ufffa\126\ufffa\001\002\000\004\062\uffa2\001\002" +
    "\000\006\062\uffa0\111\141\001\002\000\012\074\015\111" +
    "\005\112\006\115\016\001\002\000\004\062\021\001\002" +
    "\000\010\015\uffd4\021\137\024\uffd4\001\002\000\006\015" +
    "\023\024\024\001\002\000\004\062\025\001\002\000\106" +
    "\002\uffd9\003\uffd9\006\uffd9\021\uffd9\024\uffd9\030\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\061\uffd9" +
    "\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\072\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\100\uffd9\106\uffd9\110\uffd9\111\uffd9" +
    "\112\uffd9\114\uffd9\115\uffd9\122\uffd9\126\uffd9\130\uffd9\131" +
    "\uffd9\132\uffd9\001\002\000\010\015\uffd7\021\026\024\uffd7" +
    "\001\002\000\026\003\036\006\042\036\044\037\043\061" +
    "\033\062\040\064\041\065\035\066\045\067\030\001\002" +
    "\000\014\013\107\015\uffd6\024\uffd6\034\106\035\104\001" +
    "\002\000\140\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83" +
    "\010\uff83\011\uff83\012\uff83\013\uff83\015\uff83\017\uff83\020" +
    "\uff83\021\uff83\023\uff83\024\uff83\027\uff83\030\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\054\uff83\055\uff83\056\uff83\057\uff83\061\uff83\062\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\072\uff83\073\uff83\076" +
    "\uff83\077\uff83\100\uff83\106\uff83\110\uff83\114\uff83\122\uff83" +
    "\130\uff83\131\uff83\132\uff83\001\002\000\136\003\uff74\004" +
    "\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74" +
    "\013\uff74\015\uff74\017\uff74\020\uff74\021\uff74\024\uff74\027" +
    "\uff74\030\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\uff74\043\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\061\uff74\062\uff74\064\uff74\065\uff74\066\uff74\067\uff74" +
    "\072\uff74\073\uff74\076\uff74\077\uff74\100\uff74\106\uff74\110" +
    "\uff74\114\uff74\122\uff74\130\uff74\131\uff74\132\uff74\001\002" +
    "\000\136\003\uffbd\004\063\005\066\006\uffbd\007\uffbd\010" +
    "\064\011\065\012\062\013\uffbd\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\024\uffbd\027\uffbd\030\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\072\uffbd\073\uffbd\076\uffbd\077\uffbd" +
    "\100\uffbd\106\uffbd\110\uffbd\114\uffbd\122\uffbd\130\uffbd\131" +
    "\uffbd\132\uffbd\001\002\000\140\003\uff87\004\uff87\005\uff87" +
    "\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015" +
    "\uff87\017\uff87\020\uff87\021\uff87\023\uff87\024\uff87\027\uff87" +
    "\030\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\054\uff87\055\uff87\056\uff87\057\uff87" +
    "\061\uff87\062\uff87\064\uff87\065\uff87\066\uff87\067\uff87\072" +
    "\uff87\073\uff87\076\uff87\077\uff87\100\uff87\106\uff87\110\uff87" +
    "\114\uff87\122\uff87\130\uff87\131\uff87\132\uff87\001\002\000" +
    "\124\003\uffbf\006\uffbf\007\uffbf\013\uffbf\015\uffbf\017\112" +
    "\020\115\021\uffbf\024\uffbf\027\uffbf\030\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\054\114\055\111\056\113\057\116\061\uffbf\062\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\072\uffbf\073\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\106\uffbf\110\uffbf\114\uffbf\122\uffbf\130" +
    "\uffbf\131\uffbf\132\uffbf\001\002\000\140\003\uff85\004\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\015\uff85\017\uff85\020\uff85\021\uff85\023\uff85\024\uff85" +
    "\027\uff85\030\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\061\uff85\062\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\uff85\072\uff85\073\uff85\076\uff85\077\uff85\100\uff85\106\uff85" +
    "\110\uff85\114\uff85\122\uff85\130\uff85\131\uff85\132\uff85\001" +
    "\002\000\012\004\055\005\060\010\056\011\057\001\002" +
    "\000\136\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\011\uff73\012\uff73\013\uff73\015\uff73\017\uff73\020\uff73" +
    "\021\uff73\024\uff73\027\uff73\030\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\054\uff73" +
    "\055\uff73\056\uff73\057\uff73\061\uff73\062\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\072\uff73\073\uff73\076\uff73\077\uff73" +
    "\100\uff73\106\uff73\110\uff73\114\uff73\122\uff73\130\uff73\131" +
    "\uff73\132\uff73\001\002\000\136\003\uff77\004\uff77\005\uff77" +
    "\006\123\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\015" +
    "\uff77\017\uff77\020\uff77\021\uff77\024\uff77\027\uff77\030\uff77" +
    "\034\uff77\035\uff77\036\121\037\122\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\054\uff77\055\uff77\056\uff77\057\uff77\061\uff77" +
    "\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77\072\uff77\073" +
    "\uff77\076\uff77\077\uff77\100\uff77\106\uff77\110\uff77\114\uff77" +
    "\122\uff77\130\uff77\131\uff77\132\uff77\001\002\000\140\003" +
    "\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\015\uff86\017\uff86\020\uff86\021\uff86\023" +
    "\uff86\024\uff86\027\uff86\030\uff86\034\uff86\035\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\061\uff86\062\uff86\064\uff86\065\uff86" +
    "\066\uff86\067\uff86\072\uff86\073\uff86\076\uff86\077\uff86\100" +
    "\uff86\106\uff86\110\uff86\114\uff86\122\uff86\130\uff86\131\uff86" +
    "\132\uff86\001\002\000\026\003\053\006\042\036\044\037" +
    "\043\061\033\062\040\064\041\065\035\066\045\067\030" +
    "\001\002\000\006\003\050\062\051\001\002\000\006\003" +
    "\046\062\047\001\002\000\140\003\uff84\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015" +
    "\uff84\017\uff84\020\uff84\021\uff84\023\uff84\024\uff84\027\uff84" +
    "\030\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041" +
    "\uff84\042\uff84\043\uff84\054\uff84\055\uff84\056\uff84\057\uff84" +
    "\061\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067\uff84\072" +
    "\uff84\073\uff84\076\uff84\077\uff84\100\uff84\106\uff84\110\uff84" +
    "\114\uff84\122\uff84\130\uff84\131\uff84\132\uff84\001\002\000" +
    "\140\003\uff4d\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d" +
    "\011\uff4d\012\uff4d\013\uff4d\015\uff4d\017\uff4d\020\uff4d\021" +
    "\uff4d\023\uff4d\024\uff4d\027\uff4d\030\uff4d\034\uff4d\035\uff4d" +
    "\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\054" +
    "\uff4d\055\uff4d\056\uff4d\057\uff4d\061\uff4d\062\uff4d\064\uff4d" +
    "\065\uff4d\066\uff4d\067\uff4d\072\uff4d\073\uff4d\076\uff4d\077" +
    "\uff4d\100\uff4d\106\uff4d\110\uff4d\114\uff4d\122\uff4d\130\uff4d" +
    "\131\uff4d\132\uff4d\001\002\000\140\003\uff50\004\uff50\005" +
    "\uff50\006\uff50\007\uff50\010\uff50\011\uff50\012\uff50\013\uff50" +
    "\015\uff50\017\uff50\020\uff50\021\uff50\023\uff50\024\uff50\027" +
    "\uff50\030\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50" +
    "\041\uff50\042\uff50\043\uff50\054\uff50\055\uff50\056\uff50\057" +
    "\uff50\061\uff50\062\uff50\064\uff50\065\uff50\066\uff50\067\uff50" +
    "\072\uff50\073\uff50\076\uff50\077\uff50\100\uff50\106\uff50\110" +
    "\uff50\114\uff50\122\uff50\130\uff50\131\uff50\132\uff50\001\002" +
    "\000\140\003\uff4e\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\015\uff4e\017\uff4e\020\uff4e" +
    "\021\uff4e\023\uff4e\024\uff4e\027\uff4e\030\uff4e\034\uff4e\035" +
    "\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e" +
    "\054\uff4e\055\uff4e\056\uff4e\057\uff4e\061\uff4e\062\uff4e\064" +
    "\uff4e\065\uff4e\066\uff4e\067\uff4e\072\uff4e\073\uff4e\076\uff4e" +
    "\077\uff4e\100\uff4e\106\uff4e\110\uff4e\114\uff4e\122\uff4e\130" +
    "\uff4e\131\uff4e\132\uff4e\001\002\000\140\003\uff4f\004\uff4f" +
    "\005\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f\013" +
    "\uff4f\015\uff4f\017\uff4f\020\uff4f\021\uff4f\023\uff4f\024\uff4f" +
    "\027\uff4f\030\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040" +
    "\uff4f\041\uff4f\042\uff4f\043\uff4f\054\uff4f\055\uff4f\056\uff4f" +
    "\057\uff4f\061\uff4f\062\uff4f\064\uff4f\065\uff4f\066\uff4f\067" +
    "\uff4f\072\uff4f\073\uff4f\076\uff4f\077\uff4f\100\uff4f\106\uff4f" +
    "\110\uff4f\114\uff4f\122\uff4f\130\uff4f\131\uff4f\132\uff4f\001" +
    "\002\000\012\007\103\013\107\034\106\035\104\001\002" +
    "\000\014\004\055\005\060\007\054\010\056\011\057\001" +
    "\002\000\136\003\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d" +
    "\010\uff6d\011\uff6d\012\uff6d\013\uff6d\015\uff6d\017\uff6d\020" +
    "\uff6d\021\uff6d\024\uff6d\027\uff6d\030\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\054" +
    "\uff6d\055\uff6d\056\uff6d\057\uff6d\061\uff6d\062\uff6d\064\uff6d" +
    "\065\uff6d\066\uff6d\067\uff6d\072\uff6d\073\uff6d\076\uff6d\077" +
    "\uff6d\100\uff6d\106\uff6d\110\uff6d\114\uff6d\122\uff6d\130\uff6d" +
    "\131\uff6d\132\uff6d\001\002\000\026\003\036\006\042\036" +
    "\044\037\043\061\033\062\040\064\041\065\035\066\045" +
    "\067\030\001\002\000\026\003\036\006\042\036\044\037" +
    "\043\061\033\062\040\064\041\065\035\066\045\067\030" +
    "\001\002\000\026\003\036\006\042\036\044\037\043\061" +
    "\033\062\040\064\041\065\035\066\045\067\030\001\002" +
    "\000\026\003\036\006\042\036\044\037\043\061\033\062" +
    "\040\064\041\065\035\066\045\067\030\001\002\000\136" +
    "\003\uff6c\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011" +
    "\uff6c\012\uff6c\013\uff6c\015\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\024\uff6c\027\uff6c\030\uff6c\034\uff6c\035\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\054\uff6c\055\uff6c" +
    "\056\uff6c\057\uff6c\061\uff6c\062\uff6c\064\uff6c\065\uff6c\066" +
    "\uff6c\067\uff6c\072\uff6c\073\uff6c\076\uff6c\077\uff6c\100\uff6c" +
    "\106\uff6c\110\uff6c\114\uff6c\122\uff6c\130\uff6c\131\uff6c\132" +
    "\uff6c\001\002\000\136\003\uff6e\004\uff6e\005\uff6e\006\042" +
    "\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\015\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\024\uff6e\027\uff6e\030\uff6e\034\uff6e" +
    "\035\uff6e\036\044\037\043\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\061\uff6e\062\uff6e" +
    "\064\uff6e\065\uff6e\066\uff6e\067\uff6e\072\uff6e\073\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\106\uff6e\110\uff6e\114\uff6e\122\uff6e" +
    "\130\uff6e\131\uff6e\132\uff6e\001\002\000\026\003\076\006" +
    "\042\036\044\037\043\061\033\062\040\064\041\065\035" +
    "\066\045\067\030\001\002\000\026\003\074\006\042\036" +
    "\044\037\043\061\033\062\040\064\041\065\035\066\045" +
    "\067\030\001\002\000\026\003\072\006\042\036\044\037" +
    "\043\061\033\062\040\064\041\065\035\066\045\067\030" +
    "\001\002\000\026\003\070\006\042\036\044\037\043\061" +
    "\033\062\040\064\041\065\035\066\045\067\030\001\002" +
    "\000\136\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\015\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\024\uff7b\027\uff7b\030\uff7b\034\uff7b\035\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\057\uff7b\061\uff7b\062\uff7b\064\uff7b\065" +
    "\uff7b\066\uff7b\067\uff7b\072\uff7b\073\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\106\uff7b\110\uff7b\114\uff7b\122\uff7b\130\uff7b\131" +
    "\uff7b\132\uff7b\001\002\000\136\003\uff70\004\055\005\060" +
    "\006\uff70\007\uff70\010\056\011\057\012\uff70\013\uff70\015" +
    "\uff70\017\uff70\020\uff70\021\uff70\024\uff70\027\uff70\030\uff70" +
    "\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\054\uff70\055\uff70\056\uff70\057\uff70\061\uff70" +
    "\062\uff70\064\uff70\065\uff70\066\uff70\067\uff70\072\uff70\073" +
    "\uff70\076\uff70\077\uff70\100\uff70\106\uff70\110\uff70\114\uff70" +
    "\122\uff70\130\uff70\131\uff70\132\uff70\001\002\000\136\003" +
    "\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\015\uff7a\017\uff7a\020\uff7a\021\uff7a\024" +
    "\uff7a\027\uff7a\030\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a" +
    "\040\uff7a\041\uff7a\042\uff7a\043\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\061\uff7a\062\uff7a\064\uff7a\065\uff7a\066\uff7a" +
    "\067\uff7a\072\uff7a\073\uff7a\076\uff7a\077\uff7a\100\uff7a\106" +
    "\uff7a\110\uff7a\114\uff7a\122\uff7a\130\uff7a\131\uff7a\132\uff7a" +
    "\001\002\000\136\003\uff6f\004\055\005\060\006\uff6f\007" +
    "\uff6f\010\056\011\057\012\uff6f\013\uff6f\015\uff6f\017\uff6f" +
    "\020\uff6f\021\uff6f\024\uff6f\027\uff6f\030\uff6f\034\uff6f\035" +
    "\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f" +
    "\054\uff6f\055\uff6f\056\uff6f\057\uff6f\061\uff6f\062\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\072\uff6f\073\uff6f\076\uff6f" +
    "\077\uff6f\100\uff6f\106\uff6f\110\uff6f\114\uff6f\122\uff6f\130" +
    "\uff6f\131\uff6f\132\uff6f\001\002\000\136\003\uff7c\004\uff7c" +
    "\005\066\006\uff7c\007\uff7c\010\uff7c\011\065\012\062\013" +
    "\uff7c\015\uff7c\017\uff7c\020\uff7c\021\uff7c\024\uff7c\027\uff7c" +
    "\030\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c" +
    "\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\072" +
    "\uff7c\073\uff7c\076\uff7c\077\uff7c\100\uff7c\106\uff7c\110\uff7c" +
    "\114\uff7c\122\uff7c\130\uff7c\131\uff7c\132\uff7c\001\002\000" +
    "\136\003\uff71\004\055\005\060\006\uff71\007\uff71\010\056" +
    "\011\057\012\uff71\013\uff71\015\uff71\017\uff71\020\uff71\021" +
    "\uff71\024\uff71\027\uff71\030\uff71\034\uff71\035\uff71\036\uff71" +
    "\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\054\uff71\055" +
    "\uff71\056\uff71\057\uff71\061\uff71\062\uff71\064\uff71\065\uff71" +
    "\066\uff71\067\uff71\072\uff71\073\uff71\076\uff71\077\uff71\100" +
    "\uff71\106\uff71\110\uff71\114\uff71\122\uff71\130\uff71\131\uff71" +
    "\132\uff71\001\002\000\136\003\uff7d\004\uff7d\005\066\006" +
    "\uff7d\007\uff7d\010\uff7d\011\065\012\062\013\uff7d\015\uff7d" +
    "\017\uff7d\020\uff7d\021\uff7d\024\uff7d\027\uff7d\030\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\061\uff7d\062" +
    "\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\072\uff7d\073\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\106\uff7d\110\uff7d\114\uff7d\122" +
    "\uff7d\130\uff7d\131\uff7d\132\uff7d\001\002\000\136\003\uff72" +
    "\004\055\005\060\006\uff72\007\uff72\010\056\011\057\012" +
    "\uff72\013\uff72\015\uff72\017\uff72\020\uff72\021\uff72\024\uff72" +
    "\027\uff72\030\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\054\uff72\055\uff72\056\uff72" +
    "\057\uff72\061\uff72\062\uff72\064\uff72\065\uff72\066\uff72\067" +
    "\uff72\072\uff72\073\uff72\076\uff72\077\uff72\100\uff72\106\uff72" +
    "\110\uff72\114\uff72\122\uff72\130\uff72\131\uff72\132\uff72\001" +
    "\002\000\136\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\015\uff79\017\uff79\020" +
    "\uff79\021\uff79\024\uff79\027\uff79\030\uff79\034\uff79\035\uff79" +
    "\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\054" +
    "\uff79\055\uff79\056\uff79\057\uff79\061\uff79\062\uff79\064\uff79" +
    "\065\uff79\066\uff79\067\uff79\072\uff79\073\uff79\076\uff79\077" +
    "\uff79\100\uff79\106\uff79\110\uff79\114\uff79\122\uff79\130\uff79" +
    "\131\uff79\132\uff79\001\002\000\136\003\uff6b\004\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\015\uff6b\017\uff6b\020\uff6b\021\uff6b\024\uff6b\027\uff6b\030" +
    "\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\061" +
    "\uff6b\062\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\072\uff6b" +
    "\073\uff6b\076\uff6b\077\uff6b\100\uff6b\106\uff6b\110\uff6b\114" +
    "\uff6b\122\uff6b\130\uff6b\131\uff6b\132\uff6b\001\002\000\136" +
    "\003\uff69\004\uff69\005\066\006\uff69\007\uff69\010\uff69\011" +
    "\065\012\062\013\uff69\015\uff69\017\uff69\020\uff69\021\uff69" +
    "\024\uff69\027\uff69\030\uff69\034\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\041\uff69\042\uff69\043\uff69\054\uff69\055\uff69" +
    "\056\uff69\057\uff69\061\uff69\062\uff69\064\uff69\065\uff69\066" +
    "\uff69\067\uff69\072\uff69\073\uff69\076\uff69\077\uff69\100\uff69" +
    "\106\uff69\110\uff69\114\uff69\122\uff69\130\uff69\131\uff69\132" +
    "\uff69\001\002\000\136\003\uff6a\004\uff6a\005\066\006\uff6a" +
    "\007\uff6a\010\uff6a\011\065\012\062\013\uff6a\015\uff6a\017" +
    "\uff6a\020\uff6a\021\uff6a\024\uff6a\027\uff6a\030\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\061\uff6a\062\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\uff6a\072\uff6a\073\uff6a\076" +
    "\uff6a\077\uff6a\100\uff6a\106\uff6a\110\uff6a\114\uff6a\122\uff6a" +
    "\130\uff6a\131\uff6a\132\uff6a\001\002\000\136\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78" +
    "\013\uff78\015\uff78\017\uff78\020\uff78\021\uff78\024\uff78\027" +
    "\uff78\030\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\054\uff78\055\uff78\056\uff78\057" +
    "\uff78\061\uff78\062\uff78\064\uff78\065\uff78\066\uff78\067\uff78" +
    "\072\uff78\073\uff78\076\uff78\077\uff78\100\uff78\106\uff78\110" +
    "\uff78\114\uff78\122\uff78\130\uff78\131\uff78\132\uff78\001\002" +
    "\000\026\003\uff95\006\uff95\036\uff95\037\uff95\061\uff95\062" +
    "\uff95\064\uff95\065\uff95\066\uff95\067\uff95\001\002\000\026" +
    "\003\036\006\042\036\044\037\043\061\033\062\040\064" +
    "\041\065\035\066\045\067\030\001\002\000\026\003\uff94" +
    "\006\uff94\036\uff94\037\uff94\061\uff94\062\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\001\002\000\026\003\uff93\006\uff93" +
    "\036\uff93\037\uff93\061\uff93\062\uff93\064\uff93\065\uff93\066" +
    "\uff93\067\uff93\001\002\000\124\003\uffc0\006\uffc0\007\uffc0" +
    "\013\uffc0\015\uffc0\017\112\020\115\021\uffc0\024\uffc0\027" +
    "\uffc0\030\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\054\114\055\111\056\113\057" +
    "\116\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\072\uffc0\073\uffc0\076\uffc0\077\uffc0\100\uffc0\106\uffc0\110" +
    "\uffc0\114\uffc0\122\uffc0\130\uffc0\131\uffc0\132\uffc0\001\002" +
    "\000\026\003\uff9b\006\uff9b\036\uff9b\037\uff9b\061\uff9b\062" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\001\002\000\026" +
    "\003\uff99\006\uff99\036\uff99\037\uff99\061\uff99\062\uff99\064" +
    "\uff99\065\uff99\066\uff99\067\uff99\001\002\000\026\003\uff97" +
    "\006\uff97\036\uff97\037\uff97\061\uff97\062\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\001\002\000\026\003\uff9a\006\uff9a" +
    "\036\uff9a\037\uff9a\061\uff9a\062\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\001\002\000\026\003\uff98\006\uff98\036\uff98" +
    "\037\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\001\002\000\026\003\uff96\006\uff96\036\uff96\037\uff96" +
    "\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96\001" +
    "\002\000\026\003\036\006\042\036\044\037\043\061\033" +
    "\062\040\064\041\065\035\066\045\067\030\001\002\000" +
    "\136\003\uffbe\004\063\005\066\006\uffbe\007\uffbe\010\064" +
    "\011\065\012\062\013\uffbe\015\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\024\uffbe\027\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\072\uffbe\073\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\106\uffbe\110\uffbe\114\uffbe\122\uffbe\130\uffbe\131\uffbe" +
    "\132\uffbe\001\002\000\140\003\uff52\004\uff52\005\uff52\006" +
    "\uff52\007\uff52\010\uff52\011\uff52\012\uff52\013\uff52\015\uff52" +
    "\017\uff52\020\uff52\021\uff52\023\uff52\024\uff52\027\uff52\030" +
    "\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52" +
    "\042\uff52\043\uff52\054\uff52\055\uff52\056\uff52\057\uff52\061" +
    "\uff52\062\uff52\064\uff52\065\uff52\066\uff52\067\uff52\072\uff52" +
    "\073\uff52\076\uff52\077\uff52\100\uff52\106\uff52\110\uff52\114" +
    "\uff52\122\uff52\130\uff52\131\uff52\132\uff52\001\002\000\140" +
    "\003\uff51\004\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011" +
    "\uff51\012\uff51\013\uff51\015\uff51\017\uff51\020\uff51\021\uff51" +
    "\023\uff51\024\uff51\027\uff51\030\uff51\034\uff51\035\uff51\036" +
    "\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51\054\uff51" +
    "\055\uff51\056\uff51\057\uff51\061\uff51\062\uff51\064\uff51\065" +
    "\uff51\066\uff51\067\uff51\072\uff51\073\uff51\076\uff51\077\uff51" +
    "\100\uff51\106\uff51\110\uff51\114\uff51\122\uff51\130\uff51\131" +
    "\uff51\132\uff51\001\002\000\032\003\036\006\042\007\125" +
    "\015\126\036\044\037\043\061\033\062\040\064\041\065" +
    "\035\066\045\067\030\001\002\000\010\003\133\007\132" +
    "\015\131\001\002\000\136\003\uff75\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\015\uff75" +
    "\017\uff75\020\uff75\021\uff75\024\uff75\027\uff75\030\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\054\uff75\055\uff75\056\uff75\057\uff75\061\uff75\062" +
    "\uff75\064\uff75\065\uff75\066\uff75\067\uff75\072\uff75\073\uff75" +
    "\076\uff75\077\uff75\100\uff75\106\uff75\110\uff75\114\uff75\122" +
    "\uff75\130\uff75\131\uff75\132\uff75\001\002\000\026\003\036" +
    "\006\042\036\044\037\043\061\033\062\040\064\041\065" +
    "\035\066\045\067\030\001\002\000\016\003\uff82\007\uff82" +
    "\013\107\015\uff82\034\106\035\104\001\002\000\016\003" +
    "\uff7e\007\uff7e\013\107\015\uff7e\034\106\035\104\001\002" +
    "\000\026\003\136\006\042\036\044\037\043\061\033\062" +
    "\040\064\041\065\035\066\045\067\030\001\002\000\136" +
    "\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011" +
    "\uff76\012\uff76\013\uff76\015\uff76\017\uff76\020\uff76\021\uff76" +
    "\024\uff76\027\uff76\030\uff76\034\uff76\035\uff76\036\uff76\037" +
    "\uff76\040\uff76\041\uff76\042\uff76\043\uff76\054\uff76\055\uff76" +
    "\056\uff76\057\uff76\061\uff76\062\uff76\064\uff76\065\uff76\066" +
    "\uff76\067\uff76\072\uff76\073\uff76\076\uff76\077\uff76\100\uff76" +
    "\106\uff76\110\uff76\114\uff76\122\uff76\130\uff76\131\uff76\132" +
    "\uff76\001\002\000\026\003\036\006\042\036\044\037\043" +
    "\061\033\062\040\064\041\065\035\066\045\067\030\001" +
    "\002\000\016\003\uff80\007\uff80\013\107\015\uff80\034\106" +
    "\035\104\001\002\000\016\003\uff81\007\uff81\013\107\015" +
    "\uff81\034\106\035\104\001\002\000\020\003\uff7f\004\055" +
    "\005\060\007\uff7f\010\056\011\057\015\uff7f\001\002\000" +
    "\026\003\036\006\042\036\044\037\043\061\033\062\040" +
    "\064\041\065\035\066\045\067\030\001\002\000\014\013" +
    "\107\015\uffd5\024\uffd5\034\106\035\104\001\002\000\004" +
    "\062\uff9c\001\002\000\012\006\145\015\uffd4\021\137\024" +
    "\uffd4\001\002\000\006\015\023\024\144\001\002\000\106" +
    "\002\uffd8\003\uffd8\006\uffd8\021\uffd8\024\uffd8\030\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\061\uffd8" +
    "\062\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\072\uffd8\074" +
    "\uffd8\075\uffd8\076\uffd8\100\uffd8\106\uffd8\110\uffd8\111\uffd8" +
    "\112\uffd8\114\uffd8\115\uffd8\122\uffd8\126\uffd8\130\uffd8\131" +
    "\uffd8\132\uffd8\001\002\000\014\007\147\074\015\111\005" +
    "\112\006\115\016\001\002\000\004\062\u014e\001\002\000" +
    "\004\027\u0148\001\002\000\006\007\152\015\151\001\002" +
    "\000\012\074\015\111\005\112\006\115\016\001\002\000" +
    "\004\027\153\001\002\000\102\003\uffed\006\uffed\021\uffed" +
    "\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\072\uffed\074\015\075\017\076\uffed\100\uffed\106\uffed\110" +
    "\uffed\111\005\112\006\114\uffed\115\016\122\uffed\126\157" +
    "\130\uffed\131\uffed\132\uffed\001\002\000\102\003\uffed\006" +
    "\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\072\uffed\074\015\075\017\076\uffed\100\uffed" +
    "\106\uffed\110\uffed\111\005\112\006\114\uffed\115\016\122" +
    "\uffed\126\157\130\uffed\131\uffed\132\uffed\001\002\000\066" +
    "\003\036\006\042\021\173\030\202\036\044\037\043\040" +
    "\163\041\213\042\205\043\203\061\033\062\215\064\041" +
    "\065\035\066\045\067\030\072\200\076\166\100\214\106" +
    "\167\110\174\114\175\122\204\130\207\131\206\132\170" +
    "\001\002\000\004\062\021\001\002\000\004\062\021\001" +
    "\002\000\006\015\023\024\161\001\002\000\106\002\uffda" +
    "\003\uffda\006\uffda\021\uffda\024\uffda\030\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\061\uffda\062\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\072\uffda\074\uffda\075" +
    "\uffda\076\uffda\100\uffda\106\uffda\110\uffda\111\uffda\112\uffda" +
    "\114\uffda\115\uffda\122\uffda\126\uffda\130\uffda\131\uffda\132" +
    "\uffda\001\002\000\072\003\uffec\006\uffec\021\uffec\030\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\073\uffec\076\uffec\077\uffec\100\uffec\106\uffec\110\uffec\114" +
    "\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\026" +
    "\003\036\006\042\036\044\037\043\061\033\062\040\064" +
    "\041\065\035\066\045\067\030\001\002\000\072\003\uffe6" +
    "\006\uffe6\021\uffe6\030\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\072\uffe6\073\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\106\uffe6\110\uffe6\114\uffe6\122\uffe6\130\uffe6\131\uffe6" +
    "\132\uffe6\001\002\000\072\003\uffee\006\uffee\021\uffee\030" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\061\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee\072" +
    "\uffee\073\uffee\076\uffee\077\uffee\100\uffee\106\uffee\110\uffee" +
    "\114\uffee\122\uffee\130\uffee\131\uffee\132\uffee\001\002\000" +
    "\074\003\uffdd\006\uffdd\021\uffdd\024\u0141\030\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\061\uffdd\062" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\073\uffdd" +
    "\076\uffdd\077\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd\122" +
    "\uffdd\130\uffdd\131\uffdd\132\uffdd\001\002\000\004\006\u0130" +
    "\001\002\000\004\006\u0125\001\002\000\072\003\uffeb\006" +
    "\uffeb\021\uffeb\030\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\072\uffeb\073\uffeb\076\uffeb\077\uffeb\100\uffeb" +
    "\106\uffeb\110\uffeb\114\uffeb\122\uffeb\130\uffeb\131\uffeb\132" +
    "\uffeb\001\002\000\072\003\uffe9\006\uffe9\021\uffe9\030\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\061" +
    "\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072\uffe9" +
    "\073\uffe9\076\uffe9\077\uffe9\100\uffe9\106\uffe9\110\uffe9\114" +
    "\uffe9\122\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002\000\026" +
    "\003\036\006\042\036\044\037\043\061\033\062\040\064" +
    "\041\065\035\066\045\067\030\001\002\000\006\003\362" +
    "\006\363\001\002\000\020\024\355\061\033\062\357\064" +
    "\041\065\035\066\045\067\030\001\002\000\072\003\uffe7" +
    "\006\uffe7\021\uffe7\030\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\072\uffe7\073\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\106\uffe7\110\uffe7\114\uffe7\122\uffe7\130\uffe7\131\uffe7" +
    "\132\uffe7\001\002\000\110\003\uffc1\006\uffc1\007\uffc1\013" +
    "\107\015\uffc1\021\uffc1\024\uffc1\027\uffc1\030\uffc1\034\106" +
    "\035\104\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\072\uffc1\073\uffc1\076\uffc1\077\uffc1\100\uffc1\106\uffc1\110" +
    "\uffc1\114\uffc1\122\uffc1\130\uffc1\131\uffc1\132\uffc1\001\002" +
    "\000\074\003\uffde\006\uffde\021\uffde\024\354\030\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\061\uffde" +
    "\062\uffde\064\uffde\065\uffde\066\uffde\067\uffde\072\uffde\073" +
    "\uffde\076\uffde\077\uffde\100\uffde\106\uffde\110\uffde\114\uffde" +
    "\122\uffde\130\uffde\131\uffde\132\uffde\001\002\000\102\003" +
    "\uffc2\006\uffc2\007\uffc2\015\uffc2\021\uffc2\024\uffc2\027\uffc2" +
    "\030\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\072\uffc2\073\uffc2\076\uffc2\077\uffc2\100\uffc2\106\uffc2\110" +
    "\uffc2\114\uffc2\122\uffc2\130\uffc2\131\uffc2\132\uffc2\001\002" +
    "\000\016\002\ufff1\074\ufff1\111\ufff1\112\ufff1\115\ufff1\126" +
    "\ufff1\001\002\000\026\003\036\006\042\036\044\037\043" +
    "\061\033\062\040\064\041\065\035\066\045\067\030\001" +
    "\002\000\004\006\265\001\002\000\026\003\036\006\042" +
    "\036\044\037\043\061\033\062\040\064\041\065\035\066" +
    "\045\067\030\001\002\000\004\006\256\001\002\000\004" +
    "\006\250\001\002\000\072\003\uffea\006\uffea\021\uffea\030" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\061\uffea\062\uffea\064\uffea\065\uffea\066\uffea\067\uffea\072" +
    "\uffea\073\uffea\076\uffea\077\uffea\100\uffea\106\uffea\110\uffea" +
    "\114\uffea\122\uffea\130\uffea\131\uffea\132\uffea\001\002\000" +
    "\074\003\uffe4\006\uffe4\021\uffe4\024\247\030\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\061\uffe4\062" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\072\uffe4\073\uffe4" +
    "\076\uffe4\077\uffe4\100\uffe4\106\uffe4\110\uffe4\114\uffe4\122" +
    "\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002\000\072\003\uffe8" +
    "\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\026\003\036\006\042\036\044\037" +
    "\043\061\033\062\040\064\041\065\035\066\045\067\030" +
    "\001\002\000\004\027\236\001\002\000\136\003\uff77\004" +
    "\uff77\005\uff77\006\123\007\uff77\010\uff77\011\uff77\012\uff77" +
    "\013\uff77\015\uff77\017\uff77\020\uff77\021\222\024\uff77\027" +
    "\uff77\030\uff77\034\uff77\035\uff77\036\121\037\122\040\220" +
    "\041\217\042\221\043\216\054\uff77\055\uff77\056\uff77\057" +
    "\uff77\061\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77" +
    "\072\uff77\073\uff77\076\uff77\077\uff77\100\uff77\106\uff77\110" +
    "\uff77\114\uff77\122\uff77\130\uff77\131\uff77\132\uff77\001\002" +
    "\000\026\003\235\006\042\036\044\037\043\061\033\062" +
    "\040\064\041\065\035\066\045\067\030\001\002\000\026" +
    "\003\233\006\042\036\044\037\043\061\033\062\040\064" +
    "\041\065\035\066\045\067\030\001\002\000\026\003\231" +
    "\006\042\036\044\037\043\061\033\062\040\064\041\065" +
    "\035\066\045\067\030\001\002\000\026\003\227\006\042" +
    "\036\044\037\043\061\033\062\040\064\041\065\035\066" +
    "\045\067\030\001\002\000\040\003\224\006\042\021\173" +
    "\036\044\037\043\040\163\041\213\042\205\043\203\061" +
    "\033\062\215\064\041\065\035\066\045\067\030\001\002" +
    "\000\102\003\uff47\006\uff47\007\uff47\015\uff47\021\uff47\024" +
    "\uff47\027\uff47\030\uff47\036\uff47\037\uff47\040\uff47\041\uff47" +
    "\042\uff47\043\uff47\061\uff47\062\uff47\064\uff47\065\uff47\066" +
    "\uff47\067\uff47\072\uff47\073\uff47\076\uff47\077\uff47\100\uff47" +
    "\106\uff47\110\uff47\114\uff47\122\uff47\130\uff47\131\uff47\132" +
    "\uff47\001\002\000\112\003\uff42\004\055\005\060\006\uff42" +
    "\007\uff42\010\056\011\057\015\uff42\021\uff42\024\uff42\027" +
    "\uff42\030\uff42\036\uff42\037\uff42\040\uff42\041\uff42\042\uff42" +
    "\043\uff42\061\uff42\062\uff42\064\uff42\065\uff42\066\uff42\067" +
    "\uff42\072\uff42\073\uff42\076\uff42\077\uff42\100\uff42\106\uff42" +
    "\110\uff42\114\uff42\122\uff42\130\uff42\131\uff42\132\uff42\001" +
    "\002\000\110\003\uff48\006\uff48\007\uff48\013\107\015\uff48" +
    "\021\uff48\024\uff48\027\uff48\030\uff48\034\106\035\104\036" +
    "\uff48\037\uff48\040\uff48\041\uff48\042\uff48\043\uff48\061\uff48" +
    "\062\uff48\064\uff48\065\uff48\066\uff48\067\uff48\072\uff48\073" +
    "\uff48\076\uff48\077\uff48\100\uff48\106\uff48\110\uff48\114\uff48" +
    "\122\uff48\130\uff48\131\uff48\132\uff48\001\002\000\110\003" +
    "\uff4a\006\uff4a\007\uff4a\013\107\015\uff4a\021\uff4a\024\uff4a" +
    "\027\uff4a\030\uff4a\034\106\035\104\036\uff4a\037\uff4a\040" +
    "\uff4a\041\uff4a\042\uff4a\043\uff4a\061\uff4a\062\uff4a\064\uff4a" +
    "\065\uff4a\066\uff4a\067\uff4a\072\uff4a\073\uff4a\076\uff4a\077" +
    "\uff4a\100\uff4a\106\uff4a\110\uff4a\114\uff4a\122\uff4a\130\uff4a" +
    "\131\uff4a\132\uff4a\001\002\000\112\003\uff44\004\055\005" +
    "\060\006\uff44\007\uff44\010\056\011\057\015\uff44\021\uff44" +
    "\024\uff44\027\uff44\030\uff44\036\uff44\037\uff44\040\uff44\041" +
    "\uff44\042\uff44\043\uff44\061\uff44\062\uff44\064\uff44\065\uff44" +
    "\066\uff44\067\uff44\072\uff44\073\uff44\076\uff44\077\uff44\100" +
    "\uff44\106\uff44\110\uff44\114\uff44\122\uff44\130\uff44\131\uff44" +
    "\132\uff44\001\002\000\110\003\uff4c\006\uff4c\007\uff4c\013" +
    "\107\015\uff4c\021\uff4c\024\uff4c\027\uff4c\030\uff4c\034\106" +
    "\035\104\036\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043" +
    "\uff4c\061\uff4c\062\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c" +
    "\072\uff4c\073\uff4c\076\uff4c\077\uff4c\100\uff4c\106\uff4c\110" +
    "\uff4c\114\uff4c\122\uff4c\130\uff4c\131\uff4c\132\uff4c\001\002" +
    "\000\112\003\uff46\004\055\005\060\006\uff46\007\uff46\010" +
    "\056\011\057\015\uff46\021\uff46\024\uff46\027\uff46\030\uff46" +
    "\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46\061" +
    "\uff46\062\uff46\064\uff46\065\uff46\066\uff46\067\uff46\072\uff46" +
    "\073\uff46\076\uff46\077\uff46\100\uff46\106\uff46\110\uff46\114" +
    "\uff46\122\uff46\130\uff46\131\uff46\132\uff46\001\002\000\110" +
    "\003\uff4b\006\uff4b\007\uff4b\013\107\015\uff4b\021\uff4b\024" +
    "\uff4b\027\uff4b\030\uff4b\034\106\035\104\036\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\042\uff4b\043\uff4b\061\uff4b\062\uff4b\064" +
    "\uff4b\065\uff4b\066\uff4b\067\uff4b\072\uff4b\073\uff4b\076\uff4b" +
    "\077\uff4b\100\uff4b\106\uff4b\110\uff4b\114\uff4b\122\uff4b\130" +
    "\uff4b\131\uff4b\132\uff4b\001\002\000\112\003\uff45\004\055" +
    "\005\060\006\uff45\007\uff45\010\056\011\057\015\uff45\021" +
    "\uff45\024\uff45\027\uff45\030\uff45\036\uff45\037\uff45\040\uff45" +
    "\041\uff45\042\uff45\043\uff45\061\uff45\062\uff45\064\uff45\065" +
    "\uff45\066\uff45\067\uff45\072\uff45\073\uff45\076\uff45\077\uff45" +
    "\100\uff45\106\uff45\110\uff45\114\uff45\122\uff45\130\uff45\131" +
    "\uff45\132\uff45\001\002\000\110\003\uff49\006\uff49\007\uff49" +
    "\013\107\015\uff49\021\uff49\024\uff49\027\uff49\030\uff49\034" +
    "\106\035\104\036\uff49\037\uff49\040\uff49\041\uff49\042\uff49" +
    "\043\uff49\061\uff49\062\uff49\064\uff49\065\uff49\066\uff49\067" +
    "\uff49\072\uff49\073\uff49\076\uff49\077\uff49\100\uff49\106\uff49" +
    "\110\uff49\114\uff49\122\uff49\130\uff49\131\uff49\132\uff49\001" +
    "\002\000\112\003\uff43\004\055\005\060\006\uff43\007\uff43" +
    "\010\056\011\057\015\uff43\021\uff43\024\uff43\027\uff43\030" +
    "\uff43\036\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43" +
    "\061\uff43\062\uff43\064\uff43\065\uff43\066\uff43\067\uff43\072" +
    "\uff43\073\uff43\076\uff43\077\uff43\100\uff43\106\uff43\110\uff43" +
    "\114\uff43\122\uff43\130\uff43\131\uff43\132\uff43\001\002\000" +
    "\066\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100\uffed" +
    "\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132" +
    "\uffed\001\002\000\066\003\036\006\042\021\173\030\240" +
    "\036\044\037\043\040\163\041\213\042\205\043\203\061" +
    "\033\062\215\064\041\065\035\066\045\067\030\072\200" +
    "\076\166\100\214\106\167\110\174\114\175\122\204\130" +
    "\207\131\206\132\170\001\002\000\004\130\241\001\002" +
    "\000\004\006\242\001\002\000\040\003\036\006\042\021" +
    "\173\036\044\037\043\040\163\041\213\042\205\043\203" +
    "\061\033\062\215\064\041\065\035\066\045\067\030\001" +
    "\002\000\004\007\244\001\002\000\004\024\245\001\002" +
    "\000\072\003\uffb8\006\uffb8\021\uffb8\030\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\061\uffb8\062\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\072\uffb8\073\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\106\uffb8\110\uffb8\114\uffb8\122\uffb8" +
    "\130\uffb8\131\uffb8\132\uffb8\001\002\000\110\003\uff40\006" +
    "\uff40\007\uff40\013\107\015\uff40\021\uff40\024\uff40\027\uff40" +
    "\030\uff40\034\106\035\104\036\uff40\037\uff40\040\uff40\041" +
    "\uff40\042\uff40\043\uff40\061\uff40\062\uff40\064\uff40\065\uff40" +
    "\066\uff40\067\uff40\072\uff40\073\uff40\076\uff40\077\uff40\100" +
    "\uff40\106\uff40\110\uff40\114\uff40\122\uff40\130\uff40\131\uff40" +
    "\132\uff40\001\002\000\072\003\uffe5\006\uffe5\021\uffe5\030" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\061\uffe5\062\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\072" +
    "\uffe5\073\uffe5\076\uffe5\077\uffe5\100\uffe5\106\uffe5\110\uffe5" +
    "\114\uffe5\122\uffe5\130\uffe5\131\uffe5\132\uffe5\001\002\000" +
    "\040\003\036\006\042\021\173\036\044\037\043\040\163" +
    "\041\213\042\205\043\203\061\033\062\215\064\041\065" +
    "\035\066\045\067\030\001\002\000\004\007\252\001\002" +
    "\000\004\027\253\001\002\000\066\003\uffed\006\uffed\021" +
    "\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110\uffed\114\uffed" +
    "\122\uffed\130\uffed\131\uffed\132\uffed\001\002\000\066\003" +
    "\036\006\042\021\173\030\255\036\044\037\043\040\163" +
    "\041\213\042\205\043\203\061\033\062\215\064\041\065" +
    "\035\066\045\067\030\072\200\076\166\100\214\106\167" +
    "\110\174\114\175\122\204\130\207\131\206\132\170\001" +
    "\002\000\072\003\uffb9\006\uffb9\021\uffb9\030\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\061\uffb9\062" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072\uffb9\073\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\106\uffb9\110\uffb9\114\uffb9\122" +
    "\uffb9\130\uffb9\131\uffb9\132\uffb9\001\002\000\006\007\257" +
    "\062\260\001\002\000\004\024\263\001\002\000\004\007" +
    "\261\001\002\000\004\024\262\001\002\000\072\003\uffab" +
    "\006\uffab\021\uffab\030\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\061\uffab\062\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\072\uffab\073\uffab\076\uffab\077\uffab\100" +
    "\uffab\106\uffab\110\uffab\114\uffab\122\uffab\130\uffab\131\uffab" +
    "\132\uffab\001\002\000\072\003\uffaa\006\uffaa\021\uffaa\030" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\061\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\072" +
    "\uffaa\073\uffaa\076\uffaa\077\uffaa\100\uffaa\106\uffaa\110\uffaa" +
    "\114\uffaa\122\uffaa\130\uffaa\131\uffaa\132\uffaa\001\002\000" +
    "\110\003\uff3f\006\uff3f\007\uff3f\013\107\015\uff3f\021\uff3f" +
    "\024\uff3f\027\uff3f\030\uff3f\034\106\035\104\036\uff3f\037" +
    "\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\061\uff3f\062\uff3f" +
    "\064\uff3f\065\uff3f\066\uff3f\067\uff3f\072\uff3f\073\uff3f\076" +
    "\uff3f\077\uff3f\100\uff3f\106\uff3f\110\uff3f\114\uff3f\122\uff3f" +
    "\130\uff3f\131\uff3f\132\uff3f\001\002\000\026\003\270\006" +
    "\273\036\044\037\043\061\033\062\272\064\041\065\035" +
    "\066\045\067\030\001\002\000\020\004\uff5f\005\uff5f\007" +
    "\uff5f\010\uff5f\011\uff5f\012\uff5f\023\uff5f\001\002\000\016" +
    "\004\306\005\311\007\335\010\307\011\310\012\305\001" +
    "\002\000\014\004\300\005\303\010\301\011\302\012\276" +
    "\001\002\000\020\004\uff5e\005\uff5e\007\uff5e\010\uff5e\011" +
    "\uff5e\012\uff5e\023\uff5e\001\002\000\026\004\uff62\005\uff62" +
    "\006\331\007\uff62\010\uff62\011\uff62\012\uff62\023\uff62\036" +
    "\121\037\122\001\002\000\026\003\275\006\273\036\044" +
    "\037\043\061\033\062\272\064\041\065\035\066\045\067" +
    "\030\001\002\000\016\004\306\005\311\007\330\010\307" +
    "\011\310\012\305\001\002\000\016\004\300\005\303\007" +
    "\277\010\301\011\302\012\276\001\002\000\026\003\270" +
    "\006\273\036\044\037\043\061\033\062\272\064\041\065" +
    "\035\066\045\067\030\001\002\000\020\004\uff53\005\uff53" +
    "\007\uff53\010\uff53\011\uff53\012\uff53\023\uff53\001\002\000" +
    "\026\003\270\006\273\036\044\037\043\061\033\062\272" +
    "\064\041\065\035\066\045\067\030\001\002\000\026\003" +
    "\270\006\273\036\044\037\043\061\033\062\272\064\041" +
    "\065\035\066\045\067\030\001\002\000\026\003\270\006" +
    "\273\036\044\037\043\061\033\062\272\064\041\065\035" +
    "\066\045\067\030\001\002\000\026\003\270\006\273\036" +
    "\044\037\043\061\033\062\272\064\041\065\035\066\045" +
    "\067\030\001\002\000\020\004\uff56\005\uff56\007\uff56\010" +
    "\uff56\011\uff56\012\uff56\023\uff56\001\002\000\026\003\323" +
    "\006\273\036\044\037\043\061\033\062\272\064\041\065" +
    "\035\066\045\067\030\001\002\000\026\003\321\006\273" +
    "\036\044\037\043\061\033\062\272\064\041\065\035\066" +
    "\045\067\030\001\002\000\026\003\317\006\273\036\044" +
    "\037\043\061\033\062\272\064\041\065\035\066\045\067" +
    "\030\001\002\000\026\003\315\006\273\036\044\037\043" +
    "\061\033\062\272\064\041\065\035\066\045\067\030\001" +
    "\002\000\026\003\313\006\273\036\044\037\043\061\033" +
    "\062\272\064\041\065\035\066\045\067\030\001\002\000" +
    "\020\004\uff66\005\uff66\007\uff66\010\uff66\011\uff66\012\uff66" +
    "\023\uff66\001\002\000\020\004\300\005\303\007\uff5b\010" +
    "\301\011\302\012\276\023\uff5b\001\002\000\020\004\uff65" +
    "\005\uff65\007\uff65\010\uff65\011\uff65\012\uff65\023\uff65\001" +
    "\002\000\020\004\300\005\303\007\uff5a\010\301\011\302" +
    "\012\276\023\uff5a\001\002\000\020\004\uff67\005\311\007" +
    "\uff67\010\uff67\011\310\012\305\023\uff67\001\002\000\020" +
    "\004\300\005\303\007\uff5c\010\301\011\302\012\276\023" +
    "\uff5c\001\002\000\020\004\uff68\005\311\007\uff68\010\uff68" +
    "\011\310\012\305\023\uff68\001\002\000\020\004\300\005" +
    "\303\007\uff5d\010\301\011\302\012\276\023\uff5d\001\002" +
    "\000\020\004\uff64\005\uff64\007\uff64\010\uff64\011\uff64\012" +
    "\uff64\023\uff64\001\002\000\020\004\300\005\303\007\uff59" +
    "\010\301\011\302\012\276\023\uff59\001\002\000\020\004" +
    "\uff55\005\uff55\007\uff55\010\uff55\011\uff55\012\uff55\023\uff55" +
    "\001\002\000\020\004\uff57\005\311\007\uff57\010\uff57\011" +
    "\310\012\305\023\uff57\001\002\000\020\004\uff58\005\311" +
    "\007\uff58\010\uff58\011\310\012\305\023\uff58\001\002\000" +
    "\020\004\uff54\005\uff54\007\uff54\010\uff54\011\uff54\012\uff54" +
    "\023\uff54\001\002\000\020\004\uff63\005\uff63\007\uff63\010" +
    "\uff63\011\uff63\012\uff63\023\uff63\001\002\000\032\003\036" +
    "\006\042\007\333\015\126\036\044\037\043\061\033\062" +
    "\040\064\041\065\035\066\045\067\030\001\002\000\010" +
    "\003\133\007\334\015\131\001\002\000\020\004\uff60\005" +
    "\uff60\007\uff60\010\uff60\011\uff60\012\uff60\023\uff60\001\002" +
    "\000\020\004\uff61\005\uff61\007\uff61\010\uff61\011\uff61\012" +
    "\uff61\023\uff61\001\002\000\004\027\336\001\002\000\010" +
    "\030\uffae\073\uffae\077\uffae\001\002\000\010\030\344\073" +
    "\343\077\340\001\002\000\004\023\351\001\002\000\004" +
    "\030\350\001\002\000\010\030\uffaf\073\uffaf\077\uffaf\001" +
    "\002\000\026\003\270\006\273\036\044\037\043\061\033" +
    "\062\272\064\041\065\035\066\045\067\030\001\002\000" +
    "\072\003\uffb0\006\uffb0\021\uffb0\030\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\061\uffb0\062\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\072\uffb0\073\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\106\uffb0\110\uffb0\114\uffb0\122\uffb0\130" +
    "\uffb0\131\uffb0\132\uffb0\001\002\000\016\004\306\005\311" +
    "\010\307\011\310\012\305\023\346\001\002\000\072\003" +
    "\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\072\uffed\073\uffed\076\uffed\077\uffed" +
    "\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131" +
    "\uffed\132\uffed\001\002\000\072\003\036\006\042\021\173" +
    "\030\uffad\036\044\037\043\040\163\041\213\042\205\043" +
    "\203\061\033\062\215\064\041\065\035\066\045\067\030" +
    "\072\200\073\uffad\076\166\077\uffad\100\214\106\167\110" +
    "\174\114\175\122\204\130\207\131\206\132\170\001\002" +
    "\000\072\003\uffb1\006\uffb1\021\uffb1\030\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\061\uffb1\062\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\072\uffb1\073\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\106\uffb1\110\uffb1\114\uffb1\122\uffb1" +
    "\130\uffb1\131\uffb1\132\uffb1\001\002\000\066\003\uffed\006" +
    "\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110\uffed" +
    "\114\uffed\122\uffed\130\uffed\131\uffed\132\uffed\001\002\000" +
    "\066\003\036\006\042\021\173\030\uffac\036\044\037\043" +
    "\040\163\041\213\042\205\043\203\061\033\062\215\064" +
    "\041\065\035\066\045\067\030\072\200\076\166\100\214" +
    "\106\167\110\174\114\175\122\204\130\207\131\206\132" +
    "\170\001\002\000\110\003\uff3e\006\uff3e\007\uff3e\013\107" +
    "\015\uff3e\021\uff3e\024\uff3e\027\uff3e\030\uff3e\034\106\035" +
    "\104\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e" +
    "\061\uff3e\062\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\072" +
    "\uff3e\073\uff3e\076\uff3e\077\uff3e\100\uff3e\106\uff3e\110\uff3e" +
    "\114\uff3e\122\uff3e\130\uff3e\131\uff3e\132\uff3e\001\002\000" +
    "\072\003\uffe3\006\uffe3\021\uffe3\030\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\061\uffe3\062\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3\076\uffe3" +
    "\077\uffe3\100\uffe3\106\uffe3\110\uffe3\114\uffe3\122\uffe3\130" +
    "\uffe3\131\uffe3\132\uffe3\001\002\000\072\003\uffdf\006\uffdf" +
    "\021\uffdf\030\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\072\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\106" +
    "\uffdf\110\uffdf\114\uffdf\122\uffdf\130\uffdf\131\uffdf\132\uffdf" +
    "\001\002\000\074\003\uffdc\006\uffdc\021\uffdc\024\361\030" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072" +
    "\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\106\uffdc\110\uffdc" +
    "\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000" +
    "\074\003\uffdb\006\uffdb\021\uffdb\024\360\030\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\061\uffdb\062" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\072\uffdb\073\uffdb" +
    "\076\uffdb\077\uffdb\100\uffdb\106\uffdb\110\uffdb\114\uffdb\122" +
    "\uffdb\130\uffdb\131\uffdb\132\uffdb\001\002\000\072\003\uffe0" +
    "\006\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\072\uffe0\073\uffe0\076\uffe0\077\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\001\002\000\072\003\uffe1\006\uffe1\021\uffe1\030" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\072" +
    "\uffe1\073\uffe1\076\uffe1\077\uffe1\100\uffe1\106\uffe1\110\uffe1" +
    "\114\uffe1\122\uffe1\130\uffe1\131\uffe1\132\uffe1\001\002\000" +
    "\006\007\u011b\027\u011c\001\002\000\042\003\365\006\042" +
    "\021\173\027\364\036\044\037\043\040\163\041\213\042" +
    "\205\043\203\061\033\062\215\064\041\065\035\066\045" +
    "\067\030\001\002\000\066\003\uffed\006\uffed\021\uffed\030" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072" +
    "\uffed\076\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed" +
    "\130\uffed\131\uffed\132\uffed\001\002\000\014\004\055\005" +
    "\060\007\u0113\010\056\011\057\001\002\000\006\007\367" +
    "\027\370\001\002\000\006\003\u0108\027\u0109\001\002\000" +
    "\066\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100\uffed" +
    "\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132" +
    "\uffed\001\002\000\066\003\036\006\042\021\173\030\372" +
    "\036\044\037\043\040\163\041\213\042\205\043\203\061" +
    "\033\062\215\064\041\065\035\066\045\067\030\072\200" +
    "\076\166\100\214\106\167\110\174\114\175\122\204\130" +
    "\207\131\206\132\170\001\002\000\074\003\uffcc\006\uffcc" +
    "\021\uffcc\030\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\072\uffcc\073\uffcc\076\uffcc\077\uffcc\100\uffcc\102" +
    "\373\106\uffcc\110\uffcc\114\uffcc\122\uffcc\130\uffcc\131\uffcc" +
    "\132\uffcc\001\002\000\006\027\375\110\376\001\002\000" +
    "\072\003\uffcd\006\uffcd\021\uffcd\030\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\061\uffcd\062\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\072\uffcd\073\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\106\uffcd\110\uffcd\114\uffcd\122\uffcd\130" +
    "\uffcd\131\uffcd\132\uffcd\001\002\000\066\003\uffed\006\uffed" +
    "\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110\uffed\114" +
    "\uffed\122\uffed\130\uffed\131\uffed\132\uffed\001\002\000\004" +
    "\006\377\001\002\000\040\003\036\006\042\021\173\036" +
    "\044\037\043\040\163\041\213\042\205\043\203\061\033" +
    "\062\215\064\041\065\035\066\045\067\030\001\002\000" +
    "\004\007\u0101\001\002\000\004\027\u0102\001\002\000\066" +
    "\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100\uffed\106" +
    "\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132\uffed" +
    "\001\002\000\066\003\036\006\042\021\173\030\u0104\036" +
    "\044\037\043\040\163\041\213\042\205\043\203\061\033" +
    "\062\215\064\041\065\035\066\045\067\030\072\200\076" +
    "\166\100\214\106\167\110\174\114\175\122\204\130\207" +
    "\131\206\132\170\001\002\000\074\003\uffbb\006\uffbb\021" +
    "\uffbb\030\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\072\uffbb\073\uffbb\076\uffbb\077\uffbb\100\uffbb\102\373" +
    "\106\uffbb\110\uffbb\114\uffbb\122\uffbb\130\uffbb\131\uffbb\132" +
    "\uffbb\001\002\000\072\003\uffbc\006\uffbc\021\uffbc\030\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\061" +
    "\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\072\uffbc" +
    "\073\uffbc\076\uffbc\077\uffbc\100\uffbc\106\uffbc\110\uffbc\114" +
    "\uffbc\122\uffbc\130\uffbc\131\uffbc\132\uffbc\001\002\000\066" +
    "\003\036\006\042\021\173\030\u0107\036\044\037\043\040" +
    "\163\041\213\042\205\043\203\061\033\062\215\064\041" +
    "\065\035\066\045\067\030\072\200\076\166\100\214\106" +
    "\167\110\174\114\175\122\204\130\207\131\206\132\170" +
    "\001\002\000\072\003\uffba\006\uffba\021\uffba\030\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\061\uffba" +
    "\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\072\uffba\073" +
    "\uffba\076\uffba\077\uffba\100\uffba\106\uffba\110\uffba\114\uffba" +
    "\122\uffba\130\uffba\131\uffba\132\uffba\001\002\000\070\003" +
    "\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100\uffed\102\373" +
    "\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132" +
    "\uffed\001\002\000\066\003\uffed\006\uffed\021\uffed\030\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061" +
    "\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed" +
    "\076\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130" +
    "\uffed\131\uffed\132\uffed\001\002\000\066\003\u010b\006\042" +
    "\021\173\030\u010c\036\044\037\043\040\163\041\213\042" +
    "\205\043\203\061\033\062\215\064\041\065\035\066\045" +
    "\067\030\072\200\076\166\100\214\106\167\110\174\114" +
    "\175\122\204\130\207\131\206\132\170\001\002\000\104" +
    "\003\uffc4\004\055\005\060\006\uffc4\010\056\011\057\021" +
    "\uffc4\030\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\072\uffc4\073\uffc4\076\uffc4\077\uffc4\100\uffc4\102\373" +
    "\106\uffc4\110\uffc4\114\uffc4\122\uffc4\130\uffc4\131\uffc4\132" +
    "\uffc4\001\002\000\074\003\uffd2\006\uffd2\021\uffd2\030\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\061" +
    "\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2" +
    "\073\uffd2\076\uffd2\077\uffd2\100\uffd2\102\373\106\uffd2\110" +
    "\uffd2\114\uffd2\122\uffd2\130\uffd2\131\uffd2\132\uffd2\001\002" +
    "\000\072\003\uffd3\006\uffd3\021\uffd3\030\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\061\uffd3\062\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\072\uffd3\073\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\106\uffd3\110\uffd3\114\uffd3\122\uffd3" +
    "\130\uffd3\131\uffd3\132\uffd3\001\002\000\072\003\uffc5\006" +
    "\uffc5\021\uffc5\030\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\072\uffc5\073\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\106\uffc5\110\uffc5\114\uffc5\122\uffc5\130\uffc5\131\uffc5\132" +
    "\uffc5\001\002\000\066\003\036\006\042\021\173\030\u0111" +
    "\036\044\037\043\040\163\041\213\042\205\043\203\061" +
    "\033\062\215\064\041\065\035\066\045\067\030\072\200" +
    "\076\166\100\214\106\167\110\174\114\175\122\204\130" +
    "\207\131\206\132\170\001\002\000\072\003\uffc3\006\uffc3" +
    "\021\uffc3\030\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\072\uffc3\073\uffc3\076\uffc3\077\uffc3\100\uffc3\106" +
    "\uffc3\110\uffc3\114\uffc3\122\uffc3\130\uffc3\131\uffc3\132\uffc3" +
    "\001\002\000\074\003\uffc6\006\uffc6\021\uffc6\030\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\061\uffc6" +
    "\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6\073" +
    "\uffc6\076\uffc6\077\uffc6\100\uffc6\102\373\106\uffc6\110\uffc6" +
    "\114\uffc6\122\uffc6\130\uffc6\131\uffc6\132\uffc6\001\002\000" +
    "\072\003\uffc7\006\uffc7\021\uffc7\030\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\061\uffc7\062\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\072\uffc7\073\uffc7\076\uffc7" +
    "\077\uffc7\100\uffc7\106\uffc7\110\uffc7\114\uffc7\122\uffc7\130" +
    "\uffc7\131\uffc7\132\uffc7\001\002\000\004\027\u0114\001\002" +
    "\000\066\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100" +
    "\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed" +
    "\132\uffed\001\002\000\066\003\036\006\042\021\173\030" +
    "\u0116\036\044\037\043\040\163\041\213\042\205\043\203" +
    "\061\033\062\215\064\041\065\035\066\045\067\030\072" +
    "\200\076\166\100\214\106\167\110\174\114\175\122\204" +
    "\130\207\131\206\132\170\001\002\000\074\003\uffd0\006" +
    "\uffd0\021\uffd0\030\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\072\uffd0\073\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\102\373\106\uffd0\110\uffd0\114\uffd0\122\uffd0\130\uffd0\131" +
    "\uffd0\132\uffd0\001\002\000\072\003\uffd1\006\uffd1\021\uffd1" +
    "\030\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\072\uffd1\073\uffd1\076\uffd1\077\uffd1\100\uffd1\106\uffd1\110" +
    "\uffd1\114\uffd1\122\uffd1\130\uffd1\131\uffd1\132\uffd1\001\002" +
    "\000\066\003\036\006\042\021\173\030\u0119\036\044\037" +
    "\043\040\163\041\213\042\205\043\203\061\033\062\215" +
    "\064\041\065\035\066\045\067\030\072\200\076\166\100" +
    "\214\106\167\110\174\114\175\122\204\130\207\131\206" +
    "\132\170\001\002\000\074\003\uffca\006\uffca\021\uffca\030" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\061\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca\072" +
    "\uffca\073\uffca\076\uffca\077\uffca\100\uffca\102\373\106\uffca" +
    "\110\uffca\114\uffca\122\uffca\130\uffca\131\uffca\132\uffca\001" +
    "\002\000\072\003\uffcb\006\uffcb\021\uffcb\030\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\061\uffcb\062" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb\073\uffcb" +
    "\076\uffcb\077\uffcb\100\uffcb\106\uffcb\110\uffcb\114\uffcb\122" +
    "\uffcb\130\uffcb\131\uffcb\132\uffcb\001\002\000\004\027\u0120" +
    "\001\002\000\066\003\uffed\006\uffed\021\uffed\030\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed" +
    "\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076" +
    "\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed" +
    "\131\uffed\132\uffed\001\002\000\066\003\036\006\042\021" +
    "\173\030\u011e\036\044\037\043\040\163\041\213\042\205" +
    "\043\203\061\033\062\215\064\041\065\035\066\045\067" +
    "\030\072\200\076\166\100\214\106\167\110\174\114\175" +
    "\122\204\130\207\131\206\132\170\001\002\000\074\003" +
    "\uffc8\006\uffc8\021\uffc8\030\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\061\uffc8\062\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\072\uffc8\073\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\102\373\106\uffc8\110\uffc8\114\uffc8\122\uffc8\130" +
    "\uffc8\131\uffc8\132\uffc8\001\002\000\072\003\uffc9\006\uffc9" +
    "\021\uffc9\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\072\uffc9\073\uffc9\076\uffc9\077\uffc9\100\uffc9\106" +
    "\uffc9\110\uffc9\114\uffc9\122\uffc9\130\uffc9\131\uffc9\132\uffc9" +
    "\001\002\000\066\003\uffed\006\uffed\021\uffed\030\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed" +
    "\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076" +
    "\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed" +
    "\131\uffed\132\uffed\001\002\000\066\003\036\006\042\021" +
    "\173\030\u0122\036\044\037\043\040\163\041\213\042\205" +
    "\043\203\061\033\062\215\064\041\065\035\066\045\067" +
    "\030\072\200\076\166\100\214\106\167\110\174\114\175" +
    "\122\204\130\207\131\206\132\170\001\002\000\074\003" +
    "\uffce\006\uffce\021\uffce\030\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\061\uffce\062\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\072\uffce\073\uffce\076\uffce\077\uffce" +
    "\100\uffce\102\373\106\uffce\110\uffce\114\uffce\122\uffce\130" +
    "\uffce\131\uffce\132\uffce\001\002\000\072\003\uffcf\006\uffcf" +
    "\021\uffcf\030\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\072\uffcf\073\uffcf\076\uffcf\077\uffcf\100\uffcf\106" +
    "\uffcf\110\uffcf\114\uffcf\122\uffcf\130\uffcf\131\uffcf\132\uffcf" +
    "\001\002\000\110\003\uff3d\006\uff3d\007\uff3d\013\107\015" +
    "\uff3d\021\uff3d\024\uff3d\027\uff3d\030\uff3d\034\106\035\104" +
    "\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\061" +
    "\uff3d\062\uff3d\064\uff3d\065\uff3d\066\uff3d\067\uff3d\072\uff3d" +
    "\073\uff3d\076\uff3d\077\uff3d\100\uff3d\106\uff3d\110\uff3d\114" +
    "\uff3d\122\uff3d\130\uff3d\131\uff3d\132\uff3d\001\002\000\042" +
    "\003\036\006\042\015\u0127\021\173\036\044\037\043\040" +
    "\163\041\213\042\205\043\203\061\033\062\215\064\041" +
    "\065\035\066\045\067\030\001\002\000\010\003\u012c\007" +
    "\u012b\015\u012a\001\002\000\040\003\036\006\042\021\173" +
    "\036\044\037\043\040\163\041\213\042\205\043\203\061" +
    "\033\062\215\064\041\065\035\066\045\067\030\001\002" +
    "\000\010\003\uffa8\007\uffa8\015\uffa8\001\002\000\010\003" +
    "\uffa5\007\uffa5\015\uffa5\001\002\000\040\003\u012e\006\042" +
    "\021\173\036\044\037\043\040\163\041\213\042\205\043" +
    "\203\061\033\062\215\064\041\065\035\066\045\067\030" +
    "\001\002\000\004\024\u012d\001\002\000\010\003\uffa4\007" +
    "\uffa4\015\uffa4\001\002\000\072\003\uffa9\006\uffa9\021\uffa9" +
    "\030\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\072\uffa9\073\uffa9\076\uffa9\077\uffa9\100\uffa9\106\uffa9\110" +
    "\uffa9\114\uffa9\122\uffa9\130\uffa9\131\uffa9\132\uffa9\001\002" +
    "\000\020\003\uffa6\004\055\005\060\007\uffa6\010\056\011" +
    "\057\015\uffa6\001\002\000\010\003\uffa7\007\uffa7\015\uffa7" +
    "\001\002\000\056\003\u0133\006\042\021\173\024\uffb4\036" +
    "\044\037\043\040\163\041\213\042\205\043\203\061\033" +
    "\062\215\064\041\065\035\066\045\067\030\074\015\075" +
    "\017\111\005\112\006\115\016\126\157\001\002\000\004" +
    "\007\u013d\001\002\000\042\003\u0133\006\042\021\173\024" +
    "\uffb4\036\044\037\043\040\163\041\213\042\205\043\203" +
    "\061\033\062\215\064\041\065\035\066\045\067\030\001" +
    "\002\000\016\004\055\005\060\007\uffb2\010\056\011\057" +
    "\024\uffb2\001\002\000\004\024\u0136\001\002\000\006\007" +
    "\uffb3\024\uffb3\001\002\000\042\003\u0133\006\042\021\173" +
    "\024\uffb4\036\044\037\043\040\163\041\213\042\205\043" +
    "\203\061\033\062\215\064\041\065\035\066\045\067\030" +
    "\001\002\000\004\024\u0138\001\002\000\042\003\u0133\006" +
    "\042\007\uffb4\021\173\036\044\037\043\040\163\041\213" +
    "\042\205\043\203\061\033\062\215\064\041\065\035\066" +
    "\045\067\030\001\002\000\004\007\uffb5\001\002\000\004" +
    "\024\u013b\001\002\000\042\003\u0133\006\042\007\uffb4\021" +
    "\173\036\044\037\043\040\163\041\213\042\205\043\203" +
    "\061\033\062\215\064\041\065\035\066\045\067\030\001" +
    "\002\000\004\007\uffb6\001\002\000\004\027\u013e\001\002" +
    "\000\066\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100" +
    "\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed" +
    "\132\uffed\001\002\000\066\003\036\006\042\021\173\030" +
    "\u0140\036\044\037\043\040\163\041\213\042\205\043\203" +
    "\061\033\062\215\064\041\065\035\066\045\067\030\072" +
    "\200\076\166\100\214\106\167\110\174\114\175\122\204" +
    "\130\207\131\206\132\170\001\002\000\072\003\uffb7\006" +
    "\uffb7\021\uffb7\030\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\067\uffb7\072\uffb7\073\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\106\uffb7\110\uffb7\114\uffb7\122\uffb7\130\uffb7\131\uffb7\132" +
    "\uffb7\001\002\000\072\003\uffe2\006\uffe2\021\uffe2\030\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\061" +
    "\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\072\uffe2" +
    "\073\uffe2\076\uffe2\077\uffe2\100\uffe2\106\uffe2\110\uffe2\114" +
    "\uffe2\122\uffe2\130\uffe2\131\uffe2\132\uffe2\001\002\000\110" +
    "\003\uff41\006\uff41\007\uff41\013\107\015\uff41\021\uff41\024" +
    "\uff41\027\uff41\030\uff41\034\106\035\104\036\uff41\037\uff41" +
    "\040\uff41\041\uff41\042\uff41\043\uff41\061\uff41\062\uff41\064" +
    "\uff41\065\uff41\066\uff41\067\uff41\072\uff41\073\uff41\076\uff41" +
    "\077\uff41\100\uff41\106\uff41\110\uff41\114\uff41\122\uff41\130" +
    "\uff41\131\uff41\132\uff41\001\002\000\066\003\036\006\042" +
    "\021\173\030\u0145\036\044\037\043\040\163\041\213\042" +
    "\205\043\203\061\033\062\215\064\041\065\035\066\045" +
    "\067\030\072\200\076\166\100\214\106\167\110\174\114" +
    "\175\122\204\130\207\131\206\132\170\001\002\000\104" +
    "\002\ufffb\003\ufffb\006\ufffb\021\ufffb\030\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\061\ufffb\062\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\072\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\100\ufffb\106\ufffb\110\ufffb\111\ufffb\112\ufffb" +
    "\114\ufffb\115\ufffb\122\ufffb\126\ufffb\130\ufffb\131\ufffb\132" +
    "\ufffb\001\002\000\016\002\ufff5\074\ufff5\111\ufff5\112\ufff5" +
    "\115\ufff5\126\ufff5\001\002\000\004\062\u0147\001\002\000" +
    "\006\007\uffef\015\uffef\001\002\000\102\003\uffed\006\uffed" +
    "\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\072\uffed\074\015\075\017\076\uffed\100\uffed\106" +
    "\uffed\110\uffed\111\005\112\006\114\uffed\115\016\122\uffed" +
    "\126\157\130\uffed\131\uffed\132\uffed\001\002\000\102\003" +
    "\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\072\uffed\074\015\075\017\076\uffed" +
    "\100\uffed\106\uffed\110\uffed\111\005\112\006\114\uffed\115" +
    "\016\122\uffed\126\157\130\uffed\131\uffed\132\uffed\001\002" +
    "\000\066\003\036\006\042\021\173\030\u014b\036\044\037" +
    "\043\040\163\041\213\042\205\043\203\061\033\062\215" +
    "\064\041\065\035\066\045\067\030\072\200\076\166\100" +
    "\214\106\167\110\174\114\175\122\204\130\207\131\206" +
    "\132\170\001\002\000\016\002\ufff2\074\ufff2\111\ufff2\112" +
    "\ufff2\115\ufff2\126\ufff2\001\002\000\066\003\036\006\042" +
    "\021\173\030\u014d\036\044\037\043\040\163\041\213\042" +
    "\205\043\203\061\033\062\215\064\041\065\035\066\045" +
    "\067\030\072\200\076\166\100\214\106\167\110\174\114" +
    "\175\122\204\130\207\131\206\132\170\001\002\000\016" +
    "\002\ufff6\074\ufff6\111\ufff6\112\ufff6\115\ufff6\126\ufff6\001" +
    "\002\000\006\007\ufff0\015\ufff0\001\002\000\004\002\001" +
    "\001\002\000\012\006\u0151\015\uffd4\021\137\024\uffd4\001" +
    "\002\000\014\007\u0152\074\015\111\005\112\006\115\016" +
    "\001\002\000\004\027\u015b\001\002\000\006\007\u0154\015" +
    "\151\001\002\000\004\027\u0155\001\002\000\102\003\uffed" +
    "\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\072\uffed\074\015\075\017\076\uffed\100" +
    "\uffed\106\uffed\110\uffed\111\005\112\006\114\uffed\115\016" +
    "\122\uffed\126\157\130\uffed\131\uffed\132\uffed\001\002\000" +
    "\102\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\072\uffed\074\015\075\017" +
    "\076\uffed\100\uffed\106\uffed\110\uffed\111\005\112\006\114" +
    "\uffed\115\016\122\uffed\126\157\130\uffed\131\uffed\132\uffed" +
    "\001\002\000\066\003\036\006\042\021\173\030\u0158\036" +
    "\044\037\043\040\163\041\213\042\205\043\203\061\033" +
    "\062\215\064\041\065\035\066\045\067\030\072\200\076" +
    "\166\100\214\106\167\110\174\114\175\122\204\130\207" +
    "\131\206\132\170\001\002\000\016\002\ufff4\074\ufff4\111" +
    "\ufff4\112\ufff4\115\ufff4\126\ufff4\001\002\000\066\003\036" +
    "\006\042\021\173\030\u015a\036\044\037\043\040\163\041" +
    "\213\042\205\043\203\061\033\062\215\064\041\065\035" +
    "\066\045\067\030\072\200\076\166\100\214\106\167\110" +
    "\174\114\175\122\204\130\207\131\206\132\170\001\002" +
    "\000\016\002\ufff8\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126" +
    "\ufff8\001\002\000\102\003\uffed\006\uffed\021\uffed\030\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061" +
    "\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed" +
    "\074\015\075\017\076\uffed\100\uffed\106\uffed\110\uffed\111" +
    "\005\112\006\114\uffed\115\016\122\uffed\126\157\130\uffed" +
    "\131\uffed\132\uffed\001\002\000\102\003\uffed\006\uffed\021" +
    "\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\074\015\075\017\076\uffed\100\uffed\106\uffed" +
    "\110\uffed\111\005\112\006\114\uffed\115\016\122\uffed\126" +
    "\157\130\uffed\131\uffed\132\uffed\001\002\000\066\003\036" +
    "\006\042\021\173\030\u015e\036\044\037\043\040\163\041" +
    "\213\042\205\043\203\061\033\062\215\064\041\065\035" +
    "\066\045\067\030\072\200\076\166\100\214\106\167\110" +
    "\174\114\175\122\204\130\207\131\206\132\170\001\002" +
    "\000\016\002\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126" +
    "\ufff3\001\002\000\066\003\036\006\042\021\173\030\u0160" +
    "\036\044\037\043\040\163\041\213\042\205\043\203\061" +
    "\033\062\215\064\041\065\035\066\045\067\030\072\200" +
    "\076\166\100\214\106\167\110\174\114\175\122\204\130" +
    "\207\131\206\132\170\001\002\000\016\002\ufff7\074\ufff7" +
    "\111\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000\004\062" +
    "\u0165\001\002\000\016\002\ufff9\074\ufff9\111\ufff9\112\ufff9" +
    "\115\ufff9\126\ufff9\001\002\000\004\062\u0164\001\002\000" +
    "\004\006\145\001\002\000\004\006\u0151\001\002\000\004" +
    "\062\uff9d\001\002\000\004\062\uff9e\001\002\000\004\062" +
    "\uff9f\001\002\000\016\002\000\074\015\111\005\112\006" +
    "\115\016\126\u0163\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\u0143\014\010\024\013" +
    "\030\u0168\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u0160\024\u0161\001\001\000\004" +
    "\023\157\001\001\000\002\001\001\000\004\023\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\017\001\001\000\004\023\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\030\033\036\034" +
    "\031\035\033\037\026\001\001\000\004\016\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\030\033\036\034\031\035\033" +
    "\037\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\030\033\036" +
    "\034\101\001\001\000\010\022\030\033\036\034\100\001" +
    "\001\000\010\022\030\033\036\034\077\001\001\000\010" +
    "\022\030\033\036\034\060\001\001\000\002\001\001\000" +
    "\010\022\030\033\036\034\076\001\001\000\010\022\030" +
    "\033\036\034\074\001\001\000\010\022\030\033\036\034" +
    "\072\001\001\000\010\022\030\033\036\034\070\001\001" +
    "\000\010\022\030\033\036\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\030\033\036\034\031\035\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\030\033\036\034\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\030\033" +
    "\036\034\031\035\033\037\126\040\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\030\033\036\034" +
    "\031\035\033\037\127\001\001\000\004\016\104\001\001" +
    "\000\004\016\104\001\001\000\014\022\030\033\036\034" +
    "\031\035\033\037\134\001\001\000\002\001\001\000\014" +
    "\022\030\033\036\034\031\035\033\037\133\001\001\000" +
    "\004\016\104\001\001\000\004\016\104\001\001\000\002" +
    "\001\001\000\014\022\030\033\036\034\031\035\033\037" +
    "\137\001\001\000\004\016\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\145\025\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0145\001\001\000" +
    "\002\001\001\000\012\004\006\014\155\027\153\036\154" +
    "\001\001\000\010\004\u0143\014\155\036\u0142\001\001\000" +
    "\040\003\164\006\161\010\207\011\171\012\210\021\211" +
    "\022\030\026\175\032\200\033\036\034\031\035\033\037" +
    "\176\041\170\043\163\001\001\000\004\023\157\001\001" +
    "\000\004\023\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\030\033\036\034\031" +
    "\035\033\037\u0141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\030\033" +
    "\036\034\031\035\033\037\u0123\001\001\000\002\001\001" +
    "\000\004\022\355\001\001\000\002\001\001\000\004\016" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\030\033\036\034\031\035\033\037" +
    "\352\001\001\000\002\001\001\000\014\022\030\033\036" +
    "\034\031\035\033\037\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\030\033\036\034\031\035\033\037" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\030\033\036\034\031\035\033\037\233\001\001\000" +
    "\014\022\030\033\036\034\031\035\033\037\231\001\001" +
    "\000\014\022\030\033\036\034\031\035\033\037\227\001" +
    "\001\000\014\022\030\033\036\034\031\035\033\037\225" +
    "\001\001\000\016\022\030\032\222\033\036\034\031\035" +
    "\033\037\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\104\001\001\000\004\016\104\001\001\000" +
    "\002\001\001\000\004\016\104\001\001\000\002\001\001" +
    "\000\004\016\104\001\001\000\002\001\001\000\004\016" +
    "\104\001\001\000\002\001\001\000\004\036\236\001\001" +
    "\000\040\003\164\006\161\010\207\011\171\012\210\021" +
    "\211\022\030\026\175\032\200\033\036\034\031\035\033" +
    "\037\176\041\170\043\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\242\022\030\032\200\033\036" +
    "\034\031\035\033\037\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\104\001\001" +
    "\000\002\001\001\000\020\012\250\022\030\032\200\033" +
    "\036\034\031\035\033\037\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\253\001\001\000\040\003" +
    "\164\006\161\010\207\011\171\012\210\021\211\022\030" +
    "\026\175\032\200\033\036\034\031\035\033\037\176\041" +
    "\170\043\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\104\001\001" +
    "\000\010\022\265\033\270\050\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\265\033\270\050\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\265" +
    "\033\270\050\326\001\001\000\002\001\001\000\010\022" +
    "\265\033\270\050\325\001\001\000\010\022\265\033\270" +
    "\050\324\001\001\000\010\022\265\033\270\050\323\001" +
    "\001\000\010\022\265\033\270\050\303\001\001\000\002" +
    "\001\001\000\010\022\265\033\270\050\321\001\001\000" +
    "\010\022\265\033\270\050\317\001\001\000\010\022\265" +
    "\033\270\050\315\001\001\000\010\022\265\033\270\050" +
    "\313\001\001\000\010\022\265\033\270\050\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\030\033" +
    "\036\034\031\035\033\037\126\040\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\336\001\001\000\006\045\340\046\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\265\033\270\050\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\346\001\001\000" +
    "\040\003\164\006\161\010\207\011\171\012\210\021\211" +
    "\022\030\026\175\032\200\033\036\034\031\035\033\037" +
    "\176\041\170\043\163\001\001\000\002\001\001\000\004" +
    "\036\351\001\001\000\040\003\164\006\161\010\207\011" +
    "\171\012\210\021\211\022\030\026\175\032\200\033\036" +
    "\034\031\035\033\037\176\041\170\043\163\001\001\000" +
    "\004\016\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\365\022\030" +
    "\032\200\033\036\034\031\035\033\037\176\001\001\000" +
    "\004\036\u0117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\370\001\001\000\040\003" +
    "\164\006\161\010\207\011\171\012\210\021\211\022\030" +
    "\026\175\032\200\033\036\034\031\035\033\037\176\041" +
    "\170\043\163\001\001\000\004\007\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u0105\001\001\000" +
    "\002\001\001\000\020\012\377\022\030\032\200\033\036" +
    "\034\031\035\033\037\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u0102\001\001\000\040\003\164" +
    "\006\161\010\207\011\171\012\210\021\211\022\030\026" +
    "\175\032\200\033\036\034\031\035\033\037\176\041\170" +
    "\043\163\001\001\000\004\007\u0104\001\001\000\002\001" +
    "\001\000\040\003\164\006\161\010\207\011\171\012\210" +
    "\021\211\022\030\026\175\032\200\033\036\034\031\035" +
    "\033\037\176\041\170\043\163\001\001\000\002\001\001" +
    "\000\006\007\u010f\036\u010e\001\001\000\004\036\u0109\001" +
    "\001\000\040\003\164\006\161\010\207\011\171\012\210" +
    "\021\211\022\030\026\175\032\200\033\036\034\031\035" +
    "\033\037\176\041\170\043\163\001\001\000\004\007\u010d" +
    "\001\001\000\004\007\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\164\006\161\010\207\011\171" +
    "\012\210\021\211\022\030\026\175\032\200\033\036\034" +
    "\031\035\033\037\176\041\170\043\163\001\001\000\002" +
    "\001\001\000\004\007\u0111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u0114\001\001\000\040\003\164" +
    "\006\161\010\207\011\171\012\210\021\211\022\030\026" +
    "\175\032\200\033\036\034\031\035\033\037\176\041\170" +
    "\043\163\001\001\000\004\007\u0116\001\001\000\002\001" +
    "\001\000\040\003\164\006\161\010\207\011\171\012\210" +
    "\021\211\022\030\026\175\032\200\033\036\034\031\035" +
    "\033\037\176\041\170\043\163\001\001\000\004\007\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u011c\001\001\000\040\003\164\006\161\010\207\011\171" +
    "\012\210\021\211\022\030\026\175\032\200\033\036\034" +
    "\031\035\033\037\176\041\170\043\163\001\001\000\004" +
    "\007\u011e\001\001\000\002\001\001\000\004\036\u0120\001" +
    "\001\000\040\003\164\006\161\010\207\011\171\012\210" +
    "\021\211\022\030\026\175\032\200\033\036\034\031\035" +
    "\033\037\176\041\170\043\163\001\001\000\004\007\u0122" +
    "\001\001\000\002\001\001\000\004\016\104\001\001\000" +
    "\022\012\u0127\022\030\032\200\033\036\034\031\035\033" +
    "\037\176\051\u0125\001\001\000\002\001\001\000\020\012" +
    "\u0128\022\030\032\200\033\036\034\031\035\033\037\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\u012e\022\030\032\200\033\036\034\031\035\033\037\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\u0131" +
    "\005\u0133\012\u0134\013\u0130\014\155\022\030\032\200\033" +
    "\036\034\031\035\033\037\176\001\001\000\002\001\001" +
    "\000\022\005\u0139\012\u0134\022\030\032\200\033\036\034" +
    "\031\035\033\037\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\u0136\012\u0134\022" +
    "\030\032\200\033\036\034\031\035\033\037\176\001\001" +
    "\000\002\001\001\000\022\005\u0138\012\u0134\022\030\032" +
    "\200\033\036\034\031\035\033\037\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\u013b\012\u0134\022" +
    "\030\032\200\033\036\034\031\035\033\037\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\u013e\001" +
    "\001\000\040\003\164\006\161\010\207\011\171\012\210" +
    "\021\211\022\030\026\175\032\200\033\036\034\031\035" +
    "\033\037\176\041\170\043\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\104\001\001\000\040\003" +
    "\164\006\161\010\207\011\171\012\210\021\211\022\030" +
    "\026\175\032\200\033\036\034\031\035\033\037\176\041" +
    "\170\043\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\006\014" +
    "\155\027\u0148\036\u0149\001\001\000\010\004\u0143\014\155" +
    "\036\u014b\001\001\000\040\003\164\006\161\010\207\011" +
    "\171\012\210\021\211\022\030\026\175\032\200\033\036" +
    "\034\031\035\033\037\176\041\170\043\163\001\001\000" +
    "\002\001\001\000\040\003\164\006\161\010\207\011\171" +
    "\012\210\021\211\022\030\026\175\032\200\033\036\034" +
    "\031\035\033\037\176\041\170\043\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\145\025\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\006\014" +
    "\155\027\u0155\036\u0156\001\001\000\010\004\u0143\014\155" +
    "\036\u0158\001\001\000\040\003\164\006\161\010\207\011" +
    "\171\012\210\021\211\022\030\026\175\032\200\033\036" +
    "\034\031\035\033\037\176\041\170\043\163\001\001\000" +
    "\002\001\001\000\040\003\164\006\161\010\207\011\171" +
    "\012\210\021\211\022\030\026\175\032\200\033\036\034" +
    "\031\035\033\037\176\041\170\043\163\001\001\000\002" +
    "\001\001\000\012\004\006\014\155\027\u015b\036\u015c\001" +
    "\001\000\010\004\u0143\014\155\036\u015e\001\001\000\040" +
    "\003\164\006\161\010\207\011\171\012\210\021\211\022" +
    "\030\026\175\032\200\033\036\034\031\035\033\037\176" +
    "\041\170\043\163\001\001\000\002\001\001\000\040\003" +
    "\164\006\161\010\207\011\171\012\210\021\211\022\030" +
    "\026\175\032\200\033\036\034\031\035\033\037\176\041" +
    "\170\043\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\u0160\024\u0161\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado.";
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTROL_STATEMENT ::= RETURN LITERALES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTROL_STATEMENT ::= RETURN IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ESTRUCTURA_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESTRUCTURA_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ESTRUCTURA_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURA_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ESTRUCTURA_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESTRUCTURA_IF ::= IF error LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESTRUCTURA_IF ::= IF error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS error ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN error ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en las llaves del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_FOR ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE_STMT ::= CASE EXPRESIONES_NUMERICAS COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTA_EXPRESIONES ::= COMMA EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARGUMENTOS ::= ARGUMENTOS error EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARGUMENTOS ::= ARGUMENTOS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARGUMENTOS ::= COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION_ARITMETICA ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION_ARITMETICA ::= error TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION_ARITMETICA ::= error DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION_ARITMETICA ::= error PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION_ARITMETICA ::= error MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESIONES_NUMERICAS ::= error PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESIONES_NUMERICAS ::= error MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESIONES_NUMERICAS ::= error TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESIONES_NUMERICAS ::= error DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESIONES_NUMERICAS ::= error MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESIONES_NUMERICAS ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INCREMENTO_DECREMENTO ::= DEC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INCREMENTO_DECREMENTO ::= INC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPRESION_ASIGNACION ::= PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPRESION_ASIGNACION ::= MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPRESION_ASIGNACION ::= TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPRESION_ASIGNACION ::= DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPRESION_ASIGNACION ::= ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
