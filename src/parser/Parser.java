
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\027\003" +
    "\000\002\027\004\000\002\027\004\000\002\030\003\000" +
    "\002\030\004\000\002\024\013\000\002\024\012\000\002" +
    "\024\012\000\002\024\013\000\002\024\012\000\002\024" +
    "\011\000\002\024\011\000\002\024\012\000\002\025\004" +
    "\000\002\025\006\000\002\036\004\000\002\036\002\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\023\005\000\002\023\007\000\002\023\005\000\002\023" +
    "\003\000\002\006\012\000\002\012\003\000\002\012\003" +
    "\000\002\037\005\000\002\037\003\000\002\035\005\000" +
    "\002\035\003\000\002\007\013\000\002\007\006\000\002" +
    "\007\002\000\002\010\011\000\002\041\013\000\002\011" +
    "\011\000\002\013\006\000\002\013\007\000\002\005\003" +
    "\000\002\005\002\000\002\043\012\000\002\043\011\000" +
    "\002\044\004\000\002\044\002\000\002\047\006\000\002" +
    "\046\005\000\002\021\007\000\002\021\006\000\002\021" +
    "\007\000\002\053\003\000\002\053\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\040\003\000\002\040\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\034\006\000" +
    "\002\034\005\000\002\034\003\000\002\034\003\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\003" +
    "\000\002\052\006\000\002\052\005\000\002\052\003\000" +
    "\002\052\003\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\022\002\ufffd\003\014\074\016\075\017\111" +
    "\005\112\006\115\020\126\013\001\002\000\020\002\ufffe" +
    "\074\016\075\017\111\005\112\006\115\020\126\013\001" +
    "\002\000\010\062\uffbb\112\u010f\115\u010e\001\002\000\006" +
    "\062\uffb9\111\u010d\001\002\000\070\002\ufffc\006\ufffc\030" +
    "\ufffc\036\ufffc\037\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\100" +
    "\ufffc\106\ufffc\110\ufffc\111\ufffc\112\ufffc\114\ufffc\115\ufffc" +
    "\122\ufffc\126\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002\000" +
    "\016\002\uffff\074\016\111\005\112\006\115\020\126\u010a" +
    "\001\002\000\004\062\367\001\002\000\004\002\366\001" +
    "\002\000\004\062\116\001\002\000\004\024\115\001\002" +
    "\000\016\002\ufff9\074\ufff9\111\ufff9\112\ufff9\115\ufff9\126" +
    "\ufff9\001\002\000\004\062\uffba\001\002\000\012\074\016" +
    "\111\005\112\006\115\020\001\002\000\006\062\uffb8\111" +
    "\021\001\002\000\004\062\uffb4\001\002\000\004\062\023" +
    "\001\002\000\010\015\uffd8\021\113\024\uffd8\001\002\000" +
    "\006\015\025\024\026\001\002\000\004\062\027\001\002" +
    "\000\072\002\uffdd\006\uffdd\024\uffdd\030\uffdd\036\uffdd\037" +
    "\uffdd\061\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\072\uffdd\074\uffdd\075\uffdd\076\uffdd\100\uffdd\106\uffdd\110" +
    "\uffdd\111\uffdd\112\uffdd\114\uffdd\115\uffdd\122\uffdd\126\uffdd" +
    "\130\uffdd\131\uffdd\132\uffdd\001\002\000\010\015\uffdb\021" +
    "\030\024\uffdb\001\002\000\024\006\044\036\045\037\043" +
    "\061\035\062\041\064\042\065\037\066\046\067\032\001" +
    "\002\000\014\013\055\015\uffda\024\uffda\034\054\035\052" +
    "\001\002\000\046\004\uff9b\005\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\015\uff9b\017\uff9b\020\uff9b\023\uff9b" +
    "\024\uff9b\034\uff9b\035\uff9b\054\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\001\002\000\044\004\uff8f\005\uff8f\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\013\uff8f\015\uff8f\017\uff8f\020\uff8f\024" +
    "\uff8f\034\uff8f\035\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\001\002\000\044\004\070\005\073\007\uffd1\010\071\011" +
    "\072\012\067\013\uffd1\015\uffd1\017\uffd1\020\uffd1\024\uffd1" +
    "\034\uffd1\035\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\001" +
    "\002\000\046\004\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\015\uff9f\017\uff9f\020\uff9f\023\uff9f\024" +
    "\uff9f\034\uff9f\035\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\001\002\000\032\007\uffd3\013\uffd3\015\uffd3\017\057\020" +
    "\063\024\uffd3\034\uffd3\035\uffd3\054\062\055\060\056\061" +
    "\057\064\001\002\000\046\004\uff9d\005\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\017\uff9d\020\uff9d" +
    "\023\uff9d\024\uff9d\034\uff9d\035\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\001\002\000\044\004\uff8e\005\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e\020" +
    "\uff8e\024\uff8e\034\uff8e\035\uff8e\054\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\001\002\000\052\004\uff92\005\uff92\006\104\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\015\uff92\017\uff92" +
    "\020\uff92\024\uff92\034\uff92\035\uff92\036\102\037\103\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\001\002\000\046\004\uff9e" +
    "\005\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015" +
    "\uff9e\017\uff9e\020\uff9e\023\uff9e\024\uff9e\034\uff9e\035\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002\000\004\062" +
    "\101\001\002\000\024\006\044\036\045\037\043\061\035" +
    "\062\041\064\042\065\037\066\046\067\032\001\002\000" +
    "\004\062\047\001\002\000\046\004\uff9c\005\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\017\uff9c\020" +
    "\uff9c\023\uff9c\024\uff9c\034\uff9c\035\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\001\002\000\046\004\uff80\005\uff80\007" +
    "\uff80\010\uff80\011\uff80\012\uff80\013\uff80\015\uff80\017\uff80" +
    "\020\uff80\023\uff80\024\uff80\034\uff80\035\uff80\054\uff80\055" +
    "\uff80\056\uff80\057\uff80\001\002\000\012\007\051\013\055" +
    "\034\054\035\052\001\002\000\044\004\uff93\005\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\015\uff93\017\uff93" +
    "\020\uff93\024\uff93\034\uff93\035\uff93\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\001\002\000\024\006\uffad\036\uffad\037\uffad" +
    "\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad\001" +
    "\002\000\024\006\044\036\045\037\043\061\035\062\041" +
    "\064\042\065\037\066\046\067\032\001\002\000\024\006" +
    "\uffac\036\uffac\037\uffac\061\uffac\062\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\001\002\000\024\006\uffab\036\uffab\037" +
    "\uffab\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab\067\uffab" +
    "\001\002\000\032\007\uffd4\013\uffd4\015\uffd4\017\057\020" +
    "\063\024\uffd4\034\uffd4\035\uffd4\054\062\055\060\056\061" +
    "\057\064\001\002\000\024\006\uffb1\036\uffb1\037\uffb1\061" +
    "\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\001\002" +
    "\000\024\006\uffb3\036\uffb3\037\uffb3\061\uffb3\062\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\001\002\000\024\006\uffaf" +
    "\036\uffaf\037\uffaf\061\uffaf\062\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\001\002\000\024\006\uffb2\036\uffb2\037\uffb2" +
    "\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001" +
    "\002\000\024\006\uffb0\036\uffb0\037\uffb0\061\uffb0\062\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\001\002\000\024\006" +
    "\uffae\036\uffae\037\uffae\061\uffae\062\uffae\064\uffae\065\uffae" +
    "\066\uffae\067\uffae\001\002\000\024\006\044\036\045\037" +
    "\043\061\035\062\041\064\042\065\037\066\046\067\032" +
    "\001\002\000\044\004\070\005\073\007\uffd2\010\071\011" +
    "\072\012\067\013\uffd2\015\uffd2\017\uffd2\020\uffd2\024\uffd2" +
    "\034\uffd2\035\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\001" +
    "\002\000\024\006\044\036\045\037\043\061\035\062\041" +
    "\064\042\065\037\066\046\067\032\001\002\000\024\006" +
    "\044\036\045\037\043\061\035\062\041\064\042\065\037" +
    "\066\046\067\032\001\002\000\024\006\044\036\045\037" +
    "\043\061\035\062\041\064\042\065\037\066\046\067\032" +
    "\001\002\000\024\006\044\036\045\037\043\061\035\062" +
    "\041\064\042\065\037\066\046\067\032\001\002\000\024" +
    "\006\044\036\045\037\043\061\035\062\041\064\042\065" +
    "\037\066\046\067\032\001\002\000\044\004\uff96\005\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\015\uff96\017" +
    "\uff96\020\uff96\024\uff96\034\uff96\035\uff96\054\uff96\055\uff96" +
    "\056\uff96\057\uff96\001\002\000\044\004\uff95\005\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\015\uff95\017\uff95" +
    "\020\uff95\024\uff95\034\uff95\035\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\001\002\000\044\004\uff97\005\073\007\uff97" +
    "\010\uff97\011\072\012\067\013\uff97\015\uff97\017\uff97\020" +
    "\uff97\024\uff97\034\uff97\035\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\001\002\000\044\004\uff98\005\073\007\uff98\010" +
    "\uff98\011\072\012\067\013\uff98\015\uff98\017\uff98\020\uff98" +
    "\024\uff98\034\uff98\035\uff98\054\uff98\055\uff98\056\uff98\057" +
    "\uff98\001\002\000\044\004\uff94\005\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\015\uff94\017\uff94\020\uff94\024" +
    "\uff94\034\uff94\035\uff94\054\uff94\055\uff94\056\uff94\057\uff94" +
    "\001\002\000\046\004\uff7f\005\uff7f\007\uff7f\010\uff7f\011" +
    "\uff7f\012\uff7f\013\uff7f\015\uff7f\017\uff7f\020\uff7f\023\uff7f" +
    "\024\uff7f\034\uff7f\035\uff7f\054\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\001\002\000\046\004\uff82\005\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\015\uff82\017\uff82\020\uff82\023" +
    "\uff82\024\uff82\034\uff82\035\uff82\054\uff82\055\uff82\056\uff82" +
    "\057\uff82\001\002\000\046\004\uff81\005\uff81\007\uff81\010" +
    "\uff81\011\uff81\012\uff81\013\uff81\015\uff81\017\uff81\020\uff81" +
    "\023\uff81\024\uff81\034\uff81\035\uff81\054\uff81\055\uff81\056" +
    "\uff81\057\uff81\001\002\000\026\006\044\007\106\036\045" +
    "\037\043\061\035\062\041\064\042\065\037\066\046\067" +
    "\032\001\002\000\014\007\uff9a\013\055\015\uff9a\034\054" +
    "\035\052\001\002\000\044\004\uff90\005\uff90\007\uff90\010" +
    "\uff90\011\uff90\012\uff90\013\uff90\015\uff90\017\uff90\020\uff90" +
    "\024\uff90\034\uff90\035\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\001\002\000\006\007\111\015\110\001\002\000\024" +
    "\006\044\036\045\037\043\061\035\062\041\064\042\065" +
    "\037\066\046\067\032\001\002\000\044\004\uff91\005\uff91" +
    "\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\015\uff91\017" +
    "\uff91\020\uff91\024\uff91\034\uff91\035\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\001\002\000\014\007\uff99\013\055\015" +
    "\uff99\034\054\035\052\001\002\000\024\006\044\036\045" +
    "\037\043\061\035\062\041\064\042\065\037\066\046\067" +
    "\032\001\002\000\014\013\055\015\uffd9\024\uffd9\034\054" +
    "\035\052\001\002\000\070\002\ufffa\006\ufffa\030\ufffa\036" +
    "\ufffa\037\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\072\ufffa\074\ufffa\075\ufffa\076\ufffa\100\ufffa\106" +
    "\ufffa\110\ufffa\111\ufffa\112\ufffa\114\ufffa\115\ufffa\122\ufffa" +
    "\126\ufffa\130\ufffa\131\ufffa\132\ufffa\001\002\000\012\006" +
    "\121\015\uffd8\021\113\024\uffd8\001\002\000\006\015\025" +
    "\024\120\001\002\000\072\002\uffdc\006\uffdc\024\uffdc\030" +
    "\uffdc\036\uffdc\037\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\074\uffdc\075\uffdc\076\uffdc\100" +
    "\uffdc\106\uffdc\110\uffdc\111\uffdc\112\uffdc\114\uffdc\115\uffdc" +
    "\122\uffdc\126\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000" +
    "\014\007\123\074\016\111\005\112\006\115\020\001\002" +
    "\000\004\062\365\001\002\000\004\027\357\001\002\000" +
    "\006\007\126\015\125\001\002\000\012\074\016\111\005" +
    "\112\006\115\020\001\002\000\004\027\127\001\002\000" +
    "\070\003\014\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec" +
    "\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\074" +
    "\016\075\017\076\uffec\100\uffec\106\uffec\110\uffec\111\005" +
    "\112\006\114\uffec\115\020\122\uffec\126\133\130\uffec\131" +
    "\uffec\132\uffec\001\002\000\066\006\uffec\030\uffec\036\uffec" +
    "\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\072\uffec\074\016\075\017\076\uffec\100\uffec\106\uffec" +
    "\110\uffec\111\005\112\006\114\uffec\115\020\122\uffec\126" +
    "\133\130\uffec\131\uffec\132\uffec\001\002\000\052\006\044" +
    "\030\141\036\045\037\043\061\035\062\144\064\042\065" +
    "\037\066\046\067\032\072\156\076\137\100\152\106\161" +
    "\110\147\114\143\122\146\130\140\131\136\132\151\001" +
    "\002\000\004\062\023\001\002\000\004\062\023\001\002" +
    "\000\006\015\025\024\135\001\002\000\072\002\uffde\006" +
    "\uffde\024\uffde\030\uffde\036\uffde\037\uffde\061\uffde\062\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\072\uffde\074\uffde\075" +
    "\uffde\076\uffde\100\uffde\106\uffde\110\uffde\111\uffde\112\uffde" +
    "\114\uffde\115\uffde\122\uffde\126\uffde\130\uffde\131\uffde\132" +
    "\uffde\001\002\000\004\006\344\001\002\000\004\024\343" +
    "\001\002\000\004\006\335\001\002\000\016\002\ufff0\074" +
    "\ufff0\111\ufff0\112\ufff0\115\ufff0\126\ufff0\001\002\000\056" +
    "\006\uffed\030\uffed\036\uffed\037\uffed\061\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\072\uffed\073\uffed\076\uffed" +
    "\077\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130" +
    "\uffed\131\uffed\132\uffed\001\002\000\020\024\330\061\035" +
    "\062\332\064\042\065\037\066\046\067\032\001\002\000" +
    "\064\004\uff92\005\uff92\006\104\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\015\uff92\017\uff92\020\uff92\021\321\024" +
    "\uff92\034\uff92\035\uff92\036\102\037\103\040\317\041\316" +
    "\042\320\043\315\054\uff92\055\uff92\056\uff92\057\uff92\001" +
    "\002\000\056\006\uffe7\030\uffe7\036\uffe7\037\uffe7\061\uffe7" +
    "\062\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\072\uffe7\073" +
    "\uffe7\076\uffe7\077\uffe7\100\uffe7\106\uffe7\110\uffe7\114\uffe7" +
    "\122\uffe7\130\uffe7\131\uffe7\132\uffe7\001\002\000\004\006" +
    "\251\001\002\000\004\006\226\001\002\000\056\006\uffe8" +
    "\030\uffe8\036\uffe8\037\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077\uffe8" +
    "\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\004\006\217\001\002\000\004" +
    "\027\207\001\002\000\010\007\uffd6\015\uffd6\024\uffd6\001" +
    "\002\000\056\006\uffe6\030\uffe6\036\uffe6\037\uffe6\061\uffe6" +
    "\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\106\uffe6\110\uffe6\114\uffe6" +
    "\122\uffe6\130\uffe6\131\uffe6\132\uffe6\001\002\000\056\006" +
    "\uffea\030\uffea\036\uffea\037\uffea\061\uffea\062\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\072\uffea\073\uffea\076\uffea\077" +
    "\uffea\100\uffea\106\uffea\110\uffea\114\uffea\122\uffea\130\uffea" +
    "\131\uffea\132\uffea\001\002\000\004\024\206\001\002\000" +
    "\056\006\uffe9\030\uffe9\036\uffe9\037\uffe9\061\uffe9\062\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072\uffe9\073\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\106\uffe9\110\uffe9\114\uffe9\122\uffe9" +
    "\130\uffe9\131\uffe9\132\uffe9\001\002\000\004\024\205\001" +
    "\002\000\004\006\165\001\002\000\016\007\uffd5\013\055" +
    "\015\uffd5\024\uffd5\034\054\035\052\001\002\000\056\006" +
    "\uffe5\030\uffe5\036\uffe5\037\uffe5\061\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\072\uffe5\073\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\106\uffe5\110\uffe5\114\uffe5\122\uffe5\130\uffe5" +
    "\131\uffe5\132\uffe5\001\002\000\056\006\uffeb\030\uffeb\036" +
    "\uffeb\037\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\072\uffeb\073\uffeb\076\uffeb\077\uffeb\100\uffeb\106" +
    "\uffeb\110\uffeb\114\uffeb\122\uffeb\130\uffeb\131\uffeb\132\uffeb" +
    "\001\002\000\042\006\044\024\uffc7\036\045\037\043\061" +
    "\035\062\144\064\042\065\037\066\046\067\032\074\016" +
    "\075\017\111\005\112\006\115\020\126\133\001\002\000" +
    "\004\007\201\001\002\000\026\006\044\024\uffc7\036\045" +
    "\037\043\061\035\062\144\064\042\065\037\066\046\067" +
    "\032\001\002\000\004\024\172\001\002\000\006\007\uffc8" +
    "\024\uffc8\001\002\000\026\006\044\024\uffc7\036\045\037" +
    "\043\061\035\062\144\064\042\065\037\066\046\067\032" +
    "\001\002\000\004\024\174\001\002\000\026\006\044\007" +
    "\uffc7\036\045\037\043\061\035\062\144\064\042\065\037" +
    "\066\046\067\032\001\002\000\004\007\uffc9\001\002\000" +
    "\004\024\177\001\002\000\026\006\044\007\uffc7\036\045" +
    "\037\043\061\035\062\144\064\042\065\037\066\046\067" +
    "\032\001\002\000\004\007\uffca\001\002\000\004\027\202" +
    "\001\002\000\052\006\uffec\030\uffec\036\uffec\037\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130" +
    "\uffec\131\uffec\132\uffec\001\002\000\052\006\044\030\204" +
    "\036\045\037\043\061\035\062\144\064\042\065\037\066" +
    "\046\067\032\072\156\076\137\100\152\106\161\110\147" +
    "\114\143\122\146\130\140\131\136\132\151\001\002\000" +
    "\056\006\uffcb\030\uffcb\036\uffcb\037\uffcb\061\uffcb\062\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb\073\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\106\uffcb\110\uffcb\114\uffcb\122\uffcb" +
    "\130\uffcb\131\uffcb\132\uffcb\001\002\000\056\006\uffe4\030" +
    "\uffe4\036\uffe4\037\uffe4\061\uffe4\062\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\072\uffe4\073\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\106\uffe4\110\uffe4\114\uffe4\122\uffe4\130\uffe4\131\uffe4" +
    "\132\uffe4\001\002\000\056\006\uffe3\030\uffe3\036\uffe3\037" +
    "\uffe3\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\072\uffe3\073\uffe3\076\uffe3\077\uffe3\100\uffe3\106\uffe3\110" +
    "\uffe3\114\uffe3\122\uffe3\130\uffe3\131\uffe3\132\uffe3\001\002" +
    "\000\052\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062" +
    "\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\076\uffec" +
    "\100\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130\uffec\131" +
    "\uffec\132\uffec\001\002\000\052\006\044\030\211\036\045" +
    "\037\043\061\035\062\144\064\042\065\037\066\046\067" +
    "\032\072\156\076\137\100\152\106\161\110\147\114\143" +
    "\122\146\130\140\131\136\132\151\001\002\000\004\130" +
    "\212\001\002\000\004\006\213\001\002\000\024\006\044" +
    "\036\045\037\043\061\035\062\144\064\042\065\037\066" +
    "\046\067\032\001\002\000\004\007\215\001\002\000\004" +
    "\024\216\001\002\000\056\006\uffcc\030\uffcc\036\uffcc\037" +
    "\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\072\uffcc\073\uffcc\076\uffcc\077\uffcc\100\uffcc\106\uffcc\110" +
    "\uffcc\114\uffcc\122\uffcc\130\uffcc\131\uffcc\132\uffcc\001\002" +
    "\000\024\006\044\036\045\037\043\061\035\062\144\064" +
    "\042\065\037\066\046\067\032\001\002\000\006\007\uffbd" +
    "\015\uffbd\001\002\000\006\007\223\015\222\001\002\000" +
    "\024\006\044\036\045\037\043\061\035\062\144\064\042" +
    "\065\037\066\046\067\032\001\002\000\004\024\224\001" +
    "\002\000\056\006\uffbe\030\uffbe\036\uffbe\037\uffbe\061\uffbe" +
    "\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\072\uffbe\073" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\106\uffbe\110\uffbe\114\uffbe" +
    "\122\uffbe\130\uffbe\131\uffbe\132\uffbe\001\002\000\006\007" +
    "\uffbc\015\uffbc\001\002\000\024\006\044\036\045\037\043" +
    "\061\035\062\144\064\042\065\037\066\046\067\032\001" +
    "\002\000\004\007\230\001\002\000\004\027\231\001\002" +
    "\000\052\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062" +
    "\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\076\uffec" +
    "\100\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130\uffec\131" +
    "\uffec\132\uffec\001\002\000\052\006\044\030\233\036\045" +
    "\037\043\061\035\062\144\064\042\065\037\066\046\067" +
    "\032\072\156\076\137\100\152\106\161\110\147\114\143" +
    "\122\146\130\140\131\136\132\151\001\002\000\060\006" +
    "\uffce\030\uffce\036\uffce\037\uffce\061\uffce\062\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\072\uffce\073\uffce\076\uffce\077" +
    "\uffce\100\uffce\102\234\106\uffce\110\uffce\114\uffce\122\uffce" +
    "\130\uffce\131\uffce\132\uffce\001\002\000\006\027\236\110" +
    "\237\001\002\000\056\006\uffd7\030\uffd7\036\uffd7\037\uffd7" +
    "\061\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072" +
    "\uffd7\073\uffd7\076\uffd7\077\uffd7\100\uffd7\106\uffd7\110\uffd7" +
    "\114\uffd7\122\uffd7\130\uffd7\131\uffd7\132\uffd7\001\002\000" +
    "\052\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\076\uffec\100" +
    "\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130\uffec\131\uffec" +
    "\132\uffec\001\002\000\004\006\240\001\002\000\024\006" +
    "\044\036\045\037\043\061\035\062\144\064\042\065\037" +
    "\066\046\067\032\001\002\000\004\007\242\001\002\000" +
    "\004\027\243\001\002\000\052\006\uffec\030\uffec\036\uffec" +
    "\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec" +
    "\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\052\006" +
    "\044\030\245\036\045\037\043\061\035\062\144\064\042" +
    "\065\037\066\046\067\032\072\156\076\137\100\152\106" +
    "\161\110\147\114\143\122\146\130\140\131\136\132\151" +
    "\001\002\000\060\006\uffce\030\uffce\036\uffce\037\uffce\061" +
    "\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce\072\uffce" +
    "\073\uffce\076\uffce\077\uffce\100\uffce\102\234\106\uffce\110" +
    "\uffce\114\uffce\122\uffce\130\uffce\131\uffce\132\uffce\001\002" +
    "\000\056\006\uffd0\030\uffd0\036\uffd0\037\uffd0\061\uffd0\062" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\072\uffd0\073\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\106\uffd0\110\uffd0\114\uffd0\122" +
    "\uffd0\130\uffd0\131\uffd0\132\uffd0\001\002\000\052\006\044" +
    "\030\250\036\045\037\043\061\035\062\144\064\042\065" +
    "\037\066\046\067\032\072\156\076\137\100\152\106\161" +
    "\110\147\114\143\122\146\130\140\131\136\132\151\001" +
    "\002\000\056\006\uffcf\030\uffcf\036\uffcf\037\uffcf\061\uffcf" +
    "\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\072\uffcf\073" +
    "\uffcf\076\uffcf\077\uffcf\100\uffcf\106\uffcf\110\uffcf\114\uffcf" +
    "\122\uffcf\130\uffcf\131\uffcf\132\uffcf\001\002\000\024\006" +
    "\256\036\045\037\043\061\035\062\255\064\042\065\037" +
    "\066\046\067\032\001\002\000\020\004\uff84\005\uff84\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\023\uff84\001\002\000\016" +
    "\004\262\005\265\007\277\010\263\011\264\012\260\001" +
    "\002\000\020\004\uff83\005\uff83\007\uff83\010\uff83\011\uff83" +
    "\012\uff83\023\uff83\001\002\000\026\004\uff87\005\uff87\006" +
    "\273\007\uff87\010\uff87\011\uff87\012\uff87\023\uff87\036\102" +
    "\037\103\001\002\000\024\006\256\036\045\037\043\061" +
    "\035\062\255\064\042\065\037\066\046\067\032\001\002" +
    "\000\016\004\262\005\265\007\261\010\263\011\264\012" +
    "\260\001\002\000\024\006\256\036\045\037\043\061\035" +
    "\062\255\064\042\065\037\066\046\067\032\001\002\000" +
    "\020\004\uff88\005\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\023\uff88\001\002\000\024\006\256\036\045\037\043\061" +
    "\035\062\255\064\042\065\037\066\046\067\032\001\002" +
    "\000\024\006\256\036\045\037\043\061\035\062\255\064" +
    "\042\065\037\066\046\067\032\001\002\000\024\006\256" +
    "\036\045\037\043\061\035\062\255\064\042\065\037\066" +
    "\046\067\032\001\002\000\024\006\256\036\045\037\043" +
    "\061\035\062\255\064\042\065\037\066\046\067\032\001" +
    "\002\000\020\004\uff8b\005\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\023\uff8b\001\002\000\020\004\uff8a\005\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\023\uff8a\001\002\000\020" +
    "\004\uff8c\005\265\007\uff8c\010\uff8c\011\264\012\260\023" +
    "\uff8c\001\002\000\020\004\uff8d\005\265\007\uff8d\010\uff8d" +
    "\011\264\012\260\023\uff8d\001\002\000\020\004\uff89\005" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\023\uff89\001\002" +
    "\000\026\006\044\007\274\036\045\037\043\061\035\062" +
    "\041\064\042\065\037\066\046\067\032\001\002\000\020" +
    "\004\uff85\005\uff85\007\uff85\010\uff85\011\uff85\012\uff85\023" +
    "\uff85\001\002\000\006\007\276\015\110\001\002\000\020" +
    "\004\uff86\005\uff86\007\uff86\010\uff86\011\uff86\012\uff86\023" +
    "\uff86\001\002\000\004\027\300\001\002\000\010\030\uffc3" +
    "\073\uffc3\077\uffc3\001\002\000\010\030\306\073\305\077" +
    "\302\001\002\000\004\023\313\001\002\000\004\030\312" +
    "\001\002\000\010\030\uffc4\073\uffc4\077\uffc4\001\002\000" +
    "\024\006\256\036\045\037\043\061\035\062\255\064\042" +
    "\065\037\066\046\067\032\001\002\000\056\006\uffc5\030" +
    "\uffc5\036\uffc5\037\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\072\uffc5\073\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\106\uffc5\110\uffc5\114\uffc5\122\uffc5\130\uffc5\131\uffc5" +
    "\132\uffc5\001\002\000\016\004\262\005\265\010\263\011" +
    "\264\012\260\023\310\001\002\000\056\006\uffec\030\uffec" +
    "\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\072\uffec\073\uffec\076\uffec\077\uffec\100\uffec" +
    "\106\uffec\110\uffec\114\uffec\122\uffec\130\uffec\131\uffec\132" +
    "\uffec\001\002\000\056\006\044\030\uffc2\036\045\037\043" +
    "\061\035\062\144\064\042\065\037\066\046\067\032\072" +
    "\156\073\uffc2\076\137\077\uffc2\100\152\106\161\110\147" +
    "\114\143\122\146\130\140\131\136\132\151\001\002\000" +
    "\056\006\uffc6\030\uffc6\036\uffc6\037\uffc6\061\uffc6\062\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6\073\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\106\uffc6\110\uffc6\114\uffc6\122\uffc6" +
    "\130\uffc6\131\uffc6\132\uffc6\001\002\000\052\006\uffec\030" +
    "\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110" +
    "\uffec\114\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002" +
    "\000\052\006\044\030\uffc1\036\045\037\043\061\035\062" +
    "\144\064\042\065\037\066\046\067\032\072\156\076\137" +
    "\100\152\106\161\110\147\114\143\122\146\130\140\131" +
    "\136\132\151\001\002\000\024\006\044\036\045\037\043" +
    "\061\035\062\041\064\042\065\037\066\046\067\032\001" +
    "\002\000\024\006\044\036\045\037\043\061\035\062\041" +
    "\064\042\065\037\066\046\067\032\001\002\000\024\006" +
    "\044\036\045\037\043\061\035\062\041\064\042\065\037" +
    "\066\046\067\032\001\002\000\024\006\044\036\045\037" +
    "\043\061\035\062\041\064\042\065\037\066\046\067\032" +
    "\001\002\000\024\006\044\036\045\037\043\061\035\062" +
    "\144\064\042\065\037\066\046\067\032\001\002\000\016" +
    "\007\uff7a\013\055\015\uff7a\024\uff7a\034\054\035\052\001" +
    "\002\000\010\007\uff79\015\uff79\024\uff79\001\002\000\016" +
    "\007\uff7c\013\055\015\uff7c\024\uff7c\034\054\035\052\001" +
    "\002\000\016\007\uff7e\013\055\015\uff7e\024\uff7e\034\054" +
    "\035\052\001\002\000\016\007\uff7d\013\055\015\uff7d\024" +
    "\uff7d\034\054\035\052\001\002\000\016\007\uff7b\013\055" +
    "\015\uff7b\024\uff7b\034\054\035\052\001\002\000\056\006" +
    "\uffdf\030\uffdf\036\uffdf\037\uffdf\061\uffdf\062\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\072\uffdf\073\uffdf\076\uffdf\077" +
    "\uffdf\100\uffdf\106\uffdf\110\uffdf\114\uffdf\122\uffdf\130\uffdf" +
    "\131\uffdf\132\uffdf\001\002\000\004\024\334\001\002\000" +
    "\004\024\333\001\002\000\056\006\uffe0\030\uffe0\036\uffe0" +
    "\037\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0" +
    "\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001" +
    "\002\000\056\006\uffe1\030\uffe1\036\uffe1\037\uffe1\061\uffe1" +
    "\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\072\uffe1\073" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\106\uffe1\110\uffe1\114\uffe1" +
    "\122\uffe1\130\uffe1\131\uffe1\132\uffe1\001\002\000\024\006" +
    "\044\036\045\037\043\061\035\062\144\064\042\065\037" +
    "\066\046\067\032\001\002\000\004\007\337\001\002\000" +
    "\004\027\340\001\002\000\052\006\uffec\030\uffec\036\uffec" +
    "\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec" +
    "\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\052\006" +
    "\044\030\342\036\045\037\043\061\035\062\144\064\042" +
    "\065\037\066\046\067\032\072\156\076\137\100\152\106" +
    "\161\110\147\114\143\122\146\130\140\131\136\132\151" +
    "\001\002\000\056\006\uffcd\030\uffcd\036\uffcd\037\uffcd\061" +
    "\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\072\uffcd" +
    "\073\uffcd\076\uffcd\077\uffcd\100\uffcd\106\uffcd\110\uffcd\114" +
    "\uffcd\122\uffcd\130\uffcd\131\uffcd\132\uffcd\001\002\000\056" +
    "\006\uffe2\030\uffe2\036\uffe2\037\uffe2\061\uffe2\062\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\072\uffe2\073\uffe2\076\uffe2" +
    "\077\uffe2\100\uffe2\106\uffe2\110\uffe2\114\uffe2\122\uffe2\130" +
    "\uffe2\131\uffe2\132\uffe2\001\002\000\006\007\345\062\346" +
    "\001\002\000\004\024\351\001\002\000\004\007\347\001" +
    "\002\000\004\024\350\001\002\000\056\006\uffc0\030\uffc0" +
    "\036\uffc0\037\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130\uffc0\131\uffc0\132" +
    "\uffc0\001\002\000\056\006\uffbf\030\uffbf\036\uffbf\037\uffbf" +
    "\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\072" +
    "\uffbf\073\uffbf\076\uffbf\077\uffbf\100\uffbf\106\uffbf\110\uffbf" +
    "\114\uffbf\122\uffbf\130\uffbf\131\uffbf\132\uffbf\001\002\000" +
    "\052\006\044\030\354\036\045\037\043\061\035\062\144" +
    "\064\042\065\037\066\046\067\032\072\156\076\137\100" +
    "\152\106\161\110\147\114\143\122\146\130\140\131\136" +
    "\132\151\001\002\000\070\002\ufffb\006\ufffb\030\ufffb\036" +
    "\ufffb\037\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\072\ufffb\074\ufffb\075\ufffb\076\ufffb\100\ufffb\106" +
    "\ufffb\110\ufffb\111\ufffb\112\ufffb\114\ufffb\115\ufffb\122\ufffb" +
    "\126\ufffb\130\ufffb\131\ufffb\132\ufffb\001\002\000\016\002" +
    "\ufff4\074\ufff4\111\ufff4\112\ufff4\115\ufff4\126\ufff4\001\002" +
    "\000\004\062\356\001\002\000\006\007\uffee\015\uffee\001" +
    "\002\000\070\003\014\006\uffec\030\uffec\036\uffec\037\uffec" +
    "\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072" +
    "\uffec\074\016\075\017\076\uffec\100\uffec\106\uffec\110\uffec" +
    "\111\005\112\006\114\uffec\115\020\122\uffec\126\133\130" +
    "\uffec\131\uffec\132\uffec\001\002\000\066\006\uffec\030\uffec" +
    "\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\072\uffec\074\016\075\017\076\uffec\100\uffec" +
    "\106\uffec\110\uffec\111\005\112\006\114\uffec\115\020\122" +
    "\uffec\126\133\130\uffec\131\uffec\132\uffec\001\002\000\052" +
    "\006\044\030\362\036\045\037\043\061\035\062\144\064" +
    "\042\065\037\066\046\067\032\072\156\076\137\100\152" +
    "\106\161\110\147\114\143\122\146\130\140\131\136\132" +
    "\151\001\002\000\016\002\ufff1\074\ufff1\111\ufff1\112\ufff1" +
    "\115\ufff1\126\ufff1\001\002\000\052\006\044\030\364\036" +
    "\045\037\043\061\035\062\144\064\042\065\037\066\046" +
    "\067\032\072\156\076\137\100\152\106\161\110\147\114" +
    "\143\122\146\130\140\131\136\132\151\001\002\000\016" +
    "\002\ufff5\074\ufff5\111\ufff5\112\ufff5\115\ufff5\126\ufff5\001" +
    "\002\000\006\007\uffef\015\uffef\001\002\000\004\002\001" +
    "\001\002\000\012\006\370\015\uffd8\021\113\024\uffd8\001" +
    "\002\000\014\007\371\074\016\111\005\112\006\115\020" +
    "\001\002\000\004\027\u0102\001\002\000\006\007\373\015" +
    "\125\001\002\000\004\027\374\001\002\000\070\003\014" +
    "\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\072\uffec\074\016\075\017" +
    "\076\uffec\100\uffec\106\uffec\110\uffec\111\005\112\006\114" +
    "\uffec\115\020\122\uffec\126\133\130\uffec\131\uffec\132\uffec" +
    "\001\002\000\066\006\uffec\030\uffec\036\uffec\037\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\074\016\075\017\076\uffec\100\uffec\106\uffec\110\uffec\111" +
    "\005\112\006\114\uffec\115\020\122\uffec\126\133\130\uffec" +
    "\131\uffec\132\uffec\001\002\000\052\006\044\030\377\036" +
    "\045\037\043\061\035\062\144\064\042\065\037\066\046" +
    "\067\032\072\156\076\137\100\152\106\161\110\147\114" +
    "\143\122\146\130\140\131\136\132\151\001\002\000\016" +
    "\002\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001" +
    "\002\000\052\006\044\030\u0101\036\045\037\043\061\035" +
    "\062\144\064\042\065\037\066\046\067\032\072\156\076" +
    "\137\100\152\106\161\110\147\114\143\122\146\130\140" +
    "\131\136\132\151\001\002\000\016\002\ufff7\074\ufff7\111" +
    "\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000\070\003\014" +
    "\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\072\uffec\074\016\075\017" +
    "\076\uffec\100\uffec\106\uffec\110\uffec\111\005\112\006\114" +
    "\uffec\115\020\122\uffec\126\133\130\uffec\131\uffec\132\uffec" +
    "\001\002\000\066\006\uffec\030\uffec\036\uffec\037\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\074\016\075\017\076\uffec\100\uffec\106\uffec\110\uffec\111" +
    "\005\112\006\114\uffec\115\020\122\uffec\126\133\130\uffec" +
    "\131\uffec\132\uffec\001\002\000\052\006\044\030\u0105\036" +
    "\045\037\043\061\035\062\144\064\042\065\037\066\046" +
    "\067\032\072\156\076\137\100\152\106\161\110\147\114" +
    "\143\122\146\130\140\131\136\132\151\001\002\000\016" +
    "\002\ufff2\074\ufff2\111\ufff2\112\ufff2\115\ufff2\126\ufff2\001" +
    "\002\000\052\006\044\030\u0107\036\045\037\043\061\035" +
    "\062\144\064\042\065\037\066\046\067\032\072\156\076" +
    "\137\100\152\106\161\110\147\114\143\122\146\130\140" +
    "\131\136\132\151\001\002\000\016\002\ufff6\074\ufff6\111" +
    "\ufff6\112\ufff6\115\ufff6\126\ufff6\001\002\000\004\062\u010c" +
    "\001\002\000\016\002\ufff8\074\ufff8\111\ufff8\112\ufff8\115" +
    "\ufff8\126\ufff8\001\002\000\004\062\u010b\001\002\000\004" +
    "\006\121\001\002\000\004\006\370\001\002\000\004\062" +
    "\uffb5\001\002\000\004\062\uffb6\001\002\000\004\062\uffb7" +
    "\001\002\000\016\002\000\074\016\111\005\112\006\115" +
    "\020\126\u010a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\016\002\011\004\006\014\010\024\014\027" +
    "\003\030\007\001\001\000\012\004\352\014\010\024\014" +
    "\030\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u0107\024\u0108\001\001\000\004" +
    "\023\133\001\001\000\002\001\001\000\004\023\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\032\033\037\034\033\035\035\037\030" +
    "\001\001\000\004\016\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\032\033\037\034\033\035\035\037\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\032\033\037\034\033\035\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\032\033\037\034\065\001\001\000\002\001\001\000\010" +
    "\022\032\033\037\034\077\001\001\000\010\022\032\033" +
    "\037\034\076\001\001\000\010\022\032\033\037\034\075" +
    "\001\001\000\010\022\032\033\037\034\074\001\001\000" +
    "\010\022\032\033\037\034\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\032\033\037\034\033\035\035\037" +
    "\104\040\106\001\001\000\004\016\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\032\033\037\034" +
    "\033\035\035\037\111\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\014\022\032\033\037\034\033\035" +
    "\035\037\113\001\001\000\004\016\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\121\025\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\354\001" +
    "\001\000\002\001\001\000\012\004\006\014\131\027\127" +
    "\036\130\001\001\000\010\004\352\014\131\036\351\001" +
    "\001\000\040\003\141\006\163\010\156\011\147\012\157" +
    "\021\144\022\032\026\153\032\152\033\037\034\033\035" +
    "\035\037\161\041\154\043\162\001\001\000\004\023\133" +
    "\001\001\000\004\023\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\166\005" +
    "\167\012\170\013\165\014\131\022\032\032\152\033\037" +
    "\034\033\035\035\037\161\001\001\000\002\001\001\000" +
    "\022\005\175\012\170\022\032\032\152\033\037\034\033" +
    "\035\035\037\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\172\012\170\022\032\032\152\033\037" +
    "\034\033\035\035\037\161\001\001\000\002\001\001\000" +
    "\022\005\174\012\170\022\032\032\152\033\037\034\033" +
    "\035\035\037\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\177\012\170\022\032\032\152\033\037" +
    "\034\033\035\035\037\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\202\001\001\000\040\003\141" +
    "\006\163\010\156\011\147\012\157\021\144\022\032\026" +
    "\153\032\152\033\037\034\033\035\035\037\161\041\154" +
    "\043\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\207\001\001\000\040\003\141" +
    "\006\163\010\156\011\147\012\157\021\144\022\032\026" +
    "\153\032\152\033\037\034\033\035\035\037\161\041\154" +
    "\043\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\213\022\032\032\152\033\037\034\033\035\035" +
    "\037\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\217\022\032\032\152\033\037" +
    "\034\033\035\035\037\161\053\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\224\022\032\032\152" +
    "\033\037\034\033\035\035\037\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\226" +
    "\022\032\032\152\033\037\034\033\035\035\037\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\231" +
    "\001\001\000\040\003\141\006\163\010\156\011\147\012" +
    "\157\021\144\022\032\026\153\032\152\033\037\034\033" +
    "\035\035\037\161\041\154\043\162\001\001\000\004\007" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\246\001\001\000\002\001\001\000\020\012\240\022" +
    "\032\032\152\033\037\034\033\035\035\037\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\243\001" +
    "\001\000\040\003\141\006\163\010\156\011\147\012\157" +
    "\021\144\022\032\026\153\032\152\033\037\034\033\035" +
    "\035\037\161\041\154\043\162\001\001\000\004\007\245" +
    "\001\001\000\002\001\001\000\040\003\141\006\163\010" +
    "\156\011\147\012\157\021\144\022\032\026\153\032\152" +
    "\033\037\034\033\035\035\037\161\041\154\043\162\001" +
    "\001\000\002\001\001\000\010\022\251\033\253\052\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\251\033\253\052\256" +
    "\001\001\000\002\001\001\000\010\022\251\033\253\052" +
    "\271\001\001\000\002\001\001\000\010\022\251\033\253" +
    "\052\270\001\001\000\010\022\251\033\253\052\267\001" +
    "\001\000\010\022\251\033\253\052\266\001\001\000\010" +
    "\022\251\033\253\052\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\032\033\037\034\033\035\035\037" +
    "\104\040\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\300\001" +
    "\001\000\006\046\302\047\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\251\033" +
    "\253\052\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\310\001\001\000\040\003\141\006\163\010" +
    "\156\011\147\012\157\021\144\022\032\026\153\032\152" +
    "\033\037\034\033\035\035\037\161\041\154\043\162\001" +
    "\001\000\002\001\001\000\004\036\313\001\001\000\040" +
    "\003\141\006\163\010\156\011\147\012\157\021\144\022" +
    "\032\026\153\032\152\033\037\034\033\035\035\037\161" +
    "\041\154\043\162\001\001\000\014\022\032\033\037\034" +
    "\033\035\035\037\326\001\001\000\014\022\032\033\037" +
    "\034\033\035\035\037\325\001\001\000\014\022\032\033" +
    "\037\034\033\035\035\037\324\001\001\000\014\022\032" +
    "\033\037\034\033\035\035\037\323\001\001\000\016\022" +
    "\032\032\322\033\037\034\033\035\035\037\321\001\001" +
    "\000\004\016\052\001\001\000\002\001\001\000\004\016" +
    "\052\001\001\000\004\016\052\001\001\000\004\016\052" +
    "\001\001\000\004\016\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\335\022\032\032\152\033\037\034" +
    "\033\035\035\037\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\340\001\001\000\040\003\141\006" +
    "\163\010\156\011\147\012\157\021\144\022\032\026\153" +
    "\032\152\033\037\034\033\035\035\037\161\041\154\043" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\141" +
    "\006\163\010\156\011\147\012\157\021\144\022\032\026" +
    "\153\032\152\033\037\034\033\035\035\037\161\041\154" +
    "\043\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\006\014\131" +
    "\027\357\036\360\001\001\000\010\004\352\014\131\036" +
    "\362\001\001\000\040\003\141\006\163\010\156\011\147" +
    "\012\157\021\144\022\032\026\153\032\152\033\037\034" +
    "\033\035\035\037\161\041\154\043\162\001\001\000\002" +
    "\001\001\000\040\003\141\006\163\010\156\011\147\012" +
    "\157\021\144\022\032\026\153\032\152\033\037\034\033" +
    "\035\035\037\161\041\154\043\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\121\025\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\006\014\131" +
    "\027\374\036\375\001\001\000\010\004\352\014\131\036" +
    "\377\001\001\000\040\003\141\006\163\010\156\011\147" +
    "\012\157\021\144\022\032\026\153\032\152\033\037\034" +
    "\033\035\035\037\161\041\154\043\162\001\001\000\002" +
    "\001\001\000\040\003\141\006\163\010\156\011\147\012" +
    "\157\021\144\022\032\026\153\032\152\033\037\034\033" +
    "\035\035\037\161\041\154\043\162\001\001\000\002\001" +
    "\001\000\012\004\006\014\131\027\u0102\036\u0103\001\001" +
    "\000\010\004\352\014\131\036\u0105\001\001\000\040\003" +
    "\141\006\163\010\156\011\147\012\157\021\144\022\032" +
    "\026\153\032\152\033\037\034\033\035\035\037\161\041" +
    "\154\043\162\001\001\000\002\001\001\000\040\003\141" +
    "\006\163\010\156\011\147\012\157\021\144\022\032\026" +
    "\153\032\152\033\037\034\033\035\035\037\161\041\154" +
    "\043\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\u0107\024\u0108\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }
    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBAL_DECLARACIONES ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Declaración de variable incorrecta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE_STMT ::= CASE EXPRESIONES_NUMERICAS COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
