
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\002\003" +
    "\000\002\002\004\000\002\027\003\000\002\027\004\000" +
    "\002\030\003\000\002\030\004\000\002\024\010\000\002" +
    "\024\007\000\002\024\007\000\002\024\010\000\002\024" +
    "\003\000\002\052\006\000\002\052\005\000\002\052\006" +
    "\000\002\053\006\000\002\053\006\000\002\053\006\000" +
    "\002\053\006\000\002\053\006\000\002\053\007\000\002" +
    "\053\006\000\002\025\004\000\002\025\006\000\002\025" +
    "\004\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\035\004\000\002\035\002\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\004\000\002" +
    "\004\005\000\002\004\006\000\002\004\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\023\005\000\002\023\007\000\002\023\005\000" +
    "\002\023\003\000\002\006\012\000\002\006\011\000\002" +
    "\006\003\000\002\050\012\000\002\050\011\000\002\050" +
    "\011\000\002\050\010\000\002\050\011\000\002\050\010" +
    "\000\002\050\010\000\002\050\007\000\002\050\010\000" +
    "\002\050\007\000\002\050\012\000\002\050\011\000\002" +
    "\012\003\000\002\012\003\000\002\036\005\000\002\036" +
    "\003\000\002\034\005\000\002\034\003\000\002\007\013" +
    "\000\002\007\012\000\002\007\006\000\002\007\007\000" +
    "\002\007\006\000\002\007\004\000\002\010\011\000\002" +
    "\010\011\000\002\010\010\000\002\010\010\000\002\010" +
    "\007\000\002\010\007\000\002\010\011\000\002\040\013" +
    "\000\002\040\013\000\002\040\012\000\002\040\012\000" +
    "\002\040\011\000\002\040\011\000\002\040\012\000\002" +
    "\040\013\000\002\040\012\000\002\040\012\000\002\040" +
    "\012\000\002\011\011\000\002\011\011\000\002\011\010" +
    "\000\002\011\010\000\002\011\007\000\002\011\007\000" +
    "\002\011\011\000\002\013\006\000\002\013\007\000\002" +
    "\013\004\000\002\005\002\000\002\005\003\000\002\005" +
    "\003\000\002\041\013\000\002\041\011\000\002\041\012" +
    "\000\002\041\011\000\002\041\012\000\002\041\011\000" +
    "\002\041\010\000\002\041\010\000\002\041\015\000\002" +
    "\042\004\000\002\042\002\000\002\044\006\000\002\044" +
    "\010\000\002\044\006\000\002\044\010\000\002\044\007" +
    "\000\002\044\005\000\002\043\005\000\002\043\007\000" +
    "\002\043\006\000\002\043\006\000\002\043\005\000\002" +
    "\043\007\000\002\051\004\000\002\051\003\000\002\021" +
    "\007\000\002\021\006\000\002\021\007\000\002\021\007" +
    "\000\002\021\007\000\002\021\005\000\002\021\006\000" +
    "\002\021\006\000\002\021\007\000\002\021\007\000\002" +
    "\021\006\000\002\021\005\000\002\021\006\000\002\021" +
    "\007\000\002\021\004\000\002\021\004\000\002\047\003" +
    "\000\002\047\005\000\002\047\005\000\002\047\004\000" +
    "\002\047\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\037\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\004\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\003\000\002\033\006\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\003\000\002" +
    "\046\006\000\002\046\005\000\002\046\003\000\002\046" +
    "\003\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0224\000\024\002\ufffd\003\015\062\016\074\020\075" +
    "\021\111\005\112\006\115\022\126\013\001\002\000\024" +
    "\002\ufffe\003\u0226\062\016\074\020\075\021\111\005\112" +
    "\006\115\022\126\013\001\002\000\020\003\uff5b\007\uff5b" +
    "\015\uff5b\024\uff5b\062\uff5b\112\u0224\115\u0223\001\002\000" +
    "\016\003\uff59\007\uff59\015\uff59\024\uff59\062\uff59\111\u0222" +
    "\001\002\000\114\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\010\ufffa\011\ufffa\021\ufffa\030\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\061\ufffa\062\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\072\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\100\ufffa\106\ufffa\110\ufffa\111\ufffa\112\ufffa\114" +
    "\ufffa\115\ufffa\122\ufffa\126\ufffa\130\ufffa\131\ufffa\132\ufffa" +
    "\001\002\000\020\002\uffff\062\016\074\020\111\005\112" +
    "\006\115\022\126\u021e\001\002\000\010\003\172\024\171" +
    "\062\u0211\001\002\000\004\002\u0210\001\002\000\004\062" +
    "\u0205\001\002\000\020\002\ufff2\062\ufff2\074\ufff2\111\ufff2" +
    "\112\ufff2\115\ufff2\126\ufff2\001\002\000\006\002\ufffc\062" +
    "\026\001\002\000\004\006\146\001\002\000\020\002\ufff8" +
    "\062\ufff8\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126\ufff8\001" +
    "\002\000\014\003\uff5a\007\uff5a\015\uff5a\024\uff5a\062\uff5a" +
    "\001\002\000\012\074\020\111\005\112\006\115\022\001" +
    "\002\000\016\003\uff58\007\uff58\015\uff58\024\uff58\062\uff58" +
    "\111\023\001\002\000\014\003\uff54\007\uff54\015\uff54\024" +
    "\uff54\062\uff54\001\002\000\006\024\025\062\026\001\002" +
    "\000\116\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\010" +
    "\uffc8\011\uffc8\021\uffc8\024\uffc8\030\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\061\uffc8\062\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\072\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\100\uffc8\106\uffc8\110\uffc8\111\uffc8\112\uffc8\114" +
    "\uffc8\115\uffc8\122\uffc8\126\uffc8\130\uffc8\131\uffc8\132\uffc8" +
    "\001\002\000\010\015\uffc4\021\144\024\uffc4\001\002\000" +
    "\006\015\030\024\031\001\002\000\004\062\032\001\002" +
    "\000\116\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd\010" +
    "\uffcd\011\uffcd\021\uffcd\024\uffcd\030\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\061\uffcd\062\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\072\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\100\uffcd\106\uffcd\110\uffcd\111\uffcd\112\uffcd\114" +
    "\uffcd\115\uffcd\122\uffcd\126\uffcd\130\uffcd\131\uffcd\132\uffcd" +
    "\001\002\000\010\015\uffc7\021\033\024\uffc7\001\002\000" +
    "\034\004\040\005\035\006\043\010\051\011\046\036\047" +
    "\037\055\061\045\062\042\064\050\065\036\066\034\067" +
    "\041\001\002\000\140\003\uff3c\004\uff3c\005\uff3c\006\uff3c" +
    "\007\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c\015\uff3c\017" +
    "\uff3c\020\uff3c\021\uff3c\023\uff3c\024\uff3c\027\uff3c\030\uff3c" +
    "\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042" +
    "\uff3c\043\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\061\uff3c" +
    "\062\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\072\uff3c\073" +
    "\uff3c\076\uff3c\077\uff3c\100\uff3c\106\uff3c\110\uff3c\114\uff3c" +
    "\122\uff3c\130\uff3c\131\uff3c\132\uff3c\001\002\000\034\004" +
    "\040\005\035\006\043\010\051\011\046\036\047\037\055" +
    "\061\045\062\042\064\050\065\036\066\034\067\041\001" +
    "\002\000\140\003\uff3d\004\uff3d\005\uff3d\006\uff3d\007\uff3d" +
    "\010\uff3d\011\uff3d\012\uff3d\013\uff3d\015\uff3d\017\uff3d\020" +
    "\uff3d\021\uff3d\023\uff3d\024\uff3d\027\uff3d\030\uff3d\034\uff3d" +
    "\035\uff3d\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043" +
    "\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\061\uff3d\062\uff3d" +
    "\064\uff3d\065\uff3d\066\uff3d\067\uff3d\072\uff3d\073\uff3d\076" +
    "\uff3d\077\uff3d\100\uff3d\106\uff3d\110\uff3d\114\uff3d\122\uff3d" +
    "\130\uff3d\131\uff3d\132\uff3d\001\002\000\136\003\uff2b\004" +
    "\uff2b\005\uff2b\006\uff2b\007\uff2b\010\uff2b\011\uff2b\012\uff2b" +
    "\013\uff2b\015\uff2b\017\uff2b\020\uff2b\021\uff2b\024\uff2b\027" +
    "\uff2b\030\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b" +
    "\041\uff2b\042\uff2b\043\uff2b\054\uff2b\055\uff2b\056\uff2b\057" +
    "\uff2b\061\uff2b\062\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b" +
    "\072\uff2b\073\uff2b\076\uff2b\077\uff2b\100\uff2b\106\uff2b\110" +
    "\uff2b\114\uff2b\122\uff2b\130\uff2b\131\uff2b\132\uff2b\001\002" +
    "\000\034\004\040\005\035\006\043\010\051\011\046\036" +
    "\047\037\055\061\045\062\042\064\050\065\036\066\034" +
    "\067\041\001\002\000\140\003\uff3b\004\uff3b\005\uff3b\006" +
    "\uff3b\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013\uff3b\015\uff3b" +
    "\017\uff3b\020\uff3b\021\uff3b\023\uff3b\024\uff3b\027\uff3b\030" +
    "\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b" +
    "\042\uff3b\043\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b\061" +
    "\uff3b\062\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\072\uff3b" +
    "\073\uff3b\076\uff3b\077\uff3b\100\uff3b\106\uff3b\110\uff3b\114" +
    "\uff3b\122\uff3b\130\uff3b\131\uff3b\132\uff3b\001\002\000\136" +
    "\003\uff2f\004\uff2f\005\uff2f\006\126\007\uff2f\010\uff2f\011" +
    "\uff2f\012\uff2f\013\uff2f\015\uff2f\017\uff2f\020\uff2f\021\uff2f" +
    "\024\uff2f\027\uff2f\030\uff2f\034\uff2f\035\uff2f\036\124\037" +
    "\125\040\uff2f\041\uff2f\042\uff2f\043\uff2f\054\uff2f\055\uff2f" +
    "\056\uff2f\057\uff2f\061\uff2f\062\uff2f\064\uff2f\065\uff2f\066" +
    "\uff2f\067\uff2f\072\uff2f\073\uff2f\076\uff2f\077\uff2f\100\uff2f" +
    "\106\uff2f\110\uff2f\114\uff2f\122\uff2f\130\uff2f\131\uff2f\132" +
    "\uff2f\001\002\000\036\003\120\004\040\005\035\006\043" +
    "\010\051\011\046\036\047\037\055\061\045\062\042\064" +
    "\050\065\036\066\034\067\041\001\002\000\134\003\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\013" +
    "\uffb1\015\uffb1\017\065\020\071\021\uffb1\024\uffb1\027\uffb1" +
    "\030\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\054\070\055\066\056\067\057\072" +
    "\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\072" +
    "\uffb1\073\uffb1\076\uffb1\077\uffb1\100\uffb1\106\uffb1\110\uffb1" +
    "\114\uffb1\122\uffb1\130\uffb1\131\uffb1\132\uffb1\001\002\000" +
    "\140\003\uff3f\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010\uff3f" +
    "\011\uff3f\012\uff3f\013\uff3f\015\uff3f\017\uff3f\020\uff3f\021" +
    "\uff3f\023\uff3f\024\uff3f\027\uff3f\030\uff3f\034\uff3f\035\uff3f" +
    "\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\054" +
    "\uff3f\055\uff3f\056\uff3f\057\uff3f\061\uff3f\062\uff3f\064\uff3f" +
    "\065\uff3f\066\uff3f\067\uff3f\072\uff3f\073\uff3f\076\uff3f\077" +
    "\uff3f\100\uff3f\106\uff3f\110\uff3f\114\uff3f\122\uff3f\130\uff3f" +
    "\131\uff3f\132\uff3f\001\002\000\034\004\040\005\035\006" +
    "\043\010\051\011\046\036\047\037\055\061\045\062\042" +
    "\064\050\065\036\066\034\067\041\001\002\000\006\003" +
    "\115\062\116\001\002\000\140\003\uff3e\004\uff3e\005\uff3e" +
    "\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e\015" +
    "\uff3e\017\uff3e\020\uff3e\021\uff3e\023\uff3e\024\uff3e\027\uff3e" +
    "\030\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040\uff3e\041" +
    "\uff3e\042\uff3e\043\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e" +
    "\061\uff3e\062\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\072" +
    "\uff3e\073\uff3e\076\uff3e\077\uff3e\100\uff3e\106\uff3e\110\uff3e" +
    "\114\uff3e\122\uff3e\130\uff3e\131\uff3e\132\uff3e\001\002\000" +
    "\034\004\040\005\035\006\043\010\051\011\046\036\047" +
    "\037\055\061\045\062\042\064\050\065\036\066\034\067" +
    "\041\001\002\000\136\003\uffaf\004\076\005\101\006\uffaf" +
    "\007\uffaf\010\077\011\100\012\075\013\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\024\uffaf\027\uffaf\030\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061\uffaf\062\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\067\uffaf\072\uffaf\073\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\106\uffaf\110\uffaf\114\uffaf\122\uffaf" +
    "\130\uffaf\131\uffaf\132\uffaf\001\002\000\014\013\063\015" +
    "\uffc6\024\uffc6\034\062\035\060\001\002\000\136\003\uff2c" +
    "\004\uff2c\005\uff2c\006\uff2c\007\uff2c\010\uff2c\011\uff2c\012" +
    "\uff2c\013\uff2c\015\uff2c\017\uff2c\020\uff2c\021\uff2c\024\uff2c" +
    "\027\uff2c\030\uff2c\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040" +
    "\uff2c\041\uff2c\042\uff2c\043\uff2c\054\uff2c\055\uff2c\056\uff2c" +
    "\057\uff2c\061\uff2c\062\uff2c\064\uff2c\065\uff2c\066\uff2c\067" +
    "\uff2c\072\uff2c\073\uff2c\076\uff2c\077\uff2c\100\uff2c\106\uff2c" +
    "\110\uff2c\114\uff2c\122\uff2c\130\uff2c\131\uff2c\132\uff2c\001" +
    "\002\000\006\003\056\062\057\001\002\000\136\003\uff05" +
    "\004\uff05\005\uff05\006\uff05\007\uff05\010\uff05\011\uff05\012" +
    "\uff05\013\uff05\015\uff05\017\uff05\020\uff05\021\uff05\024\uff05" +
    "\027\uff05\030\uff05\034\uff05\035\uff05\036\uff05\037\uff05\040" +
    "\uff05\041\uff05\042\uff05\043\uff05\054\uff05\055\uff05\056\uff05" +
    "\057\uff05\061\uff05\062\uff05\064\uff05\065\uff05\066\uff05\067" +
    "\uff05\072\uff05\073\uff05\076\uff05\077\uff05\100\uff05\106\uff05" +
    "\110\uff05\114\uff05\122\uff05\130\uff05\131\uff05\132\uff05\001" +
    "\002\000\136\003\uff06\004\uff06\005\uff06\006\uff06\007\uff06" +
    "\010\uff06\011\uff06\012\uff06\013\uff06\015\uff06\017\uff06\020" +
    "\uff06\021\uff06\024\uff06\027\uff06\030\uff06\034\uff06\035\uff06" +
    "\036\uff06\037\uff06\040\uff06\041\uff06\042\uff06\043\uff06\054" +
    "\uff06\055\uff06\056\uff06\057\uff06\061\uff06\062\uff06\064\uff06" +
    "\065\uff06\066\uff06\067\uff06\072\uff06\073\uff06\076\uff06\077" +
    "\uff06\100\uff06\106\uff06\110\uff06\114\uff06\122\uff06\130\uff06" +
    "\131\uff06\132\uff06\001\002\000\034\004\uff4d\005\uff4d\006" +
    "\uff4d\010\uff4d\011\uff4d\036\uff4d\037\uff4d\061\uff4d\062\uff4d" +
    "\064\uff4d\065\uff4d\066\uff4d\067\uff4d\001\002\000\034\004" +
    "\040\005\035\006\043\010\051\011\046\036\047\037\055" +
    "\061\045\062\042\064\050\065\036\066\034\067\041\001" +
    "\002\000\034\004\uff4c\005\uff4c\006\uff4c\010\uff4c\011\uff4c" +
    "\036\uff4c\037\uff4c\061\uff4c\062\uff4c\064\uff4c\065\uff4c\066" +
    "\uff4c\067\uff4c\001\002\000\034\004\uff4b\005\uff4b\006\uff4b" +
    "\010\uff4b\011\uff4b\036\uff4b\037\uff4b\061\uff4b\062\uff4b\064" +
    "\uff4b\065\uff4b\066\uff4b\067\uff4b\001\002\000\134\003\uffb2" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013" +
    "\uffb2\015\uffb2\017\065\020\071\021\uffb2\024\uffb2\027\uffb2" +
    "\030\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\054\070\055\066\056\067\057\072" +
    "\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\072" +
    "\uffb2\073\uffb2\076\uffb2\077\uffb2\100\uffb2\106\uffb2\110\uffb2" +
    "\114\uffb2\122\uffb2\130\uffb2\131\uffb2\132\uffb2\001\002\000" +
    "\034\004\uff51\005\uff51\006\uff51\010\uff51\011\uff51\036\uff51" +
    "\037\uff51\061\uff51\062\uff51\064\uff51\065\uff51\066\uff51\067" +
    "\uff51\001\002\000\034\004\uff53\005\uff53\006\uff53\010\uff53" +
    "\011\uff53\036\uff53\037\uff53\061\uff53\062\uff53\064\uff53\065" +
    "\uff53\066\uff53\067\uff53\001\002\000\034\004\uff4f\005\uff4f" +
    "\006\uff4f\010\uff4f\011\uff4f\036\uff4f\037\uff4f\061\uff4f\062" +
    "\uff4f\064\uff4f\065\uff4f\066\uff4f\067\uff4f\001\002\000\034" +
    "\004\uff52\005\uff52\006\uff52\010\uff52\011\uff52\036\uff52\037" +
    "\uff52\061\uff52\062\uff52\064\uff52\065\uff52\066\uff52\067\uff52" +
    "\001\002\000\034\004\uff50\005\uff50\006\uff50\010\uff50\011" +
    "\uff50\036\uff50\037\uff50\061\uff50\062\uff50\064\uff50\065\uff50" +
    "\066\uff50\067\uff50\001\002\000\034\004\uff4e\005\uff4e\006" +
    "\uff4e\010\uff4e\011\uff4e\036\uff4e\037\uff4e\061\uff4e\062\uff4e" +
    "\064\uff4e\065\uff4e\066\uff4e\067\uff4e\001\002\000\034\004" +
    "\040\005\035\006\043\010\051\011\046\036\047\037\055" +
    "\061\045\062\042\064\050\065\036\066\034\067\041\001" +
    "\002\000\136\003\uffb0\004\076\005\101\006\uffb0\007\uffb0" +
    "\010\077\011\100\012\075\013\uffb0\015\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\024\uffb0\027\uffb0\030\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\067\uffb0\072\uffb0\073\uffb0\076\uffb0\077" +
    "\uffb0\100\uffb0\106\uffb0\110\uffb0\114\uffb0\122\uffb0\130\uffb0" +
    "\131\uffb0\132\uffb0\001\002\000\036\003\113\004\040\005" +
    "\035\006\043\010\051\011\046\036\047\037\055\061\045" +
    "\062\042\064\050\065\036\066\034\067\041\001\002\000" +
    "\036\003\111\004\040\005\035\006\043\010\051\011\046" +
    "\036\047\037\055\061\045\062\042\064\050\065\036\066" +
    "\034\067\041\001\002\000\036\003\107\004\040\005\035" +
    "\006\043\010\051\011\046\036\047\037\055\061\045\062" +
    "\042\064\050\065\036\066\034\067\041\001\002\000\036" +
    "\003\105\004\040\005\035\006\043\010\051\011\046\036" +
    "\047\037\055\061\045\062\042\064\050\065\036\066\034" +
    "\067\041\001\002\000\036\003\103\004\040\005\035\006" +
    "\043\010\051\011\046\036\047\037\055\061\045\062\042" +
    "\064\050\065\036\066\034\067\041\001\002\000\136\003" +
    "\uff33\004\uff33\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33" +
    "\012\uff33\013\uff33\015\uff33\017\uff33\020\uff33\021\uff33\024" +
    "\uff33\027\uff33\030\uff33\034\uff33\035\uff33\036\uff33\037\uff33" +
    "\040\uff33\041\uff33\042\uff33\043\uff33\054\uff33\055\uff33\056" +
    "\uff33\057\uff33\061\uff33\062\uff33\064\uff33\065\uff33\066\uff33" +
    "\067\uff33\072\uff33\073\uff33\076\uff33\077\uff33\100\uff33\106" +
    "\uff33\110\uff33\114\uff33\122\uff33\130\uff33\131\uff33\132\uff33" +
    "\001\002\000\136\003\uff28\004\uff28\005\uff28\006\uff28\007" +
    "\uff28\010\uff28\011\uff28\012\uff28\013\uff28\015\uff28\017\uff28" +
    "\020\uff28\021\uff28\024\uff28\027\uff28\030\uff28\034\uff28\035" +
    "\uff28\036\uff28\037\uff28\040\uff28\041\uff28\042\uff28\043\uff28" +
    "\054\uff28\055\uff28\056\uff28\057\uff28\061\uff28\062\uff28\064" +
    "\uff28\065\uff28\066\uff28\067\uff28\072\uff28\073\uff28\076\uff28" +
    "\077\uff28\100\uff28\106\uff28\110\uff28\114\uff28\122\uff28\130" +
    "\uff28\131\uff28\132\uff28\001\002\000\136\003\uff32\004\uff32" +
    "\005\uff32\006\uff32\007\uff32\010\uff32\011\uff32\012\uff32\013" +
    "\uff32\015\uff32\017\uff32\020\uff32\021\uff32\024\uff32\027\uff32" +
    "\030\uff32\034\uff32\035\uff32\036\uff32\037\uff32\040\uff32\041" +
    "\uff32\042\uff32\043\uff32\054\uff32\055\uff32\056\uff32\057\uff32" +
    "\061\uff32\062\uff32\064\uff32\065\uff32\066\uff32\067\uff32\072" +
    "\uff32\073\uff32\076\uff32\077\uff32\100\uff32\106\uff32\110\uff32" +
    "\114\uff32\122\uff32\130\uff32\131\uff32\132\uff32\001\002\000" +
    "\136\003\uff27\004\uff27\005\uff27\006\uff27\007\uff27\010\uff27" +
    "\011\uff27\012\uff27\013\uff27\015\uff27\017\uff27\020\uff27\021" +
    "\uff27\024\uff27\027\uff27\030\uff27\034\uff27\035\uff27\036\uff27" +
    "\037\uff27\040\uff27\041\uff27\042\uff27\043\uff27\054\uff27\055" +
    "\uff27\056\uff27\057\uff27\061\uff27\062\uff27\064\uff27\065\uff27" +
    "\066\uff27\067\uff27\072\uff27\073\uff27\076\uff27\077\uff27\100" +
    "\uff27\106\uff27\110\uff27\114\uff27\122\uff27\130\uff27\131\uff27" +
    "\132\uff27\001\002\000\136\003\uff34\004\uff34\005\101\006" +
    "\uff34\007\uff34\010\uff34\011\100\012\075\013\uff34\015\uff34" +
    "\017\uff34\020\uff34\021\uff34\024\uff34\027\uff34\030\uff34\034" +
    "\uff34\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042\uff34" +
    "\043\uff34\054\uff34\055\uff34\056\uff34\057\uff34\061\uff34\062" +
    "\uff34\064\uff34\065\uff34\066\uff34\067\uff34\072\uff34\073\uff34" +
    "\076\uff34\077\uff34\100\uff34\106\uff34\110\uff34\114\uff34\122" +
    "\uff34\130\uff34\131\uff34\132\uff34\001\002\000\136\003\uff29" +
    "\004\uff29\005\uff29\006\uff29\007\uff29\010\uff29\011\uff29\012" +
    "\uff29\013\uff29\015\uff29\017\uff29\020\uff29\021\uff29\024\uff29" +
    "\027\uff29\030\uff29\034\uff29\035\uff29\036\uff29\037\uff29\040" +
    "\uff29\041\uff29\042\uff29\043\uff29\054\uff29\055\uff29\056\uff29" +
    "\057\uff29\061\uff29\062\uff29\064\uff29\065\uff29\066\uff29\067" +
    "\uff29\072\uff29\073\uff29\076\uff29\077\uff29\100\uff29\106\uff29" +
    "\110\uff29\114\uff29\122\uff29\130\uff29\131\uff29\132\uff29\001" +
    "\002\000\136\003\uff35\004\uff35\005\101\006\uff35\007\uff35" +
    "\010\uff35\011\100\012\075\013\uff35\015\uff35\017\uff35\020" +
    "\uff35\021\uff35\024\uff35\027\uff35\030\uff35\034\uff35\035\uff35" +
    "\036\uff35\037\uff35\040\uff35\041\uff35\042\uff35\043\uff35\054" +
    "\uff35\055\uff35\056\uff35\057\uff35\061\uff35\062\uff35\064\uff35" +
    "\065\uff35\066\uff35\067\uff35\072\uff35\073\uff35\076\uff35\077" +
    "\uff35\100\uff35\106\uff35\110\uff35\114\uff35\122\uff35\130\uff35" +
    "\131\uff35\132\uff35\001\002\000\136\003\uff2a\004\uff2a\005" +
    "\uff2a\006\uff2a\007\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a" +
    "\015\uff2a\017\uff2a\020\uff2a\021\uff2a\024\uff2a\027\uff2a\030" +
    "\uff2a\034\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a" +
    "\042\uff2a\043\uff2a\054\uff2a\055\uff2a\056\uff2a\057\uff2a\061" +
    "\uff2a\062\uff2a\064\uff2a\065\uff2a\066\uff2a\067\uff2a\072\uff2a" +
    "\073\uff2a\076\uff2a\077\uff2a\100\uff2a\106\uff2a\110\uff2a\114" +
    "\uff2a\122\uff2a\130\uff2a\131\uff2a\132\uff2a\001\002\000\136" +
    "\003\uff31\004\uff31\005\uff31\006\uff31\007\uff31\010\uff31\011" +
    "\uff31\012\uff31\013\uff31\015\uff31\017\uff31\020\uff31\021\uff31" +
    "\024\uff31\027\uff31\030\uff31\034\uff31\035\uff31\036\uff31\037" +
    "\uff31\040\uff31\041\uff31\042\uff31\043\uff31\054\uff31\055\uff31" +
    "\056\uff31\057\uff31\061\uff31\062\uff31\064\uff31\065\uff31\066" +
    "\uff31\067\uff31\072\uff31\073\uff31\076\uff31\077\uff31\100\uff31" +
    "\106\uff31\110\uff31\114\uff31\122\uff31\130\uff31\131\uff31\132" +
    "\uff31\001\002\000\136\003\uff26\004\uff26\005\uff26\006\uff26" +
    "\007\uff26\010\uff26\011\uff26\012\uff26\013\uff26\015\uff26\017" +
    "\uff26\020\uff26\021\uff26\024\uff26\027\uff26\030\uff26\034\uff26" +
    "\035\uff26\036\uff26\037\uff26\040\uff26\041\uff26\042\uff26\043" +
    "\uff26\054\uff26\055\uff26\056\uff26\057\uff26\061\uff26\062\uff26" +
    "\064\uff26\065\uff26\066\uff26\067\uff26\072\uff26\073\uff26\076" +
    "\uff26\077\uff26\100\uff26\106\uff26\110\uff26\114\uff26\122\uff26" +
    "\130\uff26\131\uff26\132\uff26\001\002\000\136\003\uff21\004" +
    "\uff21\005\101\006\uff21\007\uff21\010\uff21\011\100\012\075" +
    "\013\uff21\015\uff21\017\uff21\020\uff21\021\uff21\024\uff21\027" +
    "\uff21\030\uff21\034\uff21\035\uff21\036\uff21\037\uff21\040\uff21" +
    "\041\uff21\042\uff21\043\uff21\054\uff21\055\uff21\056\uff21\057" +
    "\uff21\061\uff21\062\uff21\064\uff21\065\uff21\066\uff21\067\uff21" +
    "\072\uff21\073\uff21\076\uff21\077\uff21\100\uff21\106\uff21\110" +
    "\uff21\114\uff21\122\uff21\130\uff21\131\uff21\132\uff21\001\002" +
    "\000\136\003\uff04\004\uff04\005\uff04\006\uff04\007\uff04\010" +
    "\uff04\011\uff04\012\uff04\013\uff04\015\uff04\017\uff04\020\uff04" +
    "\021\uff04\024\uff04\027\uff04\030\uff04\034\uff04\035\uff04\036" +
    "\uff04\037\uff04\040\uff04\041\uff04\042\uff04\043\uff04\054\uff04" +
    "\055\uff04\056\uff04\057\uff04\061\uff04\062\uff04\064\uff04\065" +
    "\uff04\066\uff04\067\uff04\072\uff04\073\uff04\076\uff04\077\uff04" +
    "\100\uff04\106\uff04\110\uff04\114\uff04\122\uff04\130\uff04\131" +
    "\uff04\132\uff04\001\002\000\136\003\uff07\004\uff07\005\uff07" +
    "\006\uff07\007\uff07\010\uff07\011\uff07\012\uff07\013\uff07\015" +
    "\uff07\017\uff07\020\uff07\021\uff07\024\uff07\027\uff07\030\uff07" +
    "\034\uff07\035\uff07\036\uff07\037\uff07\040\uff07\041\uff07\042" +
    "\uff07\043\uff07\054\uff07\055\uff07\056\uff07\057\uff07\061\uff07" +
    "\062\uff07\064\uff07\065\uff07\066\uff07\067\uff07\072\uff07\073" +
    "\uff07\076\uff07\077\uff07\100\uff07\106\uff07\110\uff07\114\uff07" +
    "\122\uff07\130\uff07\131\uff07\132\uff07\001\002\000\136\003" +
    "\uff23\004\uff23\005\uff23\006\uff23\007\uff23\010\uff23\011\uff23" +
    "\012\uff23\013\uff23\015\uff23\017\uff23\020\uff23\021\uff23\024" +
    "\uff23\027\uff23\030\uff23\034\uff23\035\uff23\036\uff23\037\uff23" +
    "\040\uff23\041\uff23\042\uff23\043\uff23\054\uff23\055\uff23\056" +
    "\uff23\057\uff23\061\uff23\062\uff23\064\uff23\065\uff23\066\uff23" +
    "\067\uff23\072\uff23\073\uff23\076\uff23\077\uff23\100\uff23\106" +
    "\uff23\110\uff23\114\uff23\122\uff23\130\uff23\131\uff23\132\uff23" +
    "\001\002\000\136\003\uff20\004\uff20\005\uff20\006\uff20\007" +
    "\123\010\uff20\011\uff20\012\uff20\013\uff20\015\uff20\017\uff20" +
    "\020\uff20\021\uff20\024\uff20\027\uff20\030\uff20\034\uff20\035" +
    "\uff20\036\uff20\037\uff20\040\uff20\041\uff20\042\uff20\043\uff20" +
    "\054\uff20\055\uff20\056\uff20\057\uff20\061\uff20\062\uff20\064" +
    "\uff20\065\uff20\066\uff20\067\uff20\072\uff20\073\uff20\076\uff20" +
    "\077\uff20\100\uff20\106\uff20\110\uff20\114\uff20\122\uff20\130" +
    "\uff20\131\uff20\132\uff20\001\002\000\012\007\122\013\063" +
    "\034\062\035\060\001\002\000\136\003\uff30\004\uff30\005" +
    "\uff30\006\uff30\007\uff30\010\uff30\011\uff30\012\uff30\013\uff30" +
    "\015\uff30\017\uff30\020\uff30\021\uff30\024\uff30\027\uff30\030" +
    "\uff30\034\uff30\035\uff30\036\uff30\037\uff30\040\uff30\041\uff30" +
    "\042\uff30\043\uff30\054\uff30\055\uff30\056\uff30\057\uff30\061" +
    "\uff30\062\uff30\064\uff30\065\uff30\066\uff30\067\uff30\072\uff30" +
    "\073\uff30\076\uff30\077\uff30\100\uff30\106\uff30\110\uff30\114" +
    "\uff30\122\uff30\130\uff30\131\uff30\132\uff30\001\002\000\136" +
    "\003\uff25\004\uff25\005\uff25\006\uff25\007\uff25\010\uff25\011" +
    "\uff25\012\uff25\013\uff25\015\uff25\017\uff25\020\uff25\021\uff25" +
    "\024\uff25\027\uff25\030\uff25\034\uff25\035\uff25\036\uff25\037" +
    "\uff25\040\uff25\041\uff25\042\uff25\043\uff25\054\uff25\055\uff25" +
    "\056\uff25\057\uff25\061\uff25\062\uff25\064\uff25\065\uff25\066" +
    "\uff25\067\uff25\072\uff25\073\uff25\076\uff25\077\uff25\100\uff25" +
    "\106\uff25\110\uff25\114\uff25\122\uff25\130\uff25\131\uff25\132" +
    "\uff25\001\002\000\136\003\uff09\004\uff09\005\uff09\006\uff09" +
    "\007\uff09\010\uff09\011\uff09\012\uff09\013\uff09\015\uff09\017" +
    "\uff09\020\uff09\021\uff09\024\uff09\027\uff09\030\uff09\034\uff09" +
    "\035\uff09\036\uff09\037\uff09\040\uff09\041\uff09\042\uff09\043" +
    "\uff09\054\uff09\055\uff09\056\uff09\057\uff09\061\uff09\062\uff09" +
    "\064\uff09\065\uff09\066\uff09\067\uff09\072\uff09\073\uff09\076" +
    "\uff09\077\uff09\100\uff09\106\uff09\110\uff09\114\uff09\122\uff09" +
    "\130\uff09\131\uff09\132\uff09\001\002\000\136\003\uff08\004" +
    "\uff08\005\uff08\006\uff08\007\uff08\010\uff08\011\uff08\012\uff08" +
    "\013\uff08\015\uff08\017\uff08\020\uff08\021\uff08\024\uff08\027" +
    "\uff08\030\uff08\034\uff08\035\uff08\036\uff08\037\uff08\040\uff08" +
    "\041\uff08\042\uff08\043\uff08\054\uff08\055\uff08\056\uff08\057" +
    "\uff08\061\uff08\062\uff08\064\uff08\065\uff08\066\uff08\067\uff08" +
    "\072\uff08\073\uff08\076\uff08\077\uff08\100\uff08\106\uff08\110" +
    "\uff08\114\uff08\122\uff08\130\uff08\131\uff08\132\uff08\001\002" +
    "\000\040\004\040\005\035\006\043\007\130\010\051\011" +
    "\046\015\131\036\047\037\055\061\045\062\042\064\050" +
    "\065\036\066\034\067\041\001\002\000\010\003\136\007" +
    "\135\015\134\001\002\000\136\003\uff2d\004\uff2d\005\uff2d" +
    "\006\uff2d\007\uff2d\010\uff2d\011\uff2d\012\uff2d\013\uff2d\015" +
    "\uff2d\017\uff2d\020\uff2d\021\uff2d\024\uff2d\027\uff2d\030\uff2d" +
    "\034\uff2d\035\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\042" +
    "\uff2d\043\uff2d\054\uff2d\055\uff2d\056\uff2d\057\uff2d\061\uff2d" +
    "\062\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\072\uff2d\073" +
    "\uff2d\076\uff2d\077\uff2d\100\uff2d\106\uff2d\110\uff2d\114\uff2d" +
    "\122\uff2d\130\uff2d\131\uff2d\132\uff2d\001\002\000\034\004" +
    "\040\005\035\006\043\010\051\011\046\036\047\037\055" +
    "\061\045\062\042\064\050\065\036\066\034\067\041\001" +
    "\002\000\016\003\uff3a\007\uff3a\013\063\015\uff3a\034\062" +
    "\035\060\001\002\000\016\003\uff36\007\uff36\013\063\015" +
    "\uff36\034\062\035\060\001\002\000\036\003\140\004\040" +
    "\005\035\006\043\010\051\011\046\036\047\037\055\061" +
    "\045\062\042\064\050\065\036\066\034\067\041\001\002" +
    "\000\136\003\uff2e\004\uff2e\005\uff2e\006\uff2e\007\uff2e\010" +
    "\uff2e\011\uff2e\012\uff2e\013\uff2e\015\uff2e\017\uff2e\020\uff2e" +
    "\021\uff2e\024\uff2e\027\uff2e\030\uff2e\034\uff2e\035\uff2e\036" +
    "\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e\043\uff2e\054\uff2e" +
    "\055\uff2e\056\uff2e\057\uff2e\061\uff2e\062\uff2e\064\uff2e\065" +
    "\uff2e\066\uff2e\067\uff2e\072\uff2e\073\uff2e\076\uff2e\077\uff2e" +
    "\100\uff2e\106\uff2e\110\uff2e\114\uff2e\122\uff2e\130\uff2e\131" +
    "\uff2e\132\uff2e\001\002\000\034\004\040\005\035\006\043" +
    "\010\051\011\046\036\047\037\055\061\045\062\042\064" +
    "\050\065\036\066\034\067\041\001\002\000\016\003\uff38" +
    "\007\uff38\013\063\015\uff38\034\062\035\060\001\002\000" +
    "\010\003\uff37\007\uff37\015\uff37\001\002\000\016\003\uff39" +
    "\007\uff39\013\063\015\uff39\034\062\035\060\001\002\000" +
    "\136\003\uff22\004\uff22\005\101\006\uff22\007\uff22\010\uff22" +
    "\011\100\012\075\013\uff22\015\uff22\017\uff22\020\uff22\021" +
    "\uff22\024\uff22\027\uff22\030\uff22\034\uff22\035\uff22\036\uff22" +
    "\037\uff22\040\uff22\041\uff22\042\uff22\043\uff22\054\uff22\055" +
    "\uff22\056\uff22\057\uff22\061\uff22\062\uff22\064\uff22\065\uff22" +
    "\066\uff22\067\uff22\072\uff22\073\uff22\076\uff22\077\uff22\100" +
    "\uff22\106\uff22\110\uff22\114\uff22\122\uff22\130\uff22\131\uff22" +
    "\132\uff22\001\002\000\136\003\uff24\004\uff24\005\uff24\006" +
    "\uff24\007\uff24\010\uff24\011\uff24\012\uff24\013\uff24\015\uff24" +
    "\017\uff24\020\uff24\021\uff24\024\uff24\027\uff24\030\uff24\034" +
    "\uff24\035\uff24\036\uff24\037\uff24\040\uff24\041\uff24\042\uff24" +
    "\043\uff24\054\uff24\055\uff24\056\uff24\057\uff24\061\uff24\062" +
    "\uff24\064\uff24\065\uff24\066\uff24\067\uff24\072\uff24\073\uff24" +
    "\076\uff24\077\uff24\100\uff24\106\uff24\110\uff24\114\uff24\122" +
    "\uff24\130\uff24\131\uff24\132\uff24\001\002\000\034\004\040" +
    "\005\035\006\043\010\051\011\046\036\047\037\055\061" +
    "\045\062\042\064\050\065\036\066\034\067\041\001\002" +
    "\000\014\013\063\015\uffc5\024\uffc5\034\062\035\060\001" +
    "\002\000\016\003\151\007\150\074\020\111\005\112\006" +
    "\115\022\001\002\000\010\007\uffe4\015\uffe4\062\u0204\001" +
    "\002\000\006\003\155\027\156\001\002\000\004\062\u0202" +
    "\001\002\000\006\007\154\015\153\001\002\000\014\003" +
    "\u0200\074\020\111\005\112\006\115\022\001\002\000\006" +
    "\003\155\027\156\001\002\000\020\003\164\074\020\075" +
    "\021\111\005\112\006\115\022\126\163\001\002\000\112" +
    "\003\164\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\074\020\075\021\076\uffe0\100\uffe0\106\uffe0" +
    "\110\uffe0\111\005\112\006\114\uffe0\115\022\122\uffe0\126" +
    "\163\130\uffe0\131\uffe0\132\uffe0\001\002\000\020\002\uffe9" +
    "\062\uffe9\074\uffe9\111\uffe9\112\uffe9\115\uffe9\126\uffe9\001" +
    "\002\000\112\003\164\004\uffe0\005\uffe0\006\uffe0\010\uffe0" +
    "\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\072\uffe0\074\020\075\021\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\111\005\112\006\114\uffe0\115\022" +
    "\122\uffe0\126\163\130\uffe0\131\uffe0\132\uffe0\001\002\000" +
    "\074\004\040\005\035\006\043\010\051\011\046\021\206" +
    "\030\217\036\047\037\055\040\176\041\226\042\220\043" +
    "\215\061\045\062\231\064\050\065\036\066\034\067\041" +
    "\072\213\076\201\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\010\003\172" +
    "\024\171\062\026\001\002\000\004\062\026\001\002\000" +
    "\004\062\026\001\002\000\006\015\030\024\166\001\002" +
    "\000\116\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010" +
    "\uffc9\011\uffc9\021\uffc9\024\uffc9\030\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\072\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\100\uffc9\106\uffc9\110\uffc9\111\uffc9\112\uffc9\114" +
    "\uffc9\115\uffc9\122\uffc9\126\uffc9\130\uffc9\131\uffc9\132\uffc9" +
    "\001\002\000\006\015\030\024\170\001\002\000\116\002" +
    "\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc\011\uffcc" +
    "\021\uffcc\024\uffcc\030\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\072\uffcc\074\uffcc\075\uffcc\076\uffcc\100" +
    "\uffcc\106\uffcc\110\uffcc\111\uffcc\112\uffcc\114\uffcc\115\uffcc" +
    "\122\uffcc\126\uffcc\130\uffcc\131\uffcc\132\uffcc\001\002\000" +
    "\116\002\uffcb\003\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb" +
    "\011\uffcb\021\uffcb\024\uffcb\030\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\061\uffcb\062\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\072\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\100\uffcb\106\uffcb\110\uffcb\111\uffcb\112\uffcb\114\uffcb" +
    "\115\uffcb\122\uffcb\126\uffcb\130\uffcb\131\uffcb\132\uffcb\001" +
    "\002\000\116\002\uffca\003\uffca\004\uffca\005\uffca\006\uffca" +
    "\010\uffca\011\uffca\021\uffca\024\uffca\030\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\061\uffca\062\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\072\uffca\074\uffca\075" +
    "\uffca\076\uffca\100\uffca\106\uffca\110\uffca\111\uffca\112\uffca" +
    "\114\uffca\115\uffca\122\uffca\126\uffca\130\uffca\131\uffca\132" +
    "\uffca\001\002\000\006\015\030\024\174\001\002\000\116" +
    "\002\uffce\003\uffce\004\uffce\005\uffce\006\uffce\010\uffce\011" +
    "\uffce\021\uffce\024\uffce\030\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\061\uffce\062\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\072\uffce\074\uffce\075\uffce\076\uffce" +
    "\100\uffce\106\uffce\110\uffce\111\uffce\112\uffce\114\uffce\115" +
    "\uffce\122\uffce\126\uffce\130\uffce\131\uffce\132\uffce\001\002" +
    "\000\100\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\021" +
    "\uffdf\030\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\072\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\106\uffdf" +
    "\110\uffdf\114\uffdf\122\uffdf\130\uffdf\131\uffdf\132\uffdf\001" +
    "\002\000\034\004\040\005\035\006\043\010\051\011\046" +
    "\036\047\037\055\061\045\062\042\064\050\065\036\066" +
    "\034\067\041\001\002\000\100\004\uffd9\005\uffd9\006\uffd9" +
    "\010\uffd9\011\uffd9\021\uffd9\030\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\061\uffd9\062\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\072\uffd9\073\uffd9\076\uffd9\077" +
    "\uffd9\100\uffd9\106\uffd9\110\uffd9\114\uffd9\122\uffd9\130\uffd9" +
    "\131\uffd9\132\uffd9\001\002\000\100\004\uffe1\005\uffe1\006" +
    "\uffe1\010\uffe1\011\uffe1\021\uffe1\030\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\061\uffe1\062\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\072\uffe1\073\uffe1\076\uffe1" +
    "\077\uffe1\100\uffe1\106\uffe1\110\uffe1\114\uffe1\122\uffe1\130" +
    "\uffe1\131\uffe1\132\uffe1\001\002\000\102\004\uffd1\005\uffd1" +
    "\006\uffd1\010\uffd1\011\uffd1\021\uffd1\024\u01f7\030\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\061\uffd1" +
    "\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\072\uffd1\073" +
    "\uffd1\076\uffd1\077\uffd1\100\uffd1\106\uffd1\110\uffd1\114\uffd1" +
    "\122\uffd1\130\uffd1\131\uffd1\132\uffd1\001\002\000\006\003" +
    "\u01d0\006\u01d1\001\002\000\010\003\u01bc\006\u01bd\024\u01bb" +
    "\001\002\000\100\004\uffde\005\uffde\006\uffde\010\uffde\011" +
    "\uffde\021\uffde\030\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\072\uffde\073\uffde\076\uffde\077\uffde\100\uffde" +
    "\106\uffde\110\uffde\114\uffde\122\uffde\130\uffde\131\uffde\132" +
    "\uffde\001\002\000\100\004\uffdc\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\100" +
    "\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc" +
    "\132\uffdc\001\002\000\034\004\040\005\035\006\043\010" +
    "\051\011\046\036\047\037\055\061\045\062\042\064\050" +
    "\065\036\066\034\067\041\001\002\000\006\003\u0186\006" +
    "\u0187\001\002\000\040\003\u0183\004\040\005\035\006\043" +
    "\010\051\011\046\024\u0182\036\047\037\055\061\045\062" +
    "\042\064\050\065\036\066\034\067\041\001\002\000\100" +
    "\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda\021\uffda\030" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\061\uffda\062\uffda\064\uffda\065\uffda\066\uffda\067\uffda\072" +
    "\uffda\073\uffda\076\uffda\077\uffda\100\uffda\106\uffda\110\uffda" +
    "\114\uffda\122\uffda\130\uffda\131\uffda\132\uffda\001\002\000" +
    "\120\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\013\063\015\uffb3\021\246\024\uffb3\027\uffb3\030" +
    "\uffb3\034\062\035\060\036\uffb3\037\uffb3\040\245\041\243" +
    "\042\242\043\244\061\uffb3\062\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\072\uffb3\073\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\106\uffb3\110\uffb3\114\uffb3\122\uffb3\130\uffb3\131\uffb3\132" +
    "\uffb3\001\002\000\102\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\011\uffd2\021\uffd2\024\u0181\030\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\061\uffd2\062\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\072\uffd2\073\uffd2\076\uffd2\077" +
    "\uffd2\100\uffd2\106\uffd2\110\uffd2\114\uffd2\122\uffd2\130\uffd2" +
    "\131\uffd2\132\uffd2\001\002\000\112\003\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\015\uffb4\021\uffb4" +
    "\024\uffb4\027\uffb4\030\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\061\uffb4\062\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\072\uffb4\073\uffb4\076\uffb4\077\uffb4\100" +
    "\uffb4\106\uffb4\110\uffb4\114\uffb4\122\uffb4\130\uffb4\131\uffb4" +
    "\132\uffb4\001\002\000\034\004\040\005\035\006\043\010" +
    "\051\011\046\036\047\037\055\061\045\062\042\064\050" +
    "\065\036\066\034\067\041\001\002\000\006\003\u010d\006" +
    "\u010e\001\002\000\020\002\ufff0\062\ufff0\074\ufff0\111\ufff0" +
    "\112\ufff0\115\ufff0\126\ufff0\001\002\000\034\004\040\005" +
    "\035\006\043\010\051\011\046\036\047\037\055\061\045" +
    "\062\042\064\050\065\036\066\034\067\041\001\002\000" +
    "\012\003\372\006\374\024\371\062\373\001\002\000\006" +
    "\003\271\006\366\001\002\000\100\004\uffc1\005\uffc1\006" +
    "\uffc1\010\uffc1\011\uffc1\021\uffc1\030\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\061\uffc1\062\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\072\uffc1\073\uffc1\076\uffc1" +
    "\077\uffc1\100\uffc1\106\uffc1\110\uffc1\114\uffc1\122\uffc1\130" +
    "\uffc1\131\uffc1\132\uffc1\001\002\000\100\004\uffdd\005\uffdd" +
    "\006\uffdd\010\uffdd\011\uffdd\021\uffdd\030\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\061\uffdd\062\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\073\uffdd\076" +
    "\uffdd\077\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd\122\uffdd" +
    "\130\uffdd\131\uffdd\132\uffdd\001\002\000\102\004\uffd7\005" +
    "\uffd7\006\uffd7\010\uffd7\011\uffd7\021\uffd7\024\365\030\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\061" +
    "\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072\uffd7" +
    "\073\uffd7\076\uffd7\077\uffd7\100\uffd7\106\uffd7\110\uffd7\114" +
    "\uffd7\122\uffd7\130\uffd7\131\uffd7\132\uffd7\001\002\000\034" +
    "\004\040\005\035\006\043\010\051\011\046\036\047\037" +
    "\055\061\045\062\042\064\050\065\036\066\034\067\041" +
    "\001\002\000\100\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011" +
    "\uffdb\021\uffdb\030\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\072\uffdb\073\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\106\uffdb\110\uffdb\114\uffdb\122\uffdb\130\uffdb\131\uffdb\132" +
    "\uffdb\001\002\000\006\003\264\027\265\001\002\000\136" +
    "\003\uff2f\004\uff2f\005\uff2f\006\126\007\uff2f\010\uff2f\011" +
    "\uff2f\012\uff2f\013\uff2f\015\uff2f\017\uff2f\020\uff2f\021\236" +
    "\024\uff2f\027\uff2f\030\uff2f\034\uff2f\035\uff2f\036\124\037" +
    "\125\040\234\041\233\042\235\043\232\054\uff2f\055\uff2f" +
    "\056\uff2f\057\uff2f\061\uff2f\062\uff2f\064\uff2f\065\uff2f\066" +
    "\uff2f\067\uff2f\072\uff2f\073\uff2f\076\uff2f\077\uff2f\100\uff2f" +
    "\106\uff2f\110\uff2f\114\uff2f\122\uff2f\130\uff2f\131\uff2f\132" +
    "\uff2f\001\002\000\036\003\262\004\040\005\035\006\043" +
    "\010\051\011\046\036\047\037\055\061\045\062\042\064" +
    "\050\065\036\066\034\067\041\001\002\000\036\003\260" +
    "\004\040\005\035\006\043\010\051\011\046\036\047\037" +
    "\055\061\045\062\042\064\050\065\036\066\034\067\041" +
    "\001\002\000\036\003\256\004\040\005\035\006\043\010" +
    "\051\011\046\036\047\037\055\061\045\062\042\064\050" +
    "\065\036\066\034\067\041\001\002\000\036\003\254\004" +
    "\040\005\035\006\043\010\051\011\046\036\047\037\055" +
    "\061\045\062\042\064\050\065\036\066\034\067\041\001" +
    "\002\000\050\003\240\004\040\005\035\006\043\010\051" +
    "\011\046\021\206\036\047\037\055\040\176\041\226\042" +
    "\220\043\215\061\045\062\231\064\050\065\036\066\034" +
    "\067\041\001\002\000\112\003\ufefe\004\ufefe\005\ufefe\006" +
    "\ufefe\007\ufefe\010\ufefe\011\ufefe\015\ufefe\021\ufefe\024\ufefe" +
    "\027\ufefe\030\ufefe\036\ufefe\037\ufefe\040\ufefe\041\ufefe\042" +
    "\ufefe\043\ufefe\061\ufefe\062\ufefe\064\ufefe\065\ufefe\066\ufefe" +
    "\067\ufefe\072\ufefe\073\ufefe\076\ufefe\077\ufefe\100\ufefe\106" +
    "\ufefe\110\ufefe\114\ufefe\122\ufefe\130\ufefe\131\ufefe\132\ufefe" +
    "\001\002\000\112\003\ufef9\004\ufef9\005\ufef9\006\ufef9\007" +
    "\ufef9\010\ufef9\011\ufef9\015\ufef9\021\ufef9\024\ufef9\027\ufef9" +
    "\030\ufef9\036\ufef9\037\ufef9\040\ufef9\041\ufef9\042\ufef9\043" +
    "\ufef9\061\ufef9\062\ufef9\064\ufef9\065\ufef9\066\ufef9\067\ufef9" +
    "\072\ufef9\073\ufef9\076\ufef9\077\ufef9\100\ufef9\106\ufef9\110" +
    "\ufef9\114\ufef9\122\ufef9\130\ufef9\131\ufef9\132\ufef9\001\002" +
    "\000\120\003\ufeff\004\ufeff\005\ufeff\006\ufeff\007\ufeff\010" +
    "\ufeff\011\ufeff\013\063\015\ufeff\021\246\024\ufeff\027\ufeff" +
    "\030\ufeff\034\062\035\060\036\ufeff\037\ufeff\040\245\041" +
    "\243\042\242\043\244\061\ufeff\062\ufeff\064\ufeff\065\ufeff" +
    "\066\ufeff\067\ufeff\072\ufeff\073\ufeff\076\ufeff\077\ufeff\100" +
    "\ufeff\106\ufeff\110\ufeff\114\ufeff\122\ufeff\130\ufeff\131\ufeff" +
    "\132\ufeff\001\002\000\034\004\040\005\035\006\043\010" +
    "\051\011\046\036\047\037\055\061\045\062\042\064\050" +
    "\065\036\066\034\067\041\001\002\000\034\004\040\005" +
    "\035\006\043\010\051\011\046\036\047\037\055\061\045" +
    "\062\042\064\050\065\036\066\034\067\041\001\002\000" +
    "\034\004\040\005\035\006\043\010\051\011\046\036\047" +
    "\037\055\061\045\062\042\064\050\065\036\066\034\067" +
    "\041\001\002\000\034\004\040\005\035\006\043\010\051" +
    "\011\046\036\047\037\055\061\045\062\042\064\050\065" +
    "\036\066\034\067\041\001\002\000\034\004\040\005\035" +
    "\006\043\010\051\011\046\036\047\037\055\061\045\062" +
    "\042\064\050\065\036\066\034\067\041\001\002\000\120" +
    "\003\ufef3\004\ufef3\005\ufef3\006\ufef3\007\ufef3\010\ufef3\011" +
    "\ufef3\013\063\015\ufef3\021\ufef3\024\ufef3\027\ufef3\030\ufef3" +
    "\034\062\035\060\036\ufef3\037\ufef3\040\ufef3\041\ufef3\042" +
    "\ufef3\043\ufef3\061\ufef3\062\ufef3\064\ufef3\065\ufef3\066\ufef3" +
    "\067\ufef3\072\ufef3\073\ufef3\076\ufef3\077\ufef3\100\ufef3\106" +
    "\ufef3\110\ufef3\114\ufef3\122\ufef3\130\ufef3\131\ufef3\132\ufef3" +
    "\001\002\000\120\003\ufeef\004\ufeef\005\ufeef\006\ufeef\007" +
    "\ufeef\010\ufeef\011\ufeef\013\063\015\ufeef\021\ufeef\024\ufeef" +
    "\027\ufeef\030\ufeef\034\062\035\060\036\ufeef\037\ufeef\040" +
    "\ufeef\041\ufeef\042\ufeef\043\ufeef\061\ufeef\062\ufeef\064\ufeef" +
    "\065\ufeef\066\ufeef\067\ufeef\072\ufeef\073\ufeef\076\ufeef\077" +
    "\ufeef\100\ufeef\106\ufeef\110\ufeef\114\ufeef\122\ufeef\130\ufeef" +
    "\131\ufeef\132\ufeef\001\002\000\120\003\ufef2\004\ufef2\005" +
    "\ufef2\006\ufef2\007\ufef2\010\ufef2\011\ufef2\013\063\015\ufef2" +
    "\021\ufef2\024\ufef2\027\ufef2\030\ufef2\034\062\035\060\036" +
    "\ufef2\037\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2\061\ufef2" +
    "\062\ufef2\064\ufef2\065\ufef2\066\ufef2\067\ufef2\072\ufef2\073" +
    "\ufef2\076\ufef2\077\ufef2\100\ufef2\106\ufef2\110\ufef2\114\ufef2" +
    "\122\ufef2\130\ufef2\131\ufef2\132\ufef2\001\002\000\120\003" +
    "\ufef0\004\ufef0\005\ufef0\006\ufef0\007\ufef0\010\ufef0\011\ufef0" +
    "\013\063\015\ufef0\021\ufef0\024\ufef0\027\ufef0\030\ufef0\034" +
    "\062\035\060\036\ufef0\037\ufef0\040\ufef0\041\ufef0\042\ufef0" +
    "\043\ufef0\061\ufef0\062\ufef0\064\ufef0\065\ufef0\066\ufef0\067" +
    "\ufef0\072\ufef0\073\ufef0\076\ufef0\077\ufef0\100\ufef0\106\ufef0" +
    "\110\ufef0\114\ufef0\122\ufef0\130\ufef0\131\ufef0\132\ufef0\001" +
    "\002\000\120\003\ufef1\004\ufef1\005\ufef1\006\ufef1\007\ufef1" +
    "\010\ufef1\011\ufef1\013\063\015\ufef1\021\ufef1\024\ufef1\027" +
    "\ufef1\030\ufef1\034\062\035\060\036\ufef1\037\ufef1\040\ufef1" +
    "\041\ufef1\042\ufef1\043\ufef1\061\ufef1\062\ufef1\064\ufef1\065" +
    "\ufef1\066\ufef1\067\ufef1\072\ufef1\073\ufef1\076\ufef1\077\ufef1" +
    "\100\ufef1\106\ufef1\110\ufef1\114\ufef1\122\ufef1\130\ufef1\131" +
    "\ufef1\132\ufef1\001\002\000\112\003\ufefb\004\ufefb\005\ufefb" +
    "\006\ufefb\007\ufefb\010\ufefb\011\ufefb\015\ufefb\021\ufefb\024" +
    "\ufefb\027\ufefb\030\ufefb\036\ufefb\037\ufefb\040\ufefb\041\ufefb" +
    "\042\ufefb\043\ufefb\061\ufefb\062\ufefb\064\ufefb\065\ufefb\066" +
    "\ufefb\067\ufefb\072\ufefb\073\ufefb\076\ufefb\077\ufefb\100\ufefb" +
    "\106\ufefb\110\ufefb\114\ufefb\122\ufefb\130\ufefb\131\ufefb\132" +
    "\ufefb\001\002\000\120\003\uff01\004\uff01\005\uff01\006\uff01" +
    "\007\uff01\010\uff01\011\uff01\013\063\015\uff01\021\uff01\024" +
    "\uff01\027\uff01\030\uff01\034\062\035\060\036\uff01\037\uff01" +
    "\040\uff01\041\uff01\042\uff01\043\uff01\061\uff01\062\uff01\064" +
    "\uff01\065\uff01\066\uff01\067\uff01\072\uff01\073\uff01\076\uff01" +
    "\077\uff01\100\uff01\106\uff01\110\uff01\114\uff01\122\uff01\130" +
    "\uff01\131\uff01\132\uff01\001\002\000\112\003\ufefd\004\ufefd" +
    "\005\ufefd\006\ufefd\007\ufefd\010\ufefd\011\ufefd\015\ufefd\021" +
    "\ufefd\024\ufefd\027\ufefd\030\ufefd\036\ufefd\037\ufefd\040\ufefd" +
    "\041\ufefd\042\ufefd\043\ufefd\061\ufefd\062\ufefd\064\ufefd\065" +
    "\ufefd\066\ufefd\067\ufefd\072\ufefd\073\ufefd\076\ufefd\077\ufefd" +
    "\100\ufefd\106\ufefd\110\ufefd\114\ufefd\122\ufefd\130\ufefd\131" +
    "\ufefd\132\ufefd\001\002\000\120\003\uff03\004\uff03\005\uff03" +
    "\006\uff03\007\uff03\010\uff03\011\uff03\013\063\015\uff03\021" +
    "\uff03\024\uff03\027\uff03\030\uff03\034\062\035\060\036\uff03" +
    "\037\uff03\040\uff03\041\uff03\042\uff03\043\uff03\061\uff03\062" +
    "\uff03\064\uff03\065\uff03\066\uff03\067\uff03\072\uff03\073\uff03" +
    "\076\uff03\077\uff03\100\uff03\106\uff03\110\uff03\114\uff03\122" +
    "\uff03\130\uff03\131\uff03\132\uff03\001\002\000\112\003\ufefc" +
    "\004\ufefc\005\ufefc\006\ufefc\007\ufefc\010\ufefc\011\ufefc\015" +
    "\ufefc\021\ufefc\024\ufefc\027\ufefc\030\ufefc\036\ufefc\037\ufefc" +
    "\040\ufefc\041\ufefc\042\ufefc\043\ufefc\061\ufefc\062\ufefc\064" +
    "\ufefc\065\ufefc\066\ufefc\067\ufefc\072\ufefc\073\ufefc\076\ufefc" +
    "\077\ufefc\100\ufefc\106\ufefc\110\ufefc\114\ufefc\122\ufefc\130" +
    "\ufefc\131\ufefc\132\ufefc\001\002\000\120\003\uff02\004\uff02" +
    "\005\uff02\006\uff02\007\uff02\010\uff02\011\uff02\013\063\015" +
    "\uff02\021\uff02\024\uff02\027\uff02\030\uff02\034\062\035\060" +
    "\036\uff02\037\uff02\040\uff02\041\uff02\042\uff02\043\uff02\061" +
    "\uff02\062\uff02\064\uff02\065\uff02\066\uff02\067\uff02\072\uff02" +
    "\073\uff02\076\uff02\077\uff02\100\uff02\106\uff02\110\uff02\114" +
    "\uff02\122\uff02\130\uff02\131\uff02\132\uff02\001\002\000\112" +
    "\003\ufefa\004\ufefa\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011" +
    "\ufefa\015\ufefa\021\ufefa\024\ufefa\027\ufefa\030\ufefa\036\ufefa" +
    "\037\ufefa\040\ufefa\041\ufefa\042\ufefa\043\ufefa\061\ufefa\062" +
    "\ufefa\064\ufefa\065\ufefa\066\ufefa\067\ufefa\072\ufefa\073\ufefa" +
    "\076\ufefa\077\ufefa\100\ufefa\106\ufefa\110\ufefa\114\ufefa\122" +
    "\ufefa\130\ufefa\131\ufefa\132\ufefa\001\002\000\120\003\uff00" +
    "\004\uff00\005\uff00\006\uff00\007\uff00\010\uff00\011\uff00\013" +
    "\063\015\uff00\021\uff00\024\uff00\027\uff00\030\uff00\034\062" +
    "\035\060\036\uff00\037\uff00\040\uff00\041\uff00\042\uff00\043" +
    "\uff00\061\uff00\062\uff00\064\uff00\065\uff00\066\uff00\067\uff00" +
    "\072\uff00\073\uff00\076\uff00\077\uff00\100\uff00\106\uff00\110" +
    "\uff00\114\uff00\122\uff00\130\uff00\131\uff00\132\uff00\001\002" +
    "\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0" +
    "\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130" +
    "\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\267\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\270\131\221" +
    "\132\203\001\002\000\006\006\326\130\327\001\002\000" +
    "\006\003\271\006\272\001\002\000\006\007\317\027\320" +
    "\001\002\000\052\003\274\004\040\005\035\006\043\010" +
    "\051\011\046\021\206\027\273\036\047\037\055\040\176" +
    "\041\226\042\220\043\215\061\045\062\231\064\050\065" +
    "\036\066\034\067\041\001\002\000\074\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\001\002\000\004\007\311\001\002\000\006\007" +
    "\276\027\277\001\002\000\010\003\303\024\302\027\304" +
    "\001\002\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011" +
    "\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0" +
    "\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000" +
    "\074\004\040\005\035\006\043\010\051\011\046\021\206" +
    "\030\301\036\047\037\055\040\176\041\226\042\220\043" +
    "\215\061\045\062\231\064\050\065\036\066\034\067\041" +
    "\072\213\076\201\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\100\004\uffa5" +
    "\005\uffa5\006\uffa5\010\uffa5\011\uffa5\021\uffa5\030\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\061\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\072\uffa5\073" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\106\uffa5\110\uffa5\114\uffa5" +
    "\122\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002\000\100\004" +
    "\uff99\005\uff99\006\uff99\010\uff99\011\uff99\021\uff99\030\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\061" +
    "\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067\uff99\072\uff99" +
    "\073\uff99\076\uff99\077\uff99\100\uff99\106\uff99\110\uff99\114" +
    "\uff99\122\uff99\130\uff99\131\uff99\132\uff99\001\002\000\074" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072" +
    "\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0" +
    "\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0" +
    "\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\001\002\000\074\004\040\005\035\006\043" +
    "\010\051\011\046\021\206\030\306\036\047\037\055\040" +
    "\176\041\226\042\220\043\215\061\045\062\231\064\050" +
    "\065\036\066\034\067\041\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\100\004\uffa8\005\uffa8\006\uffa8\010\uffa8\011" +
    "\uffa8\021\uffa8\030\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\072\uffa8\073\uffa8\076\uffa8\077\uffa8\100\uffa8" +
    "\106\uffa8\110\uffa8\114\uffa8\122\uffa8\130\uffa8\131\uffa8\132" +
    "\uffa8\001\002\000\074\004\040\005\035\006\043\010\051" +
    "\011\046\021\206\030\310\036\047\037\055\040\176\041" +
    "\226\042\220\043\215\061\045\062\231\064\050\065\036" +
    "\066\034\067\041\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\100\004\uffa2\005\uffa2\006\uffa2\010\uffa2\011\uffa2\021" +
    "\uffa2\030\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\072\uffa2\073\uffa2\076\uffa2\077\uffa2\100\uffa2\106\uffa2" +
    "\110\uffa2\114\uffa2\122\uffa2\130\uffa2\131\uffa2\132\uffa2\001" +
    "\002\000\004\027\312\001\002\000\074\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\001\002\000\074\004\040\005\035\006\043\010" +
    "\051\011\046\021\206\030\314\036\047\037\055\040\176" +
    "\041\226\042\220\043\215\061\045\062\231\064\050\065" +
    "\036\066\034\067\041\072\213\076\201\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\100\004\uffa7\005\uffa7\006\uffa7\010\uffa7\011\uffa7" +
    "\021\uffa7\030\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\072\uffa7\073\uffa7\076\uffa7\077\uffa7\100\uffa7\106" +
    "\uffa7\110\uffa7\114\uffa7\122\uffa7\130\uffa7\131\uffa7\132\uffa7" +
    "\001\002\000\074\004\040\005\035\006\043\010\051\011" +
    "\046\021\206\030\316\036\047\037\055\040\176\041\226" +
    "\042\220\043\215\061\045\062\231\064\050\065\036\066" +
    "\034\067\041\072\213\076\201\100\230\106\202\110\207" +
    "\114\210\122\216\130\222\131\221\132\203\001\002\000" +
    "\100\004\uffa4\005\uffa4\006\uffa4\010\uffa4\011\uffa4\021\uffa4" +
    "\030\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\072\uffa4\073\uffa4\076\uffa4\077\uffa4\100\uffa4\106\uffa4\110" +
    "\uffa4\114\uffa4\122\uffa4\130\uffa4\131\uffa4\132\uffa4\001\002" +
    "\000\004\027\323\001\002\000\074\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0" +
    "\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132" +
    "\uffe0\001\002\000\074\004\040\005\035\006\043\010\051" +
    "\011\046\021\206\030\322\036\047\037\055\040\176\041" +
    "\226\042\220\043\215\061\045\062\231\064\050\065\036" +
    "\066\034\067\041\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\100\004\uffa3\005\uffa3\006\uffa3\010\uffa3\011\uffa3\021" +
    "\uffa3\030\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\072\uffa3\073\uffa3\076\uffa3\077\uffa3\100\uffa3\106\uffa3" +
    "\110\uffa3\114\uffa3\122\uffa3\130\uffa3\131\uffa3\132\uffa3\001" +
    "\002\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0" +
    "\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114" +
    "\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074" +
    "\004\040\005\035\006\043\010\051\011\046\021\206\030" +
    "\325\036\047\037\055\040\176\041\226\042\220\043\215" +
    "\061\045\062\231\064\050\065\036\066\034\067\041\072" +
    "\213\076\201\100\230\106\202\110\207\114\210\122\216" +
    "\130\222\131\221\132\203\001\002\000\100\004\uffa6\005" +
    "\uffa6\006\uffa6\010\uffa6\011\uffa6\021\uffa6\030\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\061\uffa6\062" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\072\uffa6\073\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\106\uffa6\110\uffa6\114\uffa6\122" +
    "\uffa6\130\uffa6\131\uffa6\132\uffa6\001\002\000\046\004\040" +
    "\005\035\006\043\010\051\011\046\021\206\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\001\002\000\006\003" +
    "\330\006\331\001\002\000\006\007\342\024\343\001\002" +
    "\000\052\003\333\004\040\005\035\006\043\010\051\011" +
    "\046\021\206\024\332\036\047\037\055\040\176\041\226" +
    "\042\220\043\215\061\045\062\231\064\050\065\036\066" +
    "\034\067\041\001\002\000\100\004\uff9d\005\uff9d\006\uff9d" +
    "\010\uff9d\011\uff9d\021\uff9d\030\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\061\uff9d\062\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\072\uff9d\073\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\106\uff9d\110\uff9d\114\uff9d\122\uff9d\130\uff9d" +
    "\131\uff9d\132\uff9d\001\002\000\004\007\340\001\002\000" +
    "\006\007\336\024\335\001\002\000\100\004\uff9e\005\uff9e" +
    "\006\uff9e\010\uff9e\011\uff9e\021\uff9e\030\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\061\uff9e\062\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\072\uff9e\073\uff9e\076" +
    "\uff9e\077\uff9e\100\uff9e\106\uff9e\110\uff9e\114\uff9e\122\uff9e" +
    "\130\uff9e\131\uff9e\132\uff9e\001\002\000\102\004\uff9b\005" +
    "\uff9b\006\uff9b\010\uff9b\011\uff9b\021\uff9b\024\337\030\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\061" +
    "\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\072\uff9b" +
    "\073\uff9b\076\uff9b\077\uff9b\100\uff9b\106\uff9b\110\uff9b\114" +
    "\uff9b\122\uff9b\130\uff9b\131\uff9b\132\uff9b\001\002\000\100" +
    "\004\uffa1\005\uffa1\006\uffa1\010\uffa1\011\uffa1\021\uffa1\030" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\072" +
    "\uffa1\073\uffa1\076\uffa1\077\uffa1\100\uffa1\106\uffa1\110\uffa1" +
    "\114\uffa1\122\uffa1\130\uffa1\131\uffa1\132\uffa1\001\002\000" +
    "\004\024\341\001\002\000\100\004\uffa0\005\uffa0\006\uffa0" +
    "\010\uffa0\011\uffa0\021\uffa0\030\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\061\uffa0\062\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\072\uffa0\073\uffa0\076\uffa0\077" +
    "\uffa0\100\uffa0\106\uffa0\110\uffa0\114\uffa0\122\uffa0\130\uffa0" +
    "\131\uffa0\132\uffa0\001\002\000\004\024\344\001\002\000" +
    "\100\004\uff9c\005\uff9c\006\uff9c\010\uff9c\011\uff9c\021\uff9c" +
    "\030\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\072\uff9c\073\uff9c\076\uff9c\077\uff9c\100\uff9c\106\uff9c\110" +
    "\uff9c\114\uff9c\122\uff9c\130\uff9c\131\uff9c\132\uff9c\001\002" +
    "\000\100\004\uff9f\005\uff9f\006\uff9f\010\uff9f\011\uff9f\021" +
    "\uff9f\030\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f\066\uff9f\067" +
    "\uff9f\072\uff9f\073\uff9f\076\uff9f\077\uff9f\100\uff9f\106\uff9f" +
    "\110\uff9f\114\uff9f\122\uff9f\130\uff9f\131\uff9f\132\uff9f\001" +
    "\002\000\004\007\346\001\002\000\004\024\347\001\002" +
    "\000\100\004\uff98\005\uff98\006\uff98\010\uff98\011\uff98\021" +
    "\uff98\030\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98" +
    "\043\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\072\uff98\073\uff98\076\uff98\077\uff98\100\uff98\106\uff98" +
    "\110\uff98\114\uff98\122\uff98\130\uff98\131\uff98\132\uff98\001" +
    "\002\000\074\004\040\005\035\006\043\010\051\011\046" +
    "\021\206\030\351\036\047\037\055\040\176\041\226\042" +
    "\220\043\215\061\045\062\231\064\050\065\036\066\034" +
    "\067\041\072\213\076\201\100\230\106\202\110\207\114" +
    "\210\122\216\130\352\131\221\132\203\001\002\000\004" +
    "\130\357\001\002\000\006\003\271\006\353\001\002\000" +
    "\052\003\274\004\040\005\035\006\043\010\051\011\046" +
    "\021\206\027\273\036\047\037\055\040\176\041\226\042" +
    "\220\043\215\061\045\062\231\064\050\065\036\066\034" +
    "\067\041\001\002\000\006\007\355\027\277\001\002\000" +
    "\010\003\303\024\356\027\304\001\002\000\100\004\uff97" +
    "\005\uff97\006\uff97\010\uff97\011\uff97\021\uff97\030\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\061\uff97" +
    "\062\uff97\064\uff97\065\uff97\066\uff97\067\uff97\072\uff97\073" +
    "\uff97\076\uff97\077\uff97\100\uff97\106\uff97\110\uff97\114\uff97" +
    "\122\uff97\130\uff97\131\uff97\132\uff97\001\002\000\004\006" +
    "\360\001\002\000\046\004\040\005\035\006\043\010\051" +
    "\011\046\021\206\036\047\037\055\040\176\041\226\042" +
    "\220\043\215\061\045\062\231\064\050\065\036\066\034" +
    "\067\041\001\002\000\004\007\362\001\002\000\004\024" +
    "\363\001\002\000\100\004\uff9a\005\uff9a\006\uff9a\010\uff9a" +
    "\011\uff9a\021\uff9a\030\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\061\uff9a\062\uff9a\064\uff9a\065\uff9a" +
    "\066\uff9a\067\uff9a\072\uff9a\073\uff9a\076\uff9a\077\uff9a\100" +
    "\uff9a\106\uff9a\110\uff9a\114\uff9a\122\uff9a\130\uff9a\131\uff9a" +
    "\132\uff9a\001\002\000\120\003\ufef7\004\ufef7\005\ufef7\006" +
    "\ufef7\007\ufef7\010\ufef7\011\ufef7\013\063\015\ufef7\021\ufef7" +
    "\024\ufef7\027\ufef7\030\ufef7\034\062\035\060\036\ufef7\037" +
    "\ufef7\040\ufef7\041\ufef7\042\ufef7\043\ufef7\061\ufef7\062\ufef7" +
    "\064\ufef7\065\ufef7\066\ufef7\067\ufef7\072\ufef7\073\ufef7\076" +
    "\ufef7\077\ufef7\100\ufef7\106\ufef7\110\ufef7\114\ufef7\122\ufef7" +
    "\130\ufef7\131\ufef7\132\ufef7\001\002\000\100\004\uffd8\005" +
    "\uffd8\006\uffd8\010\uffd8\011\uffd8\021\uffd8\030\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\061\uffd8\062" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\072\uffd8\073\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\106\uffd8\110\uffd8\114\uffd8\122" +
    "\uffd8\130\uffd8\131\uffd8\132\uffd8\001\002\000\052\003\274" +
    "\004\040\005\035\006\043\010\051\011\046\021\206\027" +
    "\273\036\047\037\055\040\176\041\226\042\220\043\215" +
    "\061\045\062\231\064\050\065\036\066\034\067\041\001" +
    "\002\000\006\007\370\027\277\001\002\000\006\003\303" +
    "\027\304\001\002\000\100\004\uff62\005\uff62\006\uff62\010" +
    "\uff62\011\uff62\021\uff62\030\uff62\036\uff62\037\uff62\040\uff62" +
    "\041\uff62\042\uff62\043\uff62\061\uff62\062\uff62\064\uff62\065" +
    "\uff62\066\uff62\067\uff62\072\uff62\073\uff62\076\uff62\077\uff62" +
    "\100\uff62\106\uff62\110\uff62\114\uff62\122\uff62\130\uff62\131" +
    "\uff62\132\uff62\001\002\000\006\007\u0107\062\u0108\001\002" +
    "\000\004\024\u0106\001\002\000\010\003\376\007\375\062" +
    "\377\001\002\000\102\004\uff65\005\uff65\006\uff65\010\uff65" +
    "\011\uff65\021\uff65\024\u0105\030\uff65\036\uff65\037\uff65\040" +
    "\uff65\041\uff65\042\uff65\043\uff65\061\uff65\062\uff65\064\uff65" +
    "\065\uff65\066\uff65\067\uff65\072\uff65\073\uff65\076\uff65\077" +
    "\uff65\100\uff65\106\uff65\110\uff65\114\uff65\122\uff65\130\uff65" +
    "\131\uff65\132\uff65\001\002\000\004\024\u0104\001\002\000" +
    "\006\003\u0101\007\u0100\001\002\000\102\004\uff66\005\uff66" +
    "\006\uff66\010\uff66\011\uff66\021\uff66\024\u0103\030\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\061\uff66" +
    "\062\uff66\064\uff66\065\uff66\066\uff66\067\uff66\072\uff66\073" +
    "\uff66\076\uff66\077\uff66\100\uff66\106\uff66\110\uff66\114\uff66" +
    "\122\uff66\130\uff66\131\uff66\132\uff66\001\002\000\004\024" +
    "\u0102\001\002\000\100\004\uff6c\005\uff6c\006\uff6c\010\uff6c" +
    "\011\uff6c\021\uff6c\030\uff6c\036\uff6c\037\uff6c\040\uff6c\041" +
    "\uff6c\042\uff6c\043\uff6c\061\uff6c\062\uff6c\064\uff6c\065\uff6c" +
    "\066\uff6c\067\uff6c\072\uff6c\073\uff6c\076\uff6c\077\uff6c\100" +
    "\uff6c\106\uff6c\110\uff6c\114\uff6c\122\uff6c\130\uff6c\131\uff6c" +
    "\132\uff6c\001\002\000\100\004\uff70\005\uff70\006\uff70\010" +
    "\uff70\011\uff70\021\uff70\030\uff70\036\uff70\037\uff70\040\uff70" +
    "\041\uff70\042\uff70\043\uff70\061\uff70\062\uff70\064\uff70\065" +
    "\uff70\066\uff70\067\uff70\072\uff70\073\uff70\076\uff70\077\uff70" +
    "\100\uff70\106\uff70\110\uff70\114\uff70\122\uff70\130\uff70\131" +
    "\uff70\132\uff70\001\002\000\100\004\uff69\005\uff69\006\uff69" +
    "\010\uff69\011\uff69\021\uff69\030\uff69\036\uff69\037\uff69\040" +
    "\uff69\041\uff69\042\uff69\043\uff69\061\uff69\062\uff69\064\uff69" +
    "\065\uff69\066\uff69\067\uff69\072\uff69\073\uff69\076\uff69\077" +
    "\uff69\100\uff69\106\uff69\110\uff69\114\uff69\122\uff69\130\uff69" +
    "\131\uff69\132\uff69\001\002\000\100\004\uff6f\005\uff6f\006" +
    "\uff6f\010\uff6f\011\uff6f\021\uff6f\030\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\042\uff6f\043\uff6f\061\uff6f\062\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\072\uff6f\073\uff6f\076\uff6f" +
    "\077\uff6f\100\uff6f\106\uff6f\110\uff6f\114\uff6f\122\uff6f\130" +
    "\uff6f\131\uff6f\132\uff6f\001\002\000\100\004\uff6b\005\uff6b" +
    "\006\uff6b\010\uff6b\011\uff6b\021\uff6b\030\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\061\uff6b\062\uff6b" +
    "\064\uff6b\065\uff6b\066\uff6b\067\uff6b\072\uff6b\073\uff6b\076" +
    "\uff6b\077\uff6b\100\uff6b\106\uff6b\110\uff6b\114\uff6b\122\uff6b" +
    "\130\uff6b\131\uff6b\132\uff6b\001\002\000\004\024\u010b\001" +
    "\002\000\004\007\u0109\001\002\000\004\024\u010a\001\002" +
    "\000\100\004\uff6d\005\uff6d\006\uff6d\010\uff6d\011\uff6d\021" +
    "\uff6d\030\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d" +
    "\043\uff6d\061\uff6d\062\uff6d\064\uff6d\065\uff6d\066\uff6d\067" +
    "\uff6d\072\uff6d\073\uff6d\076\uff6d\077\uff6d\100\uff6d\106\uff6d" +
    "\110\uff6d\114\uff6d\122\uff6d\130\uff6d\131\uff6d\132\uff6d\001" +
    "\002\000\100\004\uff6a\005\uff6a\006\uff6a\010\uff6a\011\uff6a" +
    "\021\uff6a\030\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\061\uff6a\062\uff6a\064\uff6a\065\uff6a\066\uff6a" +
    "\067\uff6a\072\uff6a\073\uff6a\076\uff6a\077\uff6a\100\uff6a\106" +
    "\uff6a\110\uff6a\114\uff6a\122\uff6a\130\uff6a\131\uff6a\132\uff6a" +
    "\001\002\000\120\003\ufef6\004\ufef6\005\ufef6\006\ufef6\007" +
    "\ufef6\010\ufef6\011\ufef6\013\063\015\ufef6\021\ufef6\024\ufef6" +
    "\027\ufef6\030\ufef6\034\062\035\060\036\ufef6\037\ufef6\040" +
    "\ufef6\041\ufef6\042\ufef6\043\ufef6\061\ufef6\062\ufef6\064\ufef6" +
    "\065\ufef6\066\ufef6\067\ufef6\072\ufef6\073\ufef6\076\ufef6\077" +
    "\ufef6\100\ufef6\106\ufef6\110\ufef6\114\ufef6\122\ufef6\130\ufef6" +
    "\131\ufef6\132\ufef6\001\002\000\006\007\u0177\027\u0178\001" +
    "\002\000\030\003\u0111\006\u0115\027\u0114\036\047\037\055" +
    "\061\045\062\u0113\064\050\065\036\066\034\067\041\001" +
    "\002\000\020\004\uff16\005\uff16\007\uff16\010\uff16\011\uff16" +
    "\012\uff16\027\uff16\001\002\000\020\004\u0121\005\u0124\007" +
    "\u0163\010\u0122\011\u0123\012\u0120\027\u0164\001\002\000\016" +
    "\004\u011a\005\u011d\007\u015e\010\u011b\011\u011c\012\u0118\001" +
    "\002\000\020\004\uff15\005\uff15\007\uff15\010\uff15\011\uff15" +
    "\012\uff15\027\uff15\001\002\000\026\004\uff19\005\uff19\006" +
    "\u015a\007\uff19\010\uff19\011\uff19\012\uff19\027\uff19\036\124" +
    "\037\125\001\002\000\006\073\uff7f\077\uff7f\001\002\000" +
    "\026\003\u0117\006\u0115\036\047\037\055\061\045\062\u0113" +
    "\064\050\065\036\066\034\067\041\001\002\000\016\004" +
    "\u0121\005\u0124\007\u0133\010\u0122\011\u0123\012\u0120\001\002" +
    "\000\016\004\u011a\005\u011d\007\u0119\010\u011b\011\u011c\012" +
    "\u0118\001\002\000\026\003\u011f\006\u0115\036\047\037\055" +
    "\061\045\062\u0113\064\050\065\036\066\034\067\041\001" +
    "\002\000\020\004\uff0a\005\uff0a\007\uff0a\010\uff0a\011\uff0a" +
    "\012\uff0a\027\uff0a\001\002\000\026\003\u011f\006\u0115\036" +
    "\047\037\055\061\045\062\u0113\064\050\065\036\066\034" +
    "\067\041\001\002\000\026\003\u011f\006\u0115\036\047\037" +
    "\055\061\045\062\u0113\064\050\065\036\066\034\067\041" +
    "\001\002\000\026\003\u011f\006\u0115\036\047\037\055\061" +
    "\045\062\u0113\064\050\065\036\066\034\067\041\001\002" +
    "\000\026\003\u011f\006\u0115\036\047\037\055\061\045\062" +
    "\u0113\064\050\065\036\066\034\067\041\001\002\000\020" +
    "\004\uff0d\005\uff0d\007\uff0d\010\uff0d\011\uff0d\012\uff0d\027" +
    "\uff0d\001\002\000\014\004\u011a\005\u011d\010\u011b\011\u011c" +
    "\012\u0118\001\002\000\026\003\u012e\006\u0115\036\047\037" +
    "\055\061\045\062\u0113\064\050\065\036\066\034\067\041" +
    "\001\002\000\026\003\u012c\006\u0115\036\047\037\055\061" +
    "\045\062\u0113\064\050\065\036\066\034\067\041\001\002" +
    "\000\026\003\u012a\006\u0115\036\047\037\055\061\045\062" +
    "\u0113\064\050\065\036\066\034\067\041\001\002\000\026" +
    "\003\u0128\006\u0115\036\047\037\055\061\045\062\u0113\064" +
    "\050\065\036\066\034\067\041\001\002\000\026\003\u0126" +
    "\006\u0115\036\047\037\055\061\045\062\u0113\064\050\065" +
    "\036\066\034\067\041\001\002\000\020\004\uff1d\005\uff1d" +
    "\007\uff1d\010\uff1d\011\uff1d\012\uff1d\027\uff1d\001\002\000" +
    "\020\004\u011a\005\u011d\007\uff12\010\u011b\011\u011c\012\u0118" +
    "\027\uff12\001\002\000\020\004\uff1c\005\uff1c\007\uff1c\010" +
    "\uff1c\011\uff1c\012\uff1c\027\uff1c\001\002\000\020\004\u011a" +
    "\005\u011d\007\uff11\010\u011b\011\u011c\012\u0118\027\uff11\001" +
    "\002\000\020\004\uff1e\005\u0124\007\uff1e\010\uff1e\011\u0123" +
    "\012\u0120\027\uff1e\001\002\000\020\004\u011a\005\u011d\007" +
    "\uff13\010\u011b\011\u011c\012\u0118\027\uff13\001\002\000\020" +
    "\004\uff1f\005\u0124\007\uff1f\010\uff1f\011\u0123\012\u0120\027" +
    "\uff1f\001\002\000\020\004\u011a\005\u011d\007\uff14\010\u011b" +
    "\011\u011c\012\u0118\027\uff14\001\002\000\020\004\uff1b\005" +
    "\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\027\uff1b\001\002" +
    "\000\020\004\u011a\005\u011d\007\uff10\010\u011b\011\u011c\012" +
    "\u0118\027\uff10\001\002\000\020\004\uff0c\005\uff0c\007\uff0c" +
    "\010\uff0c\011\uff0c\012\uff0c\027\uff0c\001\002\000\020\004" +
    "\uff0e\005\u0124\007\uff0e\010\uff0e\011\u0123\012\u0120\027\uff0e" +
    "\001\002\000\020\004\uff0f\005\u0124\007\uff0f\010\uff0f\011" +
    "\u0123\012\u0120\027\uff0f\001\002\000\020\004\uff0b\005\uff0b" +
    "\007\uff0b\010\uff0b\011\uff0b\012\uff0b\027\uff0b\001\002\000" +
    "\020\004\uff1a\005\uff1a\007\uff1a\010\uff1a\011\uff1a\012\uff1a" +
    "\027\uff1a\001\002\000\006\073\u0138\077\u0135\001\002\000" +
    "\022\003\u014c\023\u014b\027\u014d\061\045\064\050\065\036" +
    "\066\034\067\041\001\002\000\004\030\u0149\001\002\000" +
    "\010\030\uff80\073\uff80\077\uff80\001\002\000\016\003\u0139" +
    "\061\045\064\050\065\036\066\034\067\041\001\002\000" +
    "\004\023\u0144\001\002\000\104\004\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\021\uffe0\023\u013d\027\u013b\030\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0" +
    "\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\073" +
    "\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0" +
    "\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130" +
    "\uffe0\131\uffe0\132\uffe0\001\002\000\100\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\uff79\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\073\uff79\076" +
    "\201\077\uff79\100\230\106\202\110\207\114\210\122\216" +
    "\130\222\131\221\132\203\001\002\000\102\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\027\u013e\030\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0\110\uffe0\114" +
    "\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072" +
    "\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0" +
    "\130\uffe0\131\uffe0\132\uffe0\001\002\000\100\004\040\005" +
    "\035\006\043\010\051\011\046\021\206\030\uff7e\036\047" +
    "\037\055\040\176\041\226\042\220\043\215\061\045\062" +
    "\231\064\050\065\036\066\034\067\041\072\213\073\uff7e" +
    "\076\201\077\uff7e\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\074\004\040" +
    "\005\035\006\043\010\051\011\046\021\206\030\u0141\036" +
    "\047\037\055\040\176\041\226\042\220\043\215\061\045" +
    "\062\231\064\050\065\036\066\034\067\041\072\213\076" +
    "\201\100\230\106\202\110\207\114\210\122\216\130\222" +
    "\131\221\132\203\001\002\000\010\030\uff7d\073\uff7d\077" +
    "\uff7d\001\002\000\074\004\040\005\035\006\043\010\051" +
    "\011\046\021\206\030\u0143\036\047\037\055\040\176\041" +
    "\226\042\220\043\215\061\045\062\231\064\050\065\036" +
    "\066\034\067\041\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\010\030\uff7a\073\uff7a\077\uff7a\001\002\000\102\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\027\u0145" +
    "\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\072\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0\110" +
    "\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002" +
    "\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0" +
    "\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\100\004" +
    "\040\005\035\006\043\010\051\011\046\021\206\030\uff7c" +
    "\036\047\037\055\040\176\041\226\042\220\043\215\061" +
    "\045\062\231\064\050\065\036\066\034\067\041\072\213" +
    "\073\uff7c\076\201\077\uff7c\100\230\106\202\110\207\114" +
    "\210\122\216\130\222\131\221\132\203\001\002\000\074" +
    "\004\040\005\035\006\043\010\051\011\046\021\206\030" +
    "\u0148\036\047\037\055\040\176\041\226\042\220\043\215" +
    "\061\045\062\231\064\050\065\036\066\034\067\041\072" +
    "\213\076\201\100\230\106\202\110\207\114\210\122\216" +
    "\130\222\131\221\132\203\001\002\000\010\030\uff7b\073" +
    "\uff7b\077\uff7b\001\002\000\100\004\uff83\005\uff83\006\uff83" +
    "\010\uff83\011\uff83\021\uff83\030\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\061\uff83\062\uff83\064\uff83" +
    "\065\uff83\066\uff83\067\uff83\072\uff83\073\uff83\076\uff83\077" +
    "\uff83\100\uff83\106\uff83\110\uff83\114\uff83\122\uff83\130\uff83" +
    "\131\uff83\132\uff83\001\002\000\004\023\u0158\001\002\000" +
    "\102\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0" +
    "\027\u0154\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\072\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106" +
    "\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0" +
    "\001\002\000\102\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011" +
    "\uffe0\021\uffe0\027\u0150\030\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\072\uffe0\073\uffe0\076\uffe0\077\uffe0" +
    "\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\001\002\000\074\004\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106" +
    "\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0" +
    "\001\002\000\074\004\040\005\035\006\043\010\051\011" +
    "\046\021\206\030\u014f\036\047\037\055\040\176\041\226" +
    "\042\220\043\215\061\045\062\231\064\050\065\036\066" +
    "\034\067\041\072\213\076\201\100\230\106\202\110\207" +
    "\114\210\122\216\130\222\131\221\132\203\001\002\000" +
    "\010\030\uff75\073\uff75\077\uff75\001\002\000\074\004\uffe0" +
    "\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0" +
    "\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076" +
    "\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0" +
    "\131\uffe0\132\uffe0\001\002\000\100\004\040\005\035\006" +
    "\043\010\051\011\046\021\206\030\uff74\036\047\037\055" +
    "\040\176\041\226\042\220\043\215\061\045\062\231\064" +
    "\050\065\036\066\034\067\041\072\213\073\uff74\076\201" +
    "\077\uff74\100\230\106\202\110\207\114\210\122\216\130" +
    "\222\131\221\132\203\001\002\000\074\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\u0153\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\222\131\221" +
    "\132\203\001\002\000\010\030\uff73\073\uff73\077\uff73\001" +
    "\002\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0" +
    "\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114" +
    "\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\100" +
    "\004\040\005\035\006\043\010\051\011\046\021\206\030" +
    "\uff78\036\047\037\055\040\176\041\226\042\220\043\215" +
    "\061\045\062\231\064\050\065\036\066\034\067\041\072" +
    "\213\073\uff78\076\201\077\uff78\100\230\106\202\110\207" +
    "\114\210\122\216\130\222\131\221\132\203\001\002\000" +
    "\074\004\040\005\035\006\043\010\051\011\046\021\206" +
    "\030\u0157\036\047\037\055\040\176\041\226\042\220\043" +
    "\215\061\045\062\231\064\050\065\036\066\034\067\041" +
    "\072\213\076\201\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\010\030\uff77" +
    "\073\uff77\077\uff77\001\002\000\100\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\073\uffe0\076\uffe0" +
    "\077\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130" +
    "\uffe0\131\uffe0\132\uffe0\001\002\000\100\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\uff76\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\073\uff76\076" +
    "\201\077\uff76\100\230\106\202\110\207\114\210\122\216" +
    "\130\222\131\221\132\203\001\002\000\040\004\040\005" +
    "\035\006\043\007\u015c\010\051\011\046\015\131\036\047" +
    "\037\055\061\045\062\042\064\050\065\036\066\034\067" +
    "\041\001\002\000\010\003\136\007\u015d\015\134\001\002" +
    "\000\020\004\uff17\005\uff17\007\uff17\010\uff17\011\uff17\012" +
    "\uff17\027\uff17\001\002\000\020\004\uff18\005\uff18\007\uff18" +
    "\010\uff18\011\uff18\012\uff18\027\uff18\001\002\000\004\027" +
    "\u015f\001\002\000\006\073\uff7f\077\uff7f\001\002\000\006" +
    "\073\u0138\077\u0135\001\002\000\004\030\u0162\001\002\000" +
    "\100\004\uff87\005\uff87\006\uff87\010\uff87\011\uff87\021\uff87" +
    "\030\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\061\uff87\062\uff87\064\uff87\065\uff87\066\uff87\067\uff87" +
    "\072\uff87\073\uff87\076\uff87\077\uff87\100\uff87\106\uff87\110" +
    "\uff87\114\uff87\122\uff87\130\uff87\131\uff87\132\uff87\001\002" +
    "\000\006\003\u0168\027\u0169\001\002\000\006\073\uff7f\077" +
    "\uff7f\001\002\000\006\073\u0138\077\u0135\001\002\000\004" +
    "\030\u0167\001\002\000\100\004\uff86\005\uff86\006\uff86\010" +
    "\uff86\011\uff86\021\uff86\030\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\061\uff86\062\uff86\064\uff86\065" +
    "\uff86\066\uff86\067\uff86\072\uff86\073\uff86\076\uff86\077\uff86" +
    "\100\uff86\106\uff86\110\uff86\114\uff86\122\uff86\130\uff86\131" +
    "\uff86\132\uff86\001\002\000\006\073\uff7f\077\uff7f\001\002" +
    "\000\010\030\uff7f\073\uff7f\077\uff7f\001\002\000\010\030" +
    "\u016c\073\u0138\077\u0135\001\002\000\010\030\uff7f\073\uff7f" +
    "\077\uff7f\001\002\000\100\004\uff88\005\uff88\006\uff88\010" +
    "\uff88\011\uff88\021\uff88\030\uff88\036\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\061\uff88\062\uff88\064\uff88\065" +
    "\uff88\066\uff88\067\uff88\072\uff88\073\uff88\076\uff88\077\uff88" +
    "\100\uff88\106\uff88\110\uff88\114\uff88\122\uff88\130\uff88\131" +
    "\uff88\132\uff88\001\002\000\010\030\u0170\073\u0138\077\u0135" +
    "\001\002\000\010\030\uff71\073\uff71\077\u0135\001\002\000" +
    "\006\030\uff7f\073\uff7f\001\002\000\100\004\uff89\005\uff89" +
    "\006\uff89\010\uff89\011\uff89\021\uff89\030\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\061\uff89\062\uff89" +
    "\064\uff89\065\uff89\066\uff89\067\uff89\072\uff89\073\uff89\076" +
    "\uff89\077\uff89\100\uff89\106\uff89\110\uff89\114\uff89\122\uff89" +
    "\130\uff89\131\uff89\132\uff89\001\002\000\006\030\u0172\073" +
    "\u0138\001\002\000\100\004\uff81\005\uff81\006\uff81\010\uff81" +
    "\011\uff81\021\uff81\030\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\042\uff81\043\uff81\061\uff81\062\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\072\uff81\073\uff81\076\uff81\077\uff81\100" +
    "\uff81\106\uff81\110\uff81\114\uff81\122\uff81\130\uff81\131\uff81" +
    "\132\uff81\001\002\000\006\030\uff72\073\uff72\001\002\000" +
    "\006\073\u0138\077\u0135\001\002\000\004\030\u0176\001\002" +
    "\000\100\004\uff85\005\uff85\006\uff85\010\uff85\011\uff85\021" +
    "\uff85\030\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\061\uff85\062\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\uff85\072\uff85\073\uff85\076\uff85\077\uff85\100\uff85\106\uff85" +
    "\110\uff85\114\uff85\122\uff85\130\uff85\131\uff85\132\uff85\001" +
    "\002\000\004\027\u017c\001\002\000\006\073\uff7f\077\uff7f" +
    "\001\002\000\006\073\u0138\077\u0135\001\002\000\004\030" +
    "\u017b\001\002\000\100\004\uff82\005\uff82\006\uff82\010\uff82" +
    "\011\uff82\021\uff82\030\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\061\uff82\062\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\072\uff82\073\uff82\076\uff82\077\uff82\100" +
    "\uff82\106\uff82\110\uff82\114\uff82\122\uff82\130\uff82\131\uff82" +
    "\132\uff82\001\002\000\006\073\uff7f\077\uff7f\001\002\000" +
    "\006\073\u0138\077\u0135\001\002\000\004\030\u017f\001\002" +
    "\000\100\004\uff84\005\uff84\006\uff84\010\uff84\011\uff84\021" +
    "\uff84\030\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\061\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\072\uff84\073\uff84\076\uff84\077\uff84\100\uff84\106\uff84" +
    "\110\uff84\114\uff84\122\uff84\130\uff84\131\uff84\132\uff84\001" +
    "\002\000\120\003\ufef5\004\ufef5\005\ufef5\006\ufef5\007\ufef5" +
    "\010\ufef5\011\ufef5\013\063\015\ufef5\021\ufef5\024\ufef5\027" +
    "\ufef5\030\ufef5\034\062\035\060\036\ufef5\037\ufef5\040\ufef5" +
    "\041\ufef5\042\ufef5\043\ufef5\061\ufef5\062\ufef5\064\ufef5\065" +
    "\ufef5\066\ufef5\067\ufef5\072\ufef5\073\ufef5\076\ufef5\077\ufef5" +
    "\100\ufef5\106\ufef5\110\ufef5\114\ufef5\122\ufef5\130\ufef5\131" +
    "\ufef5\132\ufef5\001\002\000\100\004\uffd6\005\uffd6\006\uffd6" +
    "\010\uffd6\011\uffd6\021\uffd6\030\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\061\uffd6\062\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\072\uffd6\073\uffd6\076\uffd6\077" +
    "\uffd6\100\uffd6\106\uffd6\110\uffd6\114\uffd6\122\uffd6\130\uffd6" +
    "\131\uffd6\132\uffd6\001\002\000\100\004\uffd4\005\uffd4\006" +
    "\uffd4\010\uffd4\011\uffd4\021\uffd4\030\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\061\uffd4\062\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\072\uffd4\073\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\106\uffd4\110\uffd4\114\uffd4\122\uffd4\130" +
    "\uffd4\131\uffd4\132\uffd4\001\002\000\100\004\uffcf\005\uffcf" +
    "\006\uffcf\010\uffcf\011\uffcf\021\uffcf\030\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\061\uffcf\062\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\072\uffcf\073\uffcf\076" +
    "\uffcf\077\uffcf\100\uffcf\106\uffcf\110\uffcf\114\uffcf\122\uffcf" +
    "\130\uffcf\131\uffcf\132\uffcf\001\002\000\104\004\076\005" +
    "\101\006\uffd0\010\077\011\100\012\075\021\uffd0\024\u0185" +
    "\030\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\072\uffd0\073\uffd0\076\uffd0\077\uffd0\100\uffd0\106\uffd0\110" +
    "\uffd0\114\uffd0\122\uffd0\130\uffd0\131\uffd0\132\uffd0\001\002" +
    "\000\100\004\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\021" +
    "\uffd3\030\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\061\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\072\uffd3\073\uffd3\076\uffd3\077\uffd3\100\uffd3\106\uffd3" +
    "\110\uffd3\114\uffd3\122\uffd3\130\uffd3\131\uffd3\132\uffd3\001" +
    "\002\000\006\007\u01b1\027\u01b2\001\002\000\052\003\u0189" +
    "\004\040\005\035\006\043\010\051\011\046\021\206\027" +
    "\u0188\036\047\037\055\040\176\041\226\042\220\043\215" +
    "\061\045\062\231\064\050\065\036\066\034\067\041\001" +
    "\002\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0" +
    "\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114" +
    "\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\004" +
    "\007\u01a9\001\002\000\006\007\u018b\027\u018c\001\002\000" +
    "\006\003\u0198\027\u01a5\001\002\000\074\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\001\002\000\074\004\040\005\035\006\043\010" +
    "\051\011\046\021\206\030\u018e\036\047\037\055\040\176" +
    "\041\226\042\220\043\215\061\045\062\231\064\050\065" +
    "\036\066\034\067\041\072\213\076\201\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\102\004\uffbb\005\uffbb\006\uffbb\010\uffbb\011\uffbb" +
    "\021\uffbb\030\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\072\uffbb\073\uffbb\076\uffbb\077\uffbb\100\uffbb\102" +
    "\u018f\106\uffbb\110\uffbb\114\uffbb\122\uffbb\130\uffbb\131\uffbb" +
    "\132\uffbb\001\002\000\010\003\u0191\027\u0193\110\u0194\001" +
    "\002\000\100\004\uffbc\005\uffbc\006\uffbc\010\uffbc\011\uffbc" +
    "\021\uffbc\030\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\072\uffbc\073\uffbc\076\uffbc\077\uffbc\100\uffbc\106" +
    "\uffbc\110\uffbc\114\uffbc\122\uffbc\130\uffbc\131\uffbc\132\uffbc" +
    "\001\002\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011" +
    "\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0" +
    "\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000" +
    "\100\004\uffa9\005\uffa9\006\uffa9\010\uffa9\011\uffa9\021\uffa9" +
    "\030\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\072\uffa9\073\uffa9\076\uffa9\077\uffa9\100\uffa9\106\uffa9\110" +
    "\uffa9\114\uffa9\122\uffa9\130\uffa9\131\uffa9\132\uffa9\001\002" +
    "\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0" +
    "\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\006\003" +
    "\u0186\006\u0195\001\002\000\052\003\u0189\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\027\u0188\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\001\002\000\006\007" +
    "\u0197\027\u018c\001\002\000\006\003\u0198\027\u0199\001\002" +
    "\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0" +
    "\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130" +
    "\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\u019b\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\222\131\221" +
    "\132\203\001\002\000\102\004\uffad\005\uffad\006\uffad\010" +
    "\uffad\011\uffad\021\uffad\030\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\061\uffad\062\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\072\uffad\073\uffad\076\uffad\077\uffad" +
    "\100\uffad\102\u018f\106\uffad\110\uffad\114\uffad\122\uffad\130" +
    "\uffad\131\uffad\132\uffad\001\002\000\100\004\uffae\005\uffae" +
    "\006\uffae\010\uffae\011\uffae\021\uffae\030\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\061\uffae\062\uffae" +
    "\064\uffae\065\uffae\066\uffae\067\uffae\072\uffae\073\uffae\076" +
    "\uffae\077\uffae\100\uffae\106\uffae\110\uffae\114\uffae\122\uffae" +
    "\130\uffae\131\uffae\132\uffae\001\002\000\074\004\040\005" +
    "\035\006\043\010\051\011\046\021\206\030\u019e\036\047" +
    "\037\055\040\176\041\226\042\220\043\215\061\045\062" +
    "\231\064\050\065\036\066\034\067\041\072\213\076\201" +
    "\100\230\106\202\110\207\114\210\122\216\130\222\131" +
    "\221\132\203\001\002\000\102\004\uffb5\005\uffb5\006\uffb5" +
    "\010\uffb5\011\uffb5\021\uffb5\030\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\061\uffb5\062\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\072\uffb5\073\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\102\u018f\106\uffb5\110\uffb5\114\uffb5\122\uffb5" +
    "\130\uffb5\131\uffb5\132\uffb5\001\002\000\100\004\uffb6\005" +
    "\uffb6\006\uffb6\010\uffb6\011\uffb6\021\uffb6\030\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\061\uffb6\062" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\072\uffb6\073\uffb6" +
    "\076\uffb6\077\uffb6\100\uffb6\106\uffb6\110\uffb6\114\uffb6\122" +
    "\uffb6\130\uffb6\131\uffb6\132\uffb6\001\002\000\074\004\040" +
    "\005\035\006\043\010\051\011\046\021\206\030\u01a1\036" +
    "\047\037\055\040\176\041\226\042\220\043\215\061\045" +
    "\062\231\064\050\065\036\066\034\067\041\072\213\076" +
    "\201\100\230\106\202\110\207\114\210\122\216\130\222" +
    "\131\221\132\203\001\002\000\102\004\uffac\005\uffac\006" +
    "\uffac\010\uffac\011\uffac\021\uffac\030\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\061\uffac\062\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\072\uffac\073\uffac\076\uffac" +
    "\077\uffac\100\uffac\102\u018f\106\uffac\110\uffac\114\uffac\122" +
    "\uffac\130\uffac\131\uffac\132\uffac\001\002\000\100\004\uffab" +
    "\005\uffab\006\uffab\010\uffab\011\uffab\021\uffab\030\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\061\uffab" +
    "\062\uffab\064\uffab\065\uffab\066\uffab\067\uffab\072\uffab\073" +
    "\uffab\076\uffab\077\uffab\100\uffab\106\uffab\110\uffab\114\uffab" +
    "\122\uffab\130\uffab\131\uffab\132\uffab\001\002\000\074\004" +
    "\040\005\035\006\043\010\051\011\046\021\206\030\u01a4" +
    "\036\047\037\055\040\176\041\226\042\220\043\215\061" +
    "\045\062\231\064\050\065\036\066\034\067\041\072\213" +
    "\076\201\100\230\106\202\110\207\114\210\122\216\130" +
    "\222\131\221\132\203\001\002\000\100\004\uffaa\005\uffaa" +
    "\006\uffaa\010\uffaa\011\uffaa\021\uffaa\030\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\061\uffaa\062\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\072\uffaa\073\uffaa\076" +
    "\uffaa\077\uffaa\100\uffaa\106\uffaa\110\uffaa\114\uffaa\122\uffaa" +
    "\130\uffaa\131\uffaa\132\uffaa\001\002\000\074\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0" +
    "\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\001\002\000\074\004\040\005\035\006\043" +
    "\010\051\011\046\021\206\030\u01a7\036\047\037\055\040" +
    "\176\041\226\042\220\043\215\061\045\062\231\064\050" +
    "\065\036\066\034\067\041\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\102\004\uffc2\005\uffc2\006\uffc2\010\uffc2\011" +
    "\uffc2\021\uffc2\030\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\072\uffc2\073\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\102\u018f\106\uffc2\110\uffc2\114\uffc2\122\uffc2\130\uffc2\131" +
    "\uffc2\132\uffc2\001\002\000\100\004\uffc3\005\uffc3\006\uffc3" +
    "\010\uffc3\011\uffc3\021\uffc3\030\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\061\uffc3\062\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\072\uffc3\073\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\106\uffc3\110\uffc3\114\uffc3\122\uffc3\130\uffc3" +
    "\131\uffc3\132\uffc3\001\002\000\004\027\u01aa\001\002\000" +
    "\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0" +
    "\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\040" +
    "\005\035\006\043\010\051\011\046\021\206\030\u01ac\036" +
    "\047\037\055\040\176\041\226\042\220\043\215\061\045" +
    "\062\231\064\050\065\036\066\034\067\041\072\213\076" +
    "\201\100\230\106\202\110\207\114\210\122\216\130\222" +
    "\131\221\132\203\001\002\000\102\004\uffbf\005\uffbf\006" +
    "\uffbf\010\uffbf\011\uffbf\021\uffbf\030\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\061\uffbf\062\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\072\uffbf\073\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\102\u018f\106\uffbf\110\uffbf\114\uffbf\122" +
    "\uffbf\130\uffbf\131\uffbf\132\uffbf\001\002\000\100\004\uffc0" +
    "\005\uffc0\006\uffc0\010\uffc0\011\uffc0\021\uffc0\030\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\061\uffc0" +
    "\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\072\uffc0\073" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\106\uffc0\110\uffc0\114\uffc0" +
    "\122\uffc0\130\uffc0\131\uffc0\132\uffc0\001\002\000\074\004" +
    "\040\005\035\006\043\010\051\011\046\021\206\030\u01af" +
    "\036\047\037\055\040\176\041\226\042\220\043\215\061" +
    "\045\062\231\064\050\065\036\066\034\067\041\072\213" +
    "\076\201\100\230\106\202\110\207\114\210\122\216\130" +
    "\222\131\221\132\203\001\002\000\102\004\uffb9\005\uffb9" +
    "\006\uffb9\010\uffb9\011\uffb9\021\uffb9\030\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\061\uffb9\062\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072\uffb9\073\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\102\u018f\106\uffb9\110\uffb9\114\uffb9" +
    "\122\uffb9\130\uffb9\131\uffb9\132\uffb9\001\002\000\100\004" +
    "\uffba\005\uffba\006\uffba\010\uffba\011\uffba\021\uffba\030\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\061" +
    "\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\072\uffba" +
    "\073\uffba\076\uffba\077\uffba\100\uffba\106\uffba\110\uffba\114" +
    "\uffba\122\uffba\130\uffba\131\uffba\132\uffba\001\002\000\004" +
    "\027\u01b6\001\002\000\074\004\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0" +
    "\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001" +
    "\002\000\074\004\040\005\035\006\043\010\051\011\046" +
    "\021\206\030\u01b4\036\047\037\055\040\176\041\226\042" +
    "\220\043\215\061\045\062\231\064\050\065\036\066\034" +
    "\067\041\072\213\076\201\100\230\106\202\110\207\114" +
    "\210\122\216\130\222\131\221\132\203\001\002\000\102" +
    "\004\uffb7\005\uffb7\006\uffb7\010\uffb7\011\uffb7\021\uffb7\030" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\072" +
    "\uffb7\073\uffb7\076\uffb7\077\uffb7\100\uffb7\102\u018f\106\uffb7" +
    "\110\uffb7\114\uffb7\122\uffb7\130\uffb7\131\uffb7\132\uffb7\001" +
    "\002\000\100\004\uffb8\005\uffb8\006\uffb8\010\uffb8\011\uffb8" +
    "\021\uffb8\030\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\072\uffb8\073\uffb8\076\uffb8\077\uffb8\100\uffb8\106" +
    "\uffb8\110\uffb8\114\uffb8\122\uffb8\130\uffb8\131\uffb8\132\uffb8" +
    "\001\002\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011" +
    "\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0" +
    "\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000" +
    "\074\004\040\005\035\006\043\010\051\011\046\021\206" +
    "\030\u01b8\036\047\037\055\040\176\041\226\042\220\043" +
    "\215\061\045\062\231\064\050\065\036\066\034\067\041" +
    "\072\213\076\201\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\102\004\uffbd" +
    "\005\uffbd\006\uffbd\010\uffbd\011\uffbd\021\uffbd\030\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\061\uffbd" +
    "\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd\073" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\102\u018f\106\uffbd\110\uffbd" +
    "\114\uffbd\122\uffbd\130\uffbd\131\uffbd\132\uffbd\001\002\000" +
    "\100\004\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\021\uffbe" +
    "\030\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\072\uffbe\073\uffbe\076\uffbe\077\uffbe\100\uffbe\106\uffbe\110" +
    "\uffbe\114\uffbe\122\uffbe\130\uffbe\131\uffbe\132\uffbe\001\002" +
    "\000\120\003\ufef4\004\ufef4\005\ufef4\006\ufef4\007\ufef4\010" +
    "\ufef4\011\ufef4\013\063\015\ufef4\021\ufef4\024\ufef4\027\ufef4" +
    "\030\ufef4\034\062\035\060\036\ufef4\037\ufef4\040\ufef4\041" +
    "\ufef4\042\ufef4\043\ufef4\061\ufef4\062\ufef4\064\ufef4\065\ufef4" +
    "\066\ufef4\067\ufef4\072\ufef4\073\ufef4\076\ufef4\077\ufef4\100" +
    "\ufef4\106\ufef4\110\ufef4\114\ufef4\122\ufef4\130\ufef4\131\ufef4" +
    "\132\ufef4\001\002\000\100\004\uff61\005\uff61\006\uff61\010" +
    "\uff61\011\uff61\021\uff61\030\uff61\036\uff61\037\uff61\040\uff61" +
    "\041\uff61\042\uff61\043\uff61\061\uff61\062\uff61\064\uff61\065" +
    "\uff61\066\uff61\067\uff61\072\uff61\073\uff61\076\uff61\077\uff61" +
    "\100\uff61\106\uff61\110\uff61\114\uff61\122\uff61\130\uff61\131" +
    "\uff61\132\uff61\001\002\000\050\004\040\005\035\006\043" +
    "\010\051\011\046\015\u01bf\021\206\036\047\037\055\040" +
    "\176\041\226\042\220\043\215\061\045\062\231\064\050" +
    "\065\036\066\034\067\041\001\002\000\052\003\u01c0\004" +
    "\040\005\035\006\043\010\051\011\046\015\u01bf\021\206" +
    "\036\047\037\055\040\176\041\226\042\220\043\215\061" +
    "\045\062\231\064\050\065\036\066\034\067\041\001\002" +
    "\000\010\003\u01c7\007\u01c6\015\u01c5\001\002\000\046\004" +
    "\040\005\035\006\043\010\051\011\046\021\206\036\047" +
    "\037\055\040\176\041\226\042\220\043\215\061\045\062" +
    "\231\064\050\065\036\066\034\067\041\001\002\000\004" +
    "\007\u01c2\001\002\000\010\003\uff60\007\uff60\015\uff60\001" +
    "\002\000\004\024\u01c3\001\002\000\100\004\uff63\005\uff63" +
    "\006\uff63\010\uff63\011\uff63\021\uff63\030\uff63\036\uff63\037" +
    "\uff63\040\uff63\041\uff63\042\uff63\043\uff63\061\uff63\062\uff63" +
    "\064\uff63\065\uff63\066\uff63\067\uff63\072\uff63\073\uff63\076" +
    "\uff63\077\uff63\100\uff63\106\uff63\110\uff63\114\uff63\122\uff63" +
    "\130\uff63\131\uff63\132\uff63\001\002\000\010\003\uff5d\007" +
    "\uff5d\015\uff5d\001\002\000\050\003\u01ca\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\036\047\037\055\040" +
    "\176\041\226\042\220\043\215\061\045\062\231\064\050" +
    "\065\036\066\034\067\041\001\002\000\102\004\uff64\005" +
    "\uff64\006\uff64\010\uff64\011\uff64\021\uff64\024\u01c9\030\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\061" +
    "\uff64\062\uff64\064\uff64\065\uff64\066\uff64\067\uff64\072\uff64" +
    "\073\uff64\076\uff64\077\uff64\100\uff64\106\uff64\110\uff64\114" +
    "\uff64\122\uff64\130\uff64\131\uff64\132\uff64\001\002\000\012" +
    "\003\uff5c\007\uff5c\015\uff5c\024\u01c8\001\002\000\100\004" +
    "\uff67\005\uff67\006\uff67\010\uff67\011\uff67\021\uff67\030\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\061" +
    "\uff67\062\uff67\064\uff67\065\uff67\066\uff67\067\uff67\072\uff67" +
    "\073\uff67\076\uff67\077\uff67\100\uff67\106\uff67\110\uff67\114" +
    "\uff67\122\uff67\130\uff67\131\uff67\132\uff67\001\002\000\100" +
    "\004\uff6e\005\uff6e\006\uff6e\010\uff6e\011\uff6e\021\uff6e\030" +
    "\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e" +
    "\061\uff6e\062\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\072" +
    "\uff6e\073\uff6e\076\uff6e\077\uff6e\100\uff6e\106\uff6e\110\uff6e" +
    "\114\uff6e\122\uff6e\130\uff6e\131\uff6e\132\uff6e\001\002\000" +
    "\010\003\uff5e\007\uff5e\015\uff5e\001\002\000\010\003\uff5f" +
    "\007\uff5f\015\uff5f\001\002\000\010\003\u01ce\007\u01cd\015" +
    "\u01c5\001\002\000\004\024\u01cf\001\002\000\010\003\uff5c" +
    "\007\uff5c\015\uff5c\001\002\000\100\004\uff68\005\uff68\006" +
    "\uff68\010\uff68\011\uff68\021\uff68\030\uff68\036\uff68\037\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\061\uff68\062\uff68\064" +
    "\uff68\065\uff68\066\uff68\067\uff68\072\uff68\073\uff68\076\uff68" +
    "\077\uff68\100\uff68\106\uff68\110\uff68\114\uff68\122\uff68\130" +
    "\uff68\131\uff68\132\uff68\001\002\000\006\007\u01f0\027\u01f1" +
    "\001\002\000\070\003\u01d3\004\040\005\035\006\043\010" +
    "\051\011\046\021\206\024\uff8c\027\u01d4\036\047\037\055" +
    "\040\176\041\226\042\220\043\215\061\045\062\231\064" +
    "\050\065\036\066\034\067\041\074\020\075\021\111\005" +
    "\112\006\115\022\126\163\001\002\000\004\024\u01ec\001" +
    "\002\000\010\007\u01e8\024\uff8a\062\026\001\002\000\074" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072" +
    "\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0" +
    "\130\uffe0\131\uffe0\132\uffe0\001\002\000\006\007\u01dc\027" +
    "\u01dd\001\002\000\052\003\u01d8\004\040\005\035\006\043" +
    "\010\051\011\046\021\206\024\uff8c\036\047\037\055\040" +
    "\176\041\226\042\220\043\215\061\045\062\231\064\050" +
    "\065\036\066\034\067\041\001\002\000\010\007\uff8b\024" +
    "\uff8b\027\uff8b\001\002\000\010\007\uff8a\024\uff8a\027\uff8a" +
    "\001\002\000\004\024\u01da\001\002\000\054\003\u01d8\004" +
    "\040\005\035\006\043\007\uff8c\010\051\011\046\021\206" +
    "\027\uff8c\036\047\037\055\040\176\041\226\042\220\043" +
    "\215\061\045\062\231\064\050\065\036\066\034\067\041" +
    "\001\002\000\006\007\uff8f\027\uff8f\001\002\000\006\003" +
    "\u01e0\027\u01e1\001\002\000\074\004\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100\uffe0\106" +
    "\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0" +
    "\001\002\000\074\004\040\005\035\006\043\010\051\011" +
    "\046\021\206\030\u01df\036\047\037\055\040\176\041\226" +
    "\042\220\043\215\061\045\062\231\064\050\065\036\066" +
    "\034\067\041\072\213\076\201\100\230\106\202\110\207" +
    "\114\210\122\216\130\222\131\221\132\203\001\002\000" +
    "\100\004\uff93\005\uff93\006\uff93\010\uff93\011\uff93\021\uff93" +
    "\030\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\061\uff93\062\uff93\064\uff93\065\uff93\066\uff93\067\uff93" +
    "\072\uff93\073\uff93\076\uff93\077\uff93\100\uff93\106\uff93\110" +
    "\uff93\114\uff93\122\uff93\130\uff93\131\uff93\132\uff93\001\002" +
    "\000\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0" +
    "\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130" +
    "\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\u01e3\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\222\131\221" +
    "\132\203\001\002\000\100\004\uff96\005\uff96\006\uff96\010" +
    "\uff96\011\uff96\021\uff96\030\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\061\uff96\062\uff96\064\uff96\065" +
    "\uff96\066\uff96\067\uff96\072\uff96\073\uff96\076\uff96\077\uff96" +
    "\100\uff96\106\uff96\110\uff96\114\uff96\122\uff96\130\uff96\131" +
    "\uff96\132\uff96\001\002\000\074\004\040\005\035\006\043" +
    "\010\051\011\046\021\206\030\u01e5\036\047\037\055\040" +
    "\176\041\226\042\220\043\215\061\045\062\231\064\050" +
    "\065\036\066\034\067\041\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\100\004\uff90\005\uff90\006\uff90\010\uff90\011" +
    "\uff90\021\uff90\030\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066" +
    "\uff90\067\uff90\072\uff90\073\uff90\076\uff90\077\uff90\100\uff90" +
    "\106\uff90\110\uff90\114\uff90\122\uff90\130\uff90\131\uff90\132" +
    "\uff90\001\002\000\074\004\040\005\035\006\043\010\051" +
    "\011\046\021\206\030\u01e7\036\047\037\055\040\176\041" +
    "\226\042\220\043\215\061\045\062\231\064\050\065\036" +
    "\066\034\067\041\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\100\004\uff92\005\uff92\006\uff92\010\uff92\011\uff92\021" +
    "\uff92\030\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\061\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\072\uff92\073\uff92\076\uff92\077\uff92\100\uff92\106\uff92" +
    "\110\uff92\114\uff92\122\uff92\130\uff92\131\uff92\132\uff92\001" +
    "\002\000\004\027\u01e9\001\002\000\074\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\001\002\000\074\004\040\005\035\006\043\010" +
    "\051\011\046\021\206\030\u01eb\036\047\037\055\040\176" +
    "\041\226\042\220\043\215\061\045\062\231\064\050\065" +
    "\036\066\034\067\041\072\213\076\201\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\100\004\uff95\005\uff95\006\uff95\010\uff95\011\uff95" +
    "\021\uff95\030\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\072\uff95\073\uff95\076\uff95\077\uff95\100\uff95\106" +
    "\uff95\110\uff95\114\uff95\122\uff95\130\uff95\131\uff95\132\uff95" +
    "\001\002\000\056\003\u01d8\004\040\005\035\006\043\007" +
    "\uff8d\010\051\011\046\021\206\024\uff8c\027\uff8d\036\047" +
    "\037\055\040\176\041\226\042\220\043\215\061\045\062" +
    "\231\064\050\065\036\066\034\067\041\001\002\000\004" +
    "\024\u01ee\001\002\000\054\003\u01d8\004\040\005\035\006" +
    "\043\007\uff8c\010\051\011\046\021\206\027\uff8c\036\047" +
    "\037\055\040\176\041\226\042\220\043\215\061\045\062" +
    "\231\064\050\065\036\066\034\067\041\001\002\000\006" +
    "\007\uff8e\027\uff8e\001\002\000\004\027\u01f4\001\002\000" +
    "\074\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0" +
    "\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\072\uffe0\076\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\040" +
    "\005\035\006\043\010\051\011\046\021\206\030\u01f3\036" +
    "\047\037\055\040\176\041\226\042\220\043\215\061\045" +
    "\062\231\064\050\065\036\066\034\067\041\072\213\076" +
    "\201\100\230\106\202\110\207\114\210\122\216\130\222" +
    "\131\221\132\203\001\002\000\100\004\uff91\005\uff91\006" +
    "\uff91\010\uff91\011\uff91\021\uff91\030\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\061\uff91\062\uff91\064" +
    "\uff91\065\uff91\066\uff91\067\uff91\072\uff91\073\uff91\076\uff91" +
    "\077\uff91\100\uff91\106\uff91\110\uff91\114\uff91\122\uff91\130" +
    "\uff91\131\uff91\132\uff91\001\002\000\074\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\076\uffe0\100" +
    "\uffe0\106\uffe0\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\001\002\000\074\004\040\005\035\006\043\010" +
    "\051\011\046\021\206\030\u01f6\036\047\037\055\040\176" +
    "\041\226\042\220\043\215\061\045\062\231\064\050\065" +
    "\036\066\034\067\041\072\213\076\201\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\100\004\uff94\005\uff94\006\uff94\010\uff94\011\uff94" +
    "\021\uff94\030\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\061\uff94\062\uff94\064\uff94\065\uff94\066\uff94" +
    "\067\uff94\072\uff94\073\uff94\076\uff94\077\uff94\100\uff94\106" +
    "\uff94\110\uff94\114\uff94\122\uff94\130\uff94\131\uff94\132\uff94" +
    "\001\002\000\100\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011" +
    "\uffd5\021\uffd5\030\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\061\uffd5\062\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\072\uffd5\073\uffd5\076\uffd5\077\uffd5\100\uffd5" +
    "\106\uffd5\110\uffd5\114\uffd5\122\uffd5\130\uffd5\131\uffd5\132" +
    "\uffd5\001\002\000\120\003\ufef8\004\ufef8\005\ufef8\006\ufef8" +
    "\007\ufef8\010\ufef8\011\ufef8\013\063\015\ufef8\021\ufef8\024" +
    "\ufef8\027\ufef8\030\ufef8\034\062\035\060\036\ufef8\037\ufef8" +
    "\040\ufef8\041\ufef8\042\ufef8\043\ufef8\061\ufef8\062\ufef8\064" +
    "\ufef8\065\ufef8\066\ufef8\067\ufef8\072\ufef8\073\ufef8\076\ufef8" +
    "\077\ufef8\100\ufef8\106\ufef8\110\ufef8\114\ufef8\122\ufef8\130" +
    "\ufef8\131\ufef8\132\ufef8\001\002\000\074\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\u01fb\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\222\131\221" +
    "\132\203\001\002\000\114\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\010\ufff9\011\ufff9\021\ufff9\030\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\061\ufff9\062" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\072\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\100\ufff9\106\ufff9\110\ufff9\111\ufff9\112" +
    "\ufff9\114\ufff9\115\ufff9\122\ufff9\126\ufff9\130\ufff9\131\ufff9" +
    "\132\ufff9\001\002\000\020\002\ufff1\062\ufff1\074\ufff1\111" +
    "\ufff1\112\ufff1\115\ufff1\126\ufff1\001\002\000\112\003\164" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0\030" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072" +
    "\uffe0\074\020\075\021\076\uffe0\100\uffe0\106\uffe0\110\uffe0" +
    "\111\005\112\006\114\uffe0\115\022\122\uffe0\126\163\130" +
    "\uffe0\131\uffe0\132\uffe0\001\002\000\074\004\040\005\035" +
    "\006\043\010\051\011\046\021\206\030\u01fe\036\047\037" +
    "\055\040\176\041\226\042\220\043\215\061\045\062\231" +
    "\064\050\065\036\066\034\067\041\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\222\131\221" +
    "\132\203\001\002\000\020\002\uffef\062\uffef\074\uffef\111" +
    "\uffef\112\uffef\115\uffef\126\uffef\001\002\000\010\007\uffe3" +
    "\015\uffe3\062\u0201\001\002\000\006\007\uffe2\015\uffe2\001" +
    "\002\000\006\007\uffe6\015\uffe6\001\002\000\006\007\uffe5" +
    "\015\uffe5\001\002\000\020\002\uffe8\062\uffe8\074\uffe8\111" +
    "\uffe8\112\uffe8\115\uffe8\126\uffe8\001\002\000\006\007\uffe7" +
    "\015\uffe7\001\002\000\016\003\u0206\006\u0208\015\uffc4\021" +
    "\144\024\uffc4\062\u0207\001\002\000\006\003\155\027\156" +
    "\001\002\000\006\003\155\027\156\001\002\000\016\003" +
    "\151\007\u0209\074\020\111\005\112\006\115\022\001\002" +
    "\000\006\003\155\027\156\001\002\000\006\007\u020b\015" +
    "\153\001\002\000\006\003\155\027\156\001\002\000\020" +
    "\002\ufff3\062\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126" +
    "\ufff3\001\002\000\020\002\ufff4\062\ufff4\074\ufff4\111\ufff4" +
    "\112\ufff4\115\ufff4\126\ufff4\001\002\000\020\002\uffea\062" +
    "\uffea\074\uffea\111\uffea\112\uffea\115\uffea\126\uffea\001\002" +
    "\000\020\002\uffec\062\uffec\074\uffec\111\uffec\112\uffec\115" +
    "\uffec\126\uffec\001\002\000\004\002\001\001\002\000\016" +
    "\003\u0212\006\u0214\015\uffc4\021\144\024\uffc4\062\u0213\001" +
    "\002\000\010\003\155\024\u021b\027\156\001\002\000\006" +
    "\003\155\027\156\001\002\000\016\003\151\007\u0215\074" +
    "\020\111\005\112\006\115\022\001\002\000\006\003\155" +
    "\027\156\001\002\000\006\007\u0217\015\153\001\002\000" +
    "\006\003\155\027\156\001\002\000\020\002\ufff6\062\ufff6" +
    "\074\ufff6\111\ufff6\112\ufff6\115\ufff6\126\ufff6\001\002\000" +
    "\020\002\ufff5\062\ufff5\074\ufff5\111\ufff5\112\ufff5\115\ufff5" +
    "\126\ufff5\001\002\000\020\002\uffeb\062\uffeb\074\uffeb\111" +
    "\uffeb\112\uffeb\115\uffeb\126\uffeb\001\002\000\020\002\uffed" +
    "\062\uffed\074\uffed\111\uffed\112\uffed\115\uffed\126\uffed\001" +
    "\002\000\020\002\uffee\062\uffee\074\uffee\111\uffee\112\uffee" +
    "\115\uffee\126\uffee\001\002\000\004\062\u0221\001\002\000" +
    "\004\062\u0220\001\002\000\020\002\ufff7\062\ufff7\074\ufff7" +
    "\111\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000\010\003" +
    "\u0206\006\u0208\062\u0207\001\002\000\010\003\u0212\006\u0214" +
    "\062\u0213\001\002\000\014\003\uff55\007\uff55\015\uff55\024" +
    "\uff55\062\uff55\001\002\000\014\003\uff56\007\uff56\015\uff56" +
    "\024\uff56\062\uff56\001\002\000\014\003\uff57\007\uff57\015" +
    "\uff57\024\uff57\062\uff57\001\002\000\020\002\000\062\016" +
    "\074\020\111\005\112\006\115\022\126\u021e\001\002\000" +
    "\006\002\ufffb\062\026\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0224\000\020\002\011\004\006\014\010\024\016\027" +
    "\003\030\007\053\013\001\001\000\014\004\u01f9\014\010" +
    "\024\016\030\u0224\053\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\u021c\024\u021e" +
    "\053\013\001\001\000\004\023\172\001\001\000\002\001" +
    "\001\000\004\023\166\001\001\000\002\001\001\000\004" +
    "\023\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\053\032" +
    "\036\033\051\034\043\036\052\001\001\000\002\001\001" +
    "\000\010\022\053\032\036\033\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\053\032\036\033\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\053\032\036\033\051\034\043\036\120\001\001\000\004" +
    "\015\072\001\001\000\002\001\001\000\010\022\053\032" +
    "\036\033\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\053\032\036\033\113\001\001\000\002\001" +
    "\001\000\004\016\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\053\032\036\033\051\034\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\053\032\036\033\073\001\001\000\002\001\001" +
    "\000\010\022\053\032\036\033\111\001\001\000\010\022" +
    "\053\032\036\033\107\001\001\000\010\022\053\032\036" +
    "\033\105\001\001\000\010\022\053\032\036\033\103\001" +
    "\001\000\010\022\053\032\036\033\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\053\032\036\033\051\034\043\036" +
    "\131\037\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\053\032\036\033\051\034\043\036\132\001" +
    "\001\000\004\016\060\001\001\000\004\016\060\001\001" +
    "\000\014\022\053\032\036\033\051\034\043\036\140\001" +
    "\001\000\002\001\001\000\014\022\053\032\036\033\051" +
    "\034\043\036\136\001\001\000\004\016\060\001\001\000" +
    "\002\001\001\000\004\016\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\053\032\036\033\051\034" +
    "\043\036\144\001\001\000\004\016\060\001\001\000\006" +
    "\014\146\025\151\001\001\000\002\001\001\000\004\052" +
    "\u0202\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u01fe\001\001\000\004\052\156\001\001\000\010\004" +
    "\006\014\161\027\u01fb\001\001\000\012\004\006\014\161" +
    "\027\157\035\160\001\001\000\002\001\001\000\010\004" +
    "\u01f9\014\161\035\u01f8\001\001\000\042\003\177\006\174" +
    "\010\223\011\204\012\224\021\226\022\053\026\210\031" +
    "\213\032\036\033\051\034\043\036\211\040\203\041\176" +
    "\050\222\001\001\000\004\023\172\001\001\000\004\023" +
    "\166\001\001\000\004\023\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\053\032\036\033" +
    "\051\034\043\036\u01f7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\053" +
    "\032\036\033\051\034\043\036\u01b9\001\001\000\002\001" +
    "\001\000\010\022\053\032\036\033\u0183\001\001\000\002" +
    "\001\001\000\004\016\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\053\032\036\033\051\034\043" +
    "\036\u017f\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\053\032\036\033\051\034\043\036\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\053\032\036" +
    "\033\051\034\043\036\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\053\032\036" +
    "\033\051\034\043\036\262\001\001\000\014\022\053\032" +
    "\036\033\051\034\043\036\260\001\001\000\014\022\053" +
    "\032\036\033\051\034\043\036\256\001\001\000\014\022" +
    "\053\032\036\033\051\034\043\036\254\001\001\000\016" +
    "\022\053\031\236\032\036\033\051\034\043\036\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\060" +
    "\001\001\000\014\022\053\032\036\033\051\034\043\036" +
    "\252\001\001\000\014\022\053\032\036\033\051\034\043" +
    "\036\251\001\001\000\014\022\053\032\036\033\051\034" +
    "\043\036\250\001\001\000\014\022\053\032\036\033\051" +
    "\034\043\036\247\001\001\000\014\022\053\032\036\033" +
    "\051\034\043\036\246\001\001\000\004\016\060\001\001" +
    "\000\004\016\060\001\001\000\004\016\060\001\001\000" +
    "\004\016\060\001\001\000\004\016\060\001\001\000\002" +
    "\001\001\000\004\016\060\001\001\000\002\001\001\000" +
    "\004\016\060\001\001\000\002\001\001\000\004\016\060" +
    "\001\001\000\002\001\001\000\004\016\060\001\001\000" +
    "\004\035\347\001\001\000\004\035\265\001\001\000\042" +
    "\003\177\006\174\010\223\011\204\012\224\021\226\022" +
    "\053\026\210\031\213\032\036\033\051\034\043\036\211" +
    "\040\203\041\176\050\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\274\022\053" +
    "\031\213\032\036\033\051\034\043\036\211\001\001\000" +
    "\004\035\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\277\001\001\000\042\003" +
    "\177\006\174\010\223\011\204\012\224\021\226\022\053" +
    "\026\210\031\213\032\036\033\051\034\043\036\211\040" +
    "\203\041\176\050\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\306\001\001\000\004\035\304\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\226\022\053\026\210\031\213\032\036\033\051\034" +
    "\043\036\211\040\203\041\176\050\222\001\001\000\002" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\226\022\053\026\210\031\213\032\036\033\051" +
    "\034\043\036\211\040\203\041\176\050\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\312\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\226\022\053\026\210\031\213\032\036\033\051\034\043" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\226\022\053\026\210\031\213\032\036\033\051\034" +
    "\043\036\211\040\203\041\176\050\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\320\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\002\001\001" +
    "\000\004\035\323\001\001\000\042\003\177\006\174\010" +
    "\223\011\204\012\224\021\226\022\053\026\210\031\213" +
    "\032\036\033\051\034\043\036\211\040\203\041\176\050" +
    "\222\001\001\000\002\001\001\000\020\012\344\022\053" +
    "\031\213\032\036\033\051\034\043\036\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\333\022\053" +
    "\031\213\032\036\033\051\034\043\036\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\177\006\174\010\223\011\204" +
    "\012\224\021\226\022\053\026\210\031\213\032\036\033" +
    "\051\034\043\036\211\040\203\041\176\050\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\353\022" +
    "\053\031\213\032\036\033\051\034\043\036\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\360\022\053\031\213\032\036" +
    "\033\051\034\043\036\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\060\001\001" +
    "\000\002\001\001\000\020\012\366\022\053\031\213\032" +
    "\036\033\051\034\043\036\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\060\001\001\000\002\001\001\000" +
    "\010\022\u010e\032\u0111\046\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0133\001\001\000\010\022\u010e" +
    "\032\u0111\046\u0115\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\u010e\032\u0111\046\u0131\001\001\000\002" +
    "\001\001\000\010\022\u010e\032\u0111\046\u0130\001\001\000" +
    "\010\022\u010e\032\u0111\046\u012f\001\001\000\010\022\u010e" +
    "\032\u0111\046\u012e\001\001\000\010\022\u010e\032\u0111\046" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\u010e\032\u0111\046\u012c\001\001\000\010\022\u010e\032" +
    "\u0111\046\u012a\001\001\000\010\022\u010e\032\u0111\046\u0128" +
    "\001\001\000\010\022\u010e\032\u0111\046\u0126\001\001\000" +
    "\010\022\u010e\032\u0111\046\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\u0135\044\u0136\001\001\000" +
    "\004\022\u0149\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0139\001\001\000\002\001\001\000\004\035" +
    "\u013b\001\001\000\004\035\u0141\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\226\022\053\026" +
    "\210\031\213\032\036\033\051\034\043\036\211\040\203" +
    "\041\176\050\222\001\001\000\004\035\u013e\001\001\000" +
    "\004\035\u013f\001\001\000\042\003\177\006\174\010\223" +
    "\011\204\012\224\021\226\022\053\026\210\031\213\032" +
    "\036\033\051\034\043\036\211\040\203\041\176\050\222" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\226\022\053\026\210\031\213\032\036\033\051" +
    "\034\043\036\211\040\203\041\176\050\222\001\001\000" +
    "\002\001\001\000\042\003\177\006\174\010\223\011\204" +
    "\012\224\021\226\022\053\026\210\031\213\032\036\033" +
    "\051\034\043\036\211\040\203\041\176\050\222\001\001" +
    "\000\002\001\001\000\004\035\u0145\001\001\000\004\035" +
    "\u0146\001\001\000\042\003\177\006\174\010\223\011\204" +
    "\012\224\021\226\022\053\026\210\031\213\032\036\033" +
    "\051\034\043\036\211\040\203\041\176\050\222\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\226\022\053\026\210\031\213\032\036\033\051\034\043" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0154" +
    "\001\001\000\004\035\u0150\001\001\000\004\035\u014d\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\226\022\053\026\210\031\213\032\036\033\051\034" +
    "\043\036\211\040\203\041\176\050\222\001\001\000\002" +
    "\001\001\000\004\035\u0151\001\001\000\042\003\177\006" +
    "\174\010\223\011\204\012\224\021\226\022\053\026\210" +
    "\031\213\032\036\033\051\034\043\036\211\040\203\041" +
    "\176\050\222\001\001\000\042\003\177\006\174\010\223" +
    "\011\204\012\224\021\226\022\053\026\210\031\213\032" +
    "\036\033\051\034\043\036\211\040\203\041\176\050\222" +
    "\001\001\000\002\001\001\000\004\035\u0155\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\226\022\053\026" +
    "\210\031\213\032\036\033\051\034\043\036\211\040\203" +
    "\041\176\050\222\001\001\000\002\001\001\000\004\035" +
    "\u0158\001\001\000\042\003\177\006\174\010\223\011\204" +
    "\012\224\021\226\022\053\026\210\031\213\032\036\033" +
    "\051\034\043\036\211\040\203\041\176\050\222\001\001" +
    "\000\016\022\053\032\036\033\051\034\043\036\131\037" +
    "\u015a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u015f\001\001\000" +
    "\006\043\u0160\044\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0164\001\001\000" +
    "\006\043\u0165\044\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0173\001\001\000\004\042\u0169\001" +
    "\001\000\006\043\u016a\044\u0136\001\001\000\004\042\u016c" +
    "\001\001\000\002\001\001\000\010\043\u016d\044\u0136\051" +
    "\u016e\001\001\000\006\043\u016d\051\u0172\001\001\000\004" +
    "\042\u0170\001\001\000\002\001\001\000\004\044\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\u0174" +
    "\044\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0178\001\001\000\006\043\u0179" +
    "\044\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u017c\001\001\000\006\043\u017d\044\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\u0189\022\053\031\213\032\036\033\051\034\043" +
    "\036\211\001\001\000\004\035\u01ad\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u018c" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\226\022\053\026\210\031\213\032\036\033\051" +
    "\034\043\036\211\040\203\041\176\050\222\001\001\000" +
    "\004\007\u018f\001\001\000\004\050\u0191\001\001\000\002" +
    "\001\001\000\004\035\u01a2\001\001\000\002\001\001\000" +
    "\004\035\u019f\001\001\000\002\001\001\000\020\012\u0195" +
    "\022\053\031\213\032\036\033\051\034\043\036\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u019c" +
    "\001\001\000\004\035\u0199\001\001\000\042\003\177\006" +
    "\174\010\223\011\204\012\224\021\226\022\053\026\210" +
    "\031\213\032\036\033\051\034\043\036\211\040\203\041" +
    "\176\050\222\001\001\000\004\007\u019b\001\001\000\002" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\226\022\053\026\210\031\213\032\036\033\051" +
    "\034\043\036\211\040\203\041\176\050\222\001\001\000" +
    "\004\007\u019e\001\001\000\002\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\226\022\053\026" +
    "\210\031\213\032\036\033\051\034\043\036\211\040\203" +
    "\041\176\050\222\001\001\000\004\007\u01a1\001\001\000" +
    "\002\001\001\000\042\003\177\006\174\010\223\011\204" +
    "\012\224\021\226\022\053\026\210\031\213\032\036\033" +
    "\051\034\043\036\211\040\203\041\176\050\222\001\001" +
    "\000\002\001\001\000\004\035\u01a5\001\001\000\042\003" +
    "\177\006\174\010\223\011\204\012\224\021\226\022\053" +
    "\026\210\031\213\032\036\033\051\034\043\036\211\040" +
    "\203\041\176\050\222\001\001\000\004\007\u01a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u01aa\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\226\022\053\026\210\031\213\032\036\033\051\034" +
    "\043\036\211\040\203\041\176\050\222\001\001\000\004" +
    "\007\u01ac\001\001\000\002\001\001\000\042\003\177\006" +
    "\174\010\223\011\204\012\224\021\226\022\053\026\210" +
    "\031\213\032\036\033\051\034\043\036\211\040\203\041" +
    "\176\050\222\001\001\000\004\007\u01af\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u01b2\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\004\007\u01b4" +
    "\001\001\000\002\001\001\000\004\035\u01b6\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\004\007\u01b8" +
    "\001\001\000\002\001\001\000\004\016\060\001\001\000" +
    "\002\001\001\000\022\012\u01c0\022\053\031\213\032\036" +
    "\033\051\034\043\036\211\047\u01cb\001\001\000\022\012" +
    "\u01c0\022\053\031\213\032\036\033\051\034\043\036\211" +
    "\047\u01bd\001\001\000\002\001\001\000\020\012\u01c3\022" +
    "\053\031\213\032\036\033\051\034\043\036\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\u01ca\022\053" +
    "\031\213\032\036\033\051\034\043\036\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\u01d5\005\u01d1\012\u01d6\013" +
    "\u01d4\014\161\022\053\031\213\032\036\033\051\034\043" +
    "\036\211\001\001\000\002\001\001\000\004\023\164\001" +
    "\001\000\004\035\u01e5\001\001\000\002\001\001\000\022" +
    "\005\u01d8\012\u01d6\022\053\031\213\032\036\033\051\034" +
    "\043\036\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u01da\012\u01d6\022\053\031" +
    "\213\032\036\033\051\034\043\036\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u01dd\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\002\001\001" +
    "\000\004\035\u01e3\001\001\000\004\035\u01e1\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\002\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\226\022\053\026\210\031\213\032\036\033\051\034\043" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\226\022\053\026\210\031\213\032\036\033\051\034" +
    "\043\036\211\040\203\041\176\050\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u01e9\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\226" +
    "\022\053\026\210\031\213\032\036\033\051\034\043\036" +
    "\211\040\203\041\176\050\222\001\001\000\002\001\001" +
    "\000\022\005\u01ec\012\u01d6\022\053\031\213\032\036\033" +
    "\051\034\043\036\211\001\001\000\002\001\001\000\022" +
    "\005\u01ee\012\u01d6\022\053\031\213\032\036\033\051\034" +
    "\043\036\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u01f1\001\001\000\042\003\177\006\174\010" +
    "\223\011\204\012\224\021\226\022\053\026\210\031\213" +
    "\032\036\033\051\034\043\036\211\040\203\041\176\050" +
    "\222\001\001\000\002\001\001\000\004\035\u01f4\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\226\022\053\026\210\031\213\032\036\033\051\034\043" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\060\001\001\000\042" +
    "\003\177\006\174\010\223\011\204\012\224\021\226\022" +
    "\053\026\210\031\213\032\036\033\051\034\043\036\211" +
    "\040\203\041\176\050\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\u01f9\014\161\035\u01fc\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\226\022\053\026\210\031\213\032\036\033\051\034\043" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u020e\001\001\000\004\052\u020d" +
    "\001\001\000\006\014\146\025\u0209\001\001\000\004\052" +
    "\u020c\001\001\000\002\001\001\000\004\052\u020b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u021b\001\001\000\004\052\u0219\001\001\000\006\014" +
    "\146\025\u0215\001\001\000\004\052\u0218\001\001\000\002" +
    "\001\001\000\004\052\u0217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\u021c\024" +
    "\u021e\053\013\001\001\000\004\023\164\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Tabla de símbolos
    private HashMap<String, Object> symbolTable = new HashMap<>();

    // Pila semántica
    private Stack<Object> semanticStack = new Stack<>();

    public HashMap<String, Object> getSymbolTable() {
        return symbolTable;
    }

    private void addVariableToSymbolTable(String varName, String varType) {
        if (symbolTable.containsKey(varName)) {
            syntaxError(((Symbol) stack.peek()), "La variable '" + varName + "' ya ha sido declarada.");
        } else {
            symbolTable.put(varName, varType);
            System.out.println("Variable '" + varName + "' de tipo '" + varType + "' agregada a la tabla de símbolos.");
        }
    }

    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String peek = (stack.elementAt(stack.size() - 3) != null) ? (((Symbol) stack.elementAt(stack.size() - 3)).value).toString() : "símbolo desconocido";
        Object left = (stack.elementAt(stack.size() - 3) != null) ? (((Symbol) stack.elementAt(stack.size() - 3)).left) : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado." + peek + " " + left;
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la estructura del programa."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= GLOBAL_DECLARACIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la estructura del programa."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= ERRORES_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_FUNCION ::= LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_FUNCION ::= LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_FUNCION ::= error GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en las llaves de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ERRORES_FUNCION ::= T_DATO IDENTIFIER error CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ERRORES_FUNCION ::= T_DATO IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error no se aceptan variables globales"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ERRORES_FUNCION ::= VOID IDENTIFIER error CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ERRORES_FUNCION ::= T_DATO IDENTIFIER IDENTIFIER CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ERRORES_FUNCION ::= VOID IDENTIFIER IDENTIFIER CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ERRORES_FUNCION ::= IDENTIFIER LPAREN PARAMETROS RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en la declaración de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ERRORES_FUNCION ::= IDENTIFIER LPAREN RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en la declaración de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS ::= error IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS ::= T_DATO 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS ::= PARAMETROS COMMA T_DATO 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS ::= PARAMETROS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la coma de los parametros."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTROL_STATEMENT ::= RETURN EXPRESION_ARITMETICA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTROL_STATEMENT ::= RETURN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTROL_STATEMENT ::= RETURN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		int id_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.out.println("Declaración de variable de tipo '" + id_type + "' con identificador(es) " + id);
        addVariableToSymbolTable((String) id, (String) id_type);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= T_DATO SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador de la variable en la declaración."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= T_DATO error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= error ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en la declaración."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= CONST T_DATO SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador de la variable en la declaración."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                System.out.println("Identificador: " + id);
                RESULT = id;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESTRUCTURA_IF ::= ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Múltiples else en estructura if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESTRUCTURA_ELSE ::= ELSE error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del else."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESTRUCTURA_ELSE ::= ELSE ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ESTRUCTURA_WHILE ::= WHILE LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ESTRUCTURA_WHILE ::= WHILE error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ESTRUCTURA_WHILE ::= WHILE LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ESTRUCTURA_WHILE ::= WHILE error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DO_WHILE ::= DO error SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DO_WHILE ::= DO LCURLY SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta palabra reservada while antes de la condición."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DO_WHILE ::= DO error SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan ambas llaves en el do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ESTRUCTURA_FOR ::= FOR LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la sentencia del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ESTRUCTURA_FOR ::= FOR error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ESTRUCTURA_FOR ::= FOR LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ESTRUCTURA_FOR ::= FOR error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "No puede haber una sola expresión."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION_FOR ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SWITCHs ::= SWITCH LPAREN error RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN error CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SWITCHs ::= SWITCH error RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SWITCHs ::= SWITCH LPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SWITCHs ::= SWITCH error LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES LISTA_DEFAULT CASES RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Múltiples definiciones de default en un switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE_STMT ::= CASE LITERALES COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE_STMT ::= CASE LITERALES COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE_STMT ::= CASE error COLON SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Error en la condición del case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASE_STMT ::= CASE error COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASE_STMT ::= CASE LITERALES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta dos puntos en el case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASE_STMT ::= CASE LITERALES SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Falta dos puntos en el case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEFAULT_STMT ::= DEFAULT COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEFAULT_STMT ::= DEFAULT LITERALES COLON SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Default no debe tener literal."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DEFAULT_STMT ::= DEFAULT LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta dos puntos en el default."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DEFAULT_STMT ::= DEFAULT error SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Error en el default."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DEFAULT_STMT ::= DEFAULT error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el default."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LISTA_DEFAULT ::= DEFAULT_STMT LISTA_DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DEFAULT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LISTA_DEFAULT ::= DEFAULT_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DEFAULT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // READ_WRITE ::= READ error IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // READ_WRITE ::= READ LPAREN IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // READ_WRITE ::= READ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan los paréntesis para la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // READ_WRITE ::= READ error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // READ_WRITE ::= READ LPAREN error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // READ_WRITE ::= WRITE error LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // READ_WRITE ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // READ_WRITE ::= WRITE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta una expresión entre los paréntesis"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // READ_WRITE ::= READ SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // READ_WRITE ::= WRITE SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en la llamada write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LISTA_EXPRESIONES ::= COMMA EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // T_DATO ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // T_DATO ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // T_DATO ::= LONG 
            {
              Object RESULT =null;
		 RESULT = "long"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // T_DATO ::= SHORT 
            {
              Object RESULT =null;
		 RESULT = "short"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;
		 RESULT = "int long"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;
		 RESULT = "int short"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;
		 RESULT = "long int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;
		 RESULT = "short int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ARGUMENTOS ::= ARGUMENTOS error EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ARGUMENTOS ::= ARGUMENTOS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ARGUMENTOS ::= COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPRESION_ARITMETICA ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPRESION_ARITMETICA ::= TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPRESION_ARITMETICA ::= DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPRESION_ARITMETICA ::= PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPRESION_ARITMETICA ::= MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPRESION_ARITMETICA ::= LPAREN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en paréntesis de expresión."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // EXPRESIONES_NUMERICAS ::= error PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // EXPRESIONES_NUMERICAS ::= error MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // EXPRESIONES_NUMERICAS ::= error TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // EXPRESIONES_NUMERICAS ::= error DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // EXPRESIONES_NUMERICAS ::= error MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // EXPRESIONES_NUMERICAS ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INCREMENTO_DECREMENTO ::= DEC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INCREMENTO_DECREMENTO ::= INC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // EXPRESION_ASIGNACION ::= PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // EXPRESION_ASIGNACION ::= MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // EXPRESION_ASIGNACION ::= TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // EXPRESION_ASIGNACION ::= DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // EXPRESION_ASIGNACION ::= ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '/=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '*=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '-=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '+=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
