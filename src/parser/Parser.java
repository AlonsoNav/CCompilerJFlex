
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\030\004\000\002\024\013\000\002\024\012\000" +
    "\002\024\012\000\002\024\013\000\002\024\012\000\002" +
    "\024\011\000\002\024\011\000\002\024\012\000\002\025" +
    "\004\000\002\025\006\000\002\036\003\000\002\036\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\026\004\000\002\026\004\000\002\026\005\000\002\026" +
    "\005\000\002\026\004\000\002\004\005\000\002\004\006" +
    "\000\002\023\005\000\002\023\007\000\002\023\005\000" +
    "\002\023\003\000\002\006\012\000\002\012\003\000\002" +
    "\012\003\000\002\037\005\000\002\037\003\000\002\035" +
    "\005\000\002\035\003\000\002\007\013\000\002\007\006" +
    "\000\002\007\002\000\002\010\011\000\002\041\013\000" +
    "\002\011\011\000\002\013\012\000\002\013\011\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\021\007\000" +
    "\002\021\006\000\002\021\007\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\040\003" +
    "\000\002\040\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\003\000\002\034\006\000\002\034" +
    "\005\000\002\034\003\000\002\034\003\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\016\074\015\075\016\111\005\112\006\115" +
    "\017\126\013\001\002\000\016\074\015\075\016\111\005" +
    "\112\006\115\017\126\013\001\002\000\010\062\uffc2\112" +
    "\364\115\363\001\002\000\006\062\uffc0\111\362\001\002" +
    "\000\040\072\ufffe\074\ufffe\075\ufffe\076\ufffe\100\ufffe\106" +
    "\ufffe\110\ufffe\111\ufffe\112\ufffe\114\ufffe\115\ufffe\126\ufffe" +
    "\130\ufffe\131\ufffe\132\ufffe\001\002\000\016\002\uffff\074" +
    "\015\111\005\112\006\115\017\126\013\001\002\000\004" +
    "\062\336\001\002\000\004\002\335\001\002\000\004\062" +
    "\114\001\002\000\016\002\ufffc\074\ufffc\111\ufffc\112\ufffc" +
    "\115\ufffc\126\ufffc\001\002\000\004\062\uffc1\001\002\000" +
    "\012\074\015\111\005\112\006\115\017\001\002\000\006" +
    "\062\uffbf\111\020\001\002\000\004\062\uffbb\001\002\000" +
    "\004\062\022\001\002\000\010\015\uffde\021\112\024\uffde" +
    "\001\002\000\006\015\024\024\025\001\002\000\004\062" +
    "\026\001\002\000\040\072\uffe2\074\uffe2\075\uffe2\076\uffe2" +
    "\100\uffe2\106\uffe2\110\uffe2\111\uffe2\112\uffe2\114\uffe2\115" +
    "\uffe2\126\uffe2\130\uffe2\131\uffe2\132\uffe2\001\002\000\010" +
    "\015\uffe1\021\027\024\uffe1\001\002\000\024\006\043\036" +
    "\042\037\044\061\034\062\040\064\041\065\035\066\045" +
    "\067\031\001\002\000\014\013\054\015\uffe0\024\uffe0\034" +
    "\053\035\050\001\002\000\044\004\uffa2\005\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\020" +
    "\uffa2\024\uffa2\034\uffa2\035\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\001\002\000\044\004\uff96\005\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\015\uff96\017\uff96\020\uff96" +
    "\024\uff96\034\uff96\035\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\001\002\000\044\004\067\005\072\007\uffd7\010\070" +
    "\011\071\012\066\013\uffd7\015\uffd7\017\uffd7\020\uffd7\024" +
    "\uffd7\034\uffd7\035\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\001\002\000\044\004\uffa6\005\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\020\uffa6\024\uffa6" +
    "\034\uffa6\035\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001" +
    "\002\000\044\004\uffa4\005\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\024\uffa4\034" +
    "\uffa4\035\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001\002" +
    "\000\032\007\uffd9\013\uffd9\015\uffd9\017\056\020\062\024" +
    "\uffd9\034\uffd9\035\uffd9\054\061\055\057\056\060\057\063" +
    "\001\002\000\044\004\uff95\005\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\015\uff95\017\uff95\020\uff95\024\uff95" +
    "\034\uff95\035\uff95\054\uff95\055\uff95\056\uff95\057\uff95\001" +
    "\002\000\052\004\uff99\005\uff99\006\103\007\uff99\010\uff99" +
    "\011\uff99\012\uff99\013\uff99\015\uff99\017\uff99\020\uff99\024" +
    "\uff99\034\uff99\035\uff99\036\101\037\102\054\uff99\055\uff99" +
    "\056\uff99\057\uff99\001\002\000\044\004\uffa5\005\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5" +
    "\020\uffa5\024\uffa5\034\uffa5\035\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\001\002\000\004\062\100\001\002\000\024" +
    "\006\043\036\042\037\044\061\034\062\040\064\041\065" +
    "\035\066\045\067\031\001\002\000\004\062\046\001\002" +
    "\000\044\004\uffa3\005\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\024\uffa3\034\uffa3" +
    "\035\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000" +
    "\044\004\uff91\005\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\015\uff91\017\uff91\020\uff91\024\uff91\034\uff91\035" +
    "\uff91\054\uff91\055\uff91\056\uff91\057\uff91\001\002\000\012" +
    "\007\051\013\054\034\053\035\050\001\002\000\024\006" +
    "\uffb4\036\uffb4\037\uffb4\061\uffb4\062\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\001\002\000\044\004\uff9a\005\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a\017\uff9a" +
    "\020\uff9a\024\uff9a\034\uff9a\035\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\001\002\000\024\006\043\036\042\037\044" +
    "\061\034\062\040\064\041\065\035\066\045\067\031\001" +
    "\002\000\024\006\uffb3\036\uffb3\037\uffb3\061\uffb3\062\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\001\002\000\024\006" +
    "\uffb2\036\uffb2\037\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\001\002\000\032\007\uffda\013\uffda\015" +
    "\uffda\017\056\020\062\024\uffda\034\uffda\035\uffda\054\061" +
    "\055\057\056\060\057\063\001\002\000\024\006\uffb8\036" +
    "\uffb8\037\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\001\002\000\024\006\uffba\036\uffba\037\uffba\061" +
    "\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\001\002" +
    "\000\024\006\uffb6\036\uffb6\037\uffb6\061\uffb6\062\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002\000\024\006\uffb9" +
    "\036\uffb9\037\uffb9\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\001\002\000\024\006\uffb7\036\uffb7\037\uffb7" +
    "\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001" +
    "\002\000\024\006\uffb5\036\uffb5\037\uffb5\061\uffb5\062\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\024\006" +
    "\043\036\042\037\044\061\034\062\040\064\041\065\035" +
    "\066\045\067\031\001\002\000\044\004\067\005\072\007" +
    "\uffd8\010\070\011\071\012\066\013\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\024\uffd8\034\uffd8\035\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\001\002\000\024\006\043\036\042\037\044" +
    "\061\034\062\040\064\041\065\035\066\045\067\031\001" +
    "\002\000\024\006\043\036\042\037\044\061\034\062\040" +
    "\064\041\065\035\066\045\067\031\001\002\000\024\006" +
    "\043\036\042\037\044\061\034\062\040\064\041\065\035" +
    "\066\045\067\031\001\002\000\024\006\043\036\042\037" +
    "\044\061\034\062\040\064\041\065\035\066\045\067\031" +
    "\001\002\000\024\006\043\036\042\037\044\061\034\062" +
    "\040\064\041\065\035\066\045\067\031\001\002\000\044" +
    "\004\uff9d\005\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\015\uff9d\017\uff9d\020\uff9d\024\uff9d\034\uff9d\035\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\044\004" +
    "\uff9c\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\015\uff9c\017\uff9c\020\uff9c\024\uff9c\034\uff9c\035\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\044\004\uff9e" +
    "\005\072\007\uff9e\010\uff9e\011\071\012\066\013\uff9e\015" +
    "\uff9e\017\uff9e\020\uff9e\024\uff9e\034\uff9e\035\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\001\002\000\044\004\uff9f\005" +
    "\072\007\uff9f\010\uff9f\011\071\012\066\013\uff9f\015\uff9f" +
    "\017\uff9f\020\uff9f\024\uff9f\034\uff9f\035\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\001\002\000\044\004\uff9b\005\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\017" +
    "\uff9b\020\uff9b\024\uff9b\034\uff9b\035\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\044\004\uff92\005\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\015\uff92\017\uff92" +
    "\020\uff92\024\uff92\034\uff92\035\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\001\002\000\044\004\uff94\005\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\015\uff94\017\uff94\020" +
    "\uff94\024\uff94\034\uff94\035\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\001\002\000\044\004\uff93\005\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\013\uff93\015\uff93\017\uff93\020\uff93" +
    "\024\uff93\034\uff93\035\uff93\054\uff93\055\uff93\056\uff93\057" +
    "\uff93\001\002\000\026\006\043\007\105\036\042\037\044" +
    "\061\034\062\040\064\041\065\035\066\045\067\031\001" +
    "\002\000\014\007\uffa1\013\054\015\uffa1\034\053\035\050" +
    "\001\002\000\044\004\uff97\005\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\015\uff97\017\uff97\020\uff97\024\uff97" +
    "\034\uff97\035\uff97\054\uff97\055\uff97\056\uff97\057\uff97\001" +
    "\002\000\006\007\110\015\107\001\002\000\024\006\043" +
    "\036\042\037\044\061\034\062\040\064\041\065\035\066" +
    "\045\067\031\001\002\000\044\004\uff98\005\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\015\uff98\017\uff98\020" +
    "\uff98\024\uff98\034\uff98\035\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\001\002\000\014\007\uffa0\013\054\015\uffa0\034" +
    "\053\035\050\001\002\000\024\006\043\036\042\037\044" +
    "\061\034\062\040\064\041\065\035\066\045\067\031\001" +
    "\002\000\014\013\054\015\uffdf\024\uffdf\034\053\035\050" +
    "\001\002\000\004\006\115\001\002\000\014\007\117\074" +
    "\015\111\005\112\006\115\017\001\002\000\004\062\334" +
    "\001\002\000\004\027\326\001\002\000\006\007\122\015" +
    "\121\001\002\000\012\074\015\111\005\112\006\115\017" +
    "\001\002\000\004\027\123\001\002\000\036\072\142\074" +
    "\015\075\016\076\125\100\136\106\145\110\133\111\005" +
    "\112\006\114\130\115\017\130\126\131\124\132\135\001" +
    "\002\000\004\006\316\001\002\000\004\024\315\001\002" +
    "\000\004\006\307\001\002\000\026\030\ufff0\072\ufff0\076" +
    "\ufff0\100\ufff0\106\ufff0\110\ufff0\114\ufff0\130\ufff0\131\ufff0" +
    "\132\ufff0\001\002\000\020\024\302\061\034\062\304\064" +
    "\041\065\035\066\045\067\031\001\002\000\026\030\uffea" +
    "\072\uffea\076\uffea\100\uffea\106\uffea\110\uffea\114\uffea\130" +
    "\uffea\131\uffea\132\uffea\001\002\000\026\030\301\072\142" +
    "\076\125\100\136\106\145\110\133\114\130\130\126\131" +
    "\124\132\135\001\002\000\004\006\256\001\002\000\026" +
    "\030\uffeb\072\uffeb\076\uffeb\100\uffeb\106\uffeb\110\uffeb\114" +
    "\uffeb\130\uffeb\131\uffeb\132\uffeb\001\002\000\004\006\252" +
    "\001\002\000\004\027\242\001\002\000\026\030\uffe9\072" +
    "\uffe9\076\uffe9\100\uffe9\106\uffe9\110\uffe9\114\uffe9\130\uffe9" +
    "\131\uffe9\132\uffe9\001\002\000\036\072\142\074\015\075" +
    "\016\076\125\100\136\106\145\110\133\111\005\112\006" +
    "\114\130\115\017\130\126\131\124\132\135\001\002\000" +
    "\026\030\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110\uffed" +
    "\114\uffed\130\uffed\131\uffed\132\uffed\001\002\000\004\024" +
    "\236\001\002\000\026\030\uffec\072\uffec\076\uffec\100\uffec" +
    "\106\uffec\110\uffec\114\uffec\130\uffec\131\uffec\132\uffec\001" +
    "\002\000\004\062\022\001\002\000\004\006\147\001\002" +
    "\000\026\030\uffee\072\uffee\076\uffee\100\uffee\106\uffee\110" +
    "\uffee\114\uffee\130\uffee\131\uffee\132\uffee\001\002\000\014" +
    "\062\152\074\015\111\005\112\006\115\017\001\002\000" +
    "\004\007\227\001\002\000\004\062\220\001\002\000\004" +
    "\021\153\001\002\000\004\061\154\001\002\000\004\024" +
    "\155\001\002\000\024\006\043\036\042\037\044\061\034" +
    "\062\160\064\041\065\035\066\045\067\031\001\002\000" +
    "\014\007\uffdb\013\054\024\uffdb\034\053\035\050\001\002" +
    "\000\004\024\175\001\002\000\062\004\uff99\005\uff99\006" +
    "\103\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\017\uff99" +
    "\020\uff99\021\166\024\uff99\034\uff99\035\uff99\036\101\037" +
    "\102\040\164\041\163\042\165\043\162\054\uff99\055\uff99" +
    "\056\uff99\057\uff99\001\002\000\006\007\uffdc\024\uffdc\001" +
    "\002\000\024\006\043\036\042\037\044\061\034\062\040" +
    "\064\041\065\035\066\045\067\031\001\002\000\024\006" +
    "\043\036\042\037\044\061\034\062\040\064\041\065\035" +
    "\066\045\067\031\001\002\000\024\006\043\036\042\037" +
    "\044\061\034\062\040\064\041\065\035\066\045\067\031" +
    "\001\002\000\024\006\043\036\042\037\044\061\034\062" +
    "\040\064\041\065\035\066\045\067\031\001\002\000\024" +
    "\006\043\036\042\037\044\061\034\062\160\064\041\065" +
    "\035\066\045\067\031\001\002\000\014\007\uff8c\013\054" +
    "\024\uff8c\034\053\035\050\001\002\000\006\007\uff8b\024" +
    "\uff8b\001\002\000\014\007\uff8e\013\054\024\uff8e\034\053" +
    "\035\050\001\002\000\014\007\uff90\013\054\024\uff90\034" +
    "\053\035\050\001\002\000\014\007\uff8f\013\054\024\uff8f" +
    "\034\053\035\050\001\002\000\014\007\uff8d\013\054\024" +
    "\uff8d\034\053\035\050\001\002\000\010\036\176\037\201" +
    "\062\200\001\002\000\004\062\217\001\002\000\004\007" +
    "\uffcf\001\002\000\020\036\206\037\210\040\205\041\203" +
    "\042\207\043\204\044\211\001\002\000\004\062\202\001" +
    "\002\000\004\007\uffc6\001\002\000\004\061\216\001\002" +
    "\000\004\061\215\001\002\000\004\061\214\001\002\000" +
    "\004\007\uffc9\001\002\000\004\061\213\001\002\000\004" +
    "\007\uffc8\001\002\000\004\061\212\001\002\000\004\007" +
    "\uffca\001\002\000\004\007\uffcc\001\002\000\004\007\uffce" +
    "\001\002\000\004\007\uffcb\001\002\000\004\007\uffcd\001" +
    "\002\000\004\007\uffc7\001\002\000\004\021\221\001\002" +
    "\000\004\061\222\001\002\000\004\024\223\001\002\000" +
    "\024\006\043\036\042\037\044\061\034\062\160\064\041" +
    "\065\035\066\045\067\031\001\002\000\004\024\225\001" +
    "\002\000\010\036\176\037\201\062\200\001\002\000\004" +
    "\007\uffd0\001\002\000\004\027\230\001\002\000\024\072" +
    "\142\076\125\100\136\106\145\110\133\114\130\130\126" +
    "\131\124\132\135\001\002\000\026\030\233\072\142\076" +
    "\125\100\136\106\145\110\133\114\130\130\126\131\124" +
    "\132\135\001\002\000\026\030\uffef\072\uffef\076\uffef\100" +
    "\uffef\106\uffef\110\uffef\114\uffef\130\uffef\131\uffef\132\uffef" +
    "\001\002\000\026\030\uffd1\072\uffd1\076\uffd1\100\uffd1\106" +
    "\uffd1\110\uffd1\114\uffd1\130\uffd1\131\uffd1\132\uffd1\001\002" +
    "\000\006\015\024\024\235\001\002\000\040\072\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\100\uffe3\106\uffe3\110\uffe3\111\uffe3" +
    "\112\uffe3\114\uffe3\115\uffe3\126\uffe3\130\uffe3\131\uffe3\132" +
    "\uffe3\001\002\000\026\030\uffe8\072\uffe8\076\uffe8\100\uffe8" +
    "\106\uffe8\110\uffe8\114\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\040\072\ufffd\074\ufffd\075\ufffd\076\ufffd\100\ufffd" +
    "\106\ufffd\110\ufffd\111\ufffd\112\ufffd\114\ufffd\115\ufffd\126" +
    "\ufffd\130\ufffd\131\ufffd\132\ufffd\001\002\000\026\030\241" +
    "\072\142\076\125\100\136\106\145\110\133\114\130\130" +
    "\126\131\124\132\135\001\002\000\016\002\ufff7\074\ufff7" +
    "\111\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000\024\072" +
    "\142\076\125\100\136\106\145\110\133\114\130\130\126" +
    "\131\124\132\135\001\002\000\026\030\244\072\142\076" +
    "\125\100\136\106\145\110\133\114\130\130\126\131\124" +
    "\132\135\001\002\000\004\130\245\001\002\000\004\006" +
    "\246\001\002\000\024\006\043\036\042\037\044\061\034" +
    "\062\160\064\041\065\035\066\045\067\031\001\002\000" +
    "\004\007\250\001\002\000\004\024\251\001\002\000\026" +
    "\030\uffd2\072\uffd2\076\uffd2\100\uffd2\106\uffd2\110\uffd2\114" +
    "\uffd2\130\uffd2\131\uffd2\132\uffd2\001\002\000\004\062\253" +
    "\001\002\000\004\007\254\001\002\000\004\024\255\001" +
    "\002\000\026\030\uffc3\072\uffc3\076\uffc3\100\uffc3\106\uffc3" +
    "\110\uffc3\114\uffc3\130\uffc3\131\uffc3\132\uffc3\001\002\000" +
    "\024\006\043\036\042\037\044\061\034\062\160\064\041" +
    "\065\035\066\045\067\031\001\002\000\004\007\260\001" +
    "\002\000\004\027\261\001\002\000\024\072\142\076\125" +
    "\100\136\106\145\110\133\114\130\130\126\131\124\132" +
    "\135\001\002\000\026\030\263\072\142\076\125\100\136" +
    "\106\145\110\133\114\130\130\126\131\124\132\135\001" +
    "\002\000\030\030\uffd4\072\uffd4\076\uffd4\100\uffd4\102\264" +
    "\106\uffd4\110\uffd4\114\uffd4\130\uffd4\131\uffd4\132\uffd4\001" +
    "\002\000\006\027\266\110\267\001\002\000\026\030\uffdd" +
    "\072\uffdd\076\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd\130" +
    "\uffdd\131\uffdd\132\uffdd\001\002\000\024\072\142\076\125" +
    "\100\136\106\145\110\133\114\130\130\126\131\124\132" +
    "\135\001\002\000\004\006\270\001\002\000\024\006\043" +
    "\036\042\037\044\061\034\062\160\064\041\065\035\066" +
    "\045\067\031\001\002\000\004\007\272\001\002\000\004" +
    "\027\273\001\002\000\024\072\142\076\125\100\136\106" +
    "\145\110\133\114\130\130\126\131\124\132\135\001\002" +
    "\000\026\030\275\072\142\076\125\100\136\106\145\110" +
    "\133\114\130\130\126\131\124\132\135\001\002\000\030" +
    "\030\uffd4\072\uffd4\076\uffd4\100\uffd4\102\264\106\uffd4\110" +
    "\uffd4\114\uffd4\130\uffd4\131\uffd4\132\uffd4\001\002\000\026" +
    "\030\uffd6\072\uffd6\076\uffd6\100\uffd6\106\uffd6\110\uffd6\114" +
    "\uffd6\130\uffd6\131\uffd6\132\uffd6\001\002\000\026\030\300" +
    "\072\142\076\125\100\136\106\145\110\133\114\130\130" +
    "\126\131\124\132\135\001\002\000\026\030\uffd5\072\uffd5" +
    "\076\uffd5\100\uffd5\106\uffd5\110\uffd5\114\uffd5\130\uffd5\131" +
    "\uffd5\132\uffd5\001\002\000\016\002\ufff3\074\ufff3\111\ufff3" +
    "\112\ufff3\115\ufff3\126\ufff3\001\002\000\026\030\uffe4\072" +
    "\uffe4\076\uffe4\100\uffe4\106\uffe4\110\uffe4\114\uffe4\130\uffe4" +
    "\131\uffe4\132\uffe4\001\002\000\004\024\306\001\002\000" +
    "\004\024\305\001\002\000\026\030\uffe5\072\uffe5\076\uffe5" +
    "\100\uffe5\106\uffe5\110\uffe5\114\uffe5\130\uffe5\131\uffe5\132" +
    "\uffe5\001\002\000\026\030\uffe6\072\uffe6\076\uffe6\100\uffe6" +
    "\106\uffe6\110\uffe6\114\uffe6\130\uffe6\131\uffe6\132\uffe6\001" +
    "\002\000\024\006\043\036\042\037\044\061\034\062\160" +
    "\064\041\065\035\066\045\067\031\001\002\000\004\007" +
    "\311\001\002\000\004\027\312\001\002\000\024\072\142" +
    "\076\125\100\136\106\145\110\133\114\130\130\126\131" +
    "\124\132\135\001\002\000\026\030\314\072\142\076\125" +
    "\100\136\106\145\110\133\114\130\130\126\131\124\132" +
    "\135\001\002\000\026\030\uffd3\072\uffd3\076\uffd3\100\uffd3" +
    "\106\uffd3\110\uffd3\114\uffd3\130\uffd3\131\uffd3\132\uffd3\001" +
    "\002\000\026\030\uffe7\072\uffe7\076\uffe7\100\uffe7\106\uffe7" +
    "\110\uffe7\114\uffe7\130\uffe7\131\uffe7\132\uffe7\001\002\000" +
    "\006\007\317\062\320\001\002\000\004\024\323\001\002" +
    "\000\004\007\321\001\002\000\004\024\322\001\002\000" +
    "\026\030\uffc5\072\uffc5\076\uffc5\100\uffc5\106\uffc5\110\uffc5" +
    "\114\uffc5\130\uffc5\131\uffc5\132\uffc5\001\002\000\026\030" +
    "\uffc4\072\uffc4\076\uffc4\100\uffc4\106\uffc4\110\uffc4\114\uffc4" +
    "\130\uffc4\131\uffc4\132\uffc4\001\002\000\004\062\325\001" +
    "\002\000\006\007\ufff1\015\ufff1\001\002\000\036\072\142" +
    "\074\015\075\016\076\125\100\136\106\145\110\133\111" +
    "\005\112\006\114\130\115\017\130\126\131\124\132\135" +
    "\001\002\000\026\030\333\072\142\076\125\100\136\106" +
    "\145\110\133\114\130\130\126\131\124\132\135\001\002" +
    "\000\036\072\142\074\015\075\016\076\125\100\136\106" +
    "\145\110\133\111\005\112\006\114\130\115\017\130\126" +
    "\131\124\132\135\001\002\000\026\030\332\072\142\076" +
    "\125\100\136\106\145\110\133\114\130\130\126\131\124" +
    "\132\135\001\002\000\016\002\ufff8\074\ufff8\111\ufff8\112" +
    "\ufff8\115\ufff8\126\ufff8\001\002\000\016\002\ufff4\074\ufff4" +
    "\111\ufff4\112\ufff4\115\ufff4\126\ufff4\001\002\000\006\007" +
    "\ufff2\015\ufff2\001\002\000\004\002\001\001\002\000\012" +
    "\006\337\015\uffde\021\112\024\uffde\001\002\000\014\007" +
    "\340\074\015\111\005\112\006\115\017\001\002\000\004" +
    "\027\351\001\002\000\006\007\342\015\121\001\002\000" +
    "\004\027\343\001\002\000\036\072\142\074\015\075\016" +
    "\076\125\100\136\106\145\110\133\111\005\112\006\114" +
    "\130\115\017\130\126\131\124\132\135\001\002\000\026" +
    "\030\350\072\142\076\125\100\136\106\145\110\133\114" +
    "\130\130\126\131\124\132\135\001\002\000\036\072\142" +
    "\074\015\075\016\076\125\100\136\106\145\110\133\111" +
    "\005\112\006\114\130\115\017\130\126\131\124\132\135" +
    "\001\002\000\026\030\347\072\142\076\125\100\136\106" +
    "\145\110\133\114\130\130\126\131\124\132\135\001\002" +
    "\000\016\002\ufffa\074\ufffa\111\ufffa\112\ufffa\115\ufffa\126" +
    "\ufffa\001\002\000\016\002\ufff6\074\ufff6\111\ufff6\112\ufff6" +
    "\115\ufff6\126\ufff6\001\002\000\036\072\142\074\015\075" +
    "\016\076\125\100\136\106\145\110\133\111\005\112\006" +
    "\114\130\115\017\130\126\131\124\132\135\001\002\000" +
    "\026\030\356\072\142\076\125\100\136\106\145\110\133" +
    "\114\130\130\126\131\124\132\135\001\002\000\036\072" +
    "\142\074\015\075\016\076\125\100\136\106\145\110\133" +
    "\111\005\112\006\114\130\115\017\130\126\131\124\132" +
    "\135\001\002\000\026\030\355\072\142\076\125\100\136" +
    "\106\145\110\133\114\130\130\126\131\124\132\135\001" +
    "\002\000\016\002\ufff9\074\ufff9\111\ufff9\112\ufff9\115\ufff9" +
    "\126\ufff9\001\002\000\016\002\ufff5\074\ufff5\111\ufff5\112" +
    "\ufff5\115\ufff5\126\ufff5\001\002\000\004\062\361\001\002" +
    "\000\016\002\ufffb\074\ufffb\111\ufffb\112\ufffb\115\ufffb\126" +
    "\ufffb\001\002\000\004\006\337\001\002\000\004\062\uffbc" +
    "\001\002\000\004\062\uffbd\001\002\000\004\062\uffbe\001" +
    "\002\000\016\002\000\074\015\111\005\112\006\115\017" +
    "\126\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\236\014\010\024\013" +
    "\030\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\356\024\357\001\001\000\004" +
    "\023\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\031\033" +
    "\036\034\032\035\035\037\027\001\001\000\004\016\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\031\033\036\034\032" +
    "\035\035\037\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\031\033\036\034" +
    "\032\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\031\033\036\034\064\001" +
    "\001\000\002\001\001\000\010\022\031\033\036\034\076" +
    "\001\001\000\010\022\031\033\036\034\075\001\001\000" +
    "\010\022\031\033\036\034\074\001\001\000\010\022\031" +
    "\033\036\034\073\001\001\000\010\022\031\033\036\034" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\031" +
    "\033\036\034\032\035\035\037\103\040\105\001\001\000" +
    "\004\016\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\031\033\036\034\032\035\035\037\110\001" +
    "\001\000\002\001\001\000\004\016\051\001\001\000\014" +
    "\022\031\033\036\034\032\035\035\037\112\001\001\000" +
    "\004\016\051\001\001\000\002\001\001\000\006\014\115" +
    "\025\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\323\001\001\000\002\001\001" +
    "\000\030\003\126\004\006\006\145\010\142\011\133\014" +
    "\143\021\130\026\136\027\137\036\131\041\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\302\001\001\000\002\001\001" +
    "\000\020\003\231\006\145\010\142\011\133\021\130\026" +
    "\136\041\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\126\004\236\006\145\010\142\011\133\014\143" +
    "\021\130\026\136\036\237\041\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\147\014\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\156\022\031\032\160\033\036\034\032\035\035" +
    "\037\155\001\001\000\004\016\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\031" +
    "\033\036\034\032\035\035\037\173\001\001\000\014\022" +
    "\031\033\036\034\032\035\035\037\172\001\001\000\014" +
    "\022\031\033\036\034\032\035\035\037\171\001\001\000" +
    "\014\022\031\033\036\034\032\035\035\037\170\001\001" +
    "\000\016\022\031\032\167\033\036\034\032\035\035\037" +
    "\166\001\001\000\004\016\051\001\001\000\002\001\001" +
    "\000\004\016\051\001\001\000\004\016\051\001\001\000" +
    "\004\016\051\001\001\000\004\016\051\001\001\000\004" +
    "\005\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\223\022\031\032\160\033\036\034\032\035\035\037\155" +
    "\001\001\000\002\001\001\000\004\005\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\126\006\145" +
    "\010\142\011\133\021\130\026\136\036\230\041\140\001" +
    "\001\000\020\003\231\006\145\010\142\011\133\021\130" +
    "\026\136\041\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\231\006\145\010\142\011" +
    "\133\021\130\026\136\041\140\001\001\000\002\001\001" +
    "\000\022\003\126\006\145\010\142\011\133\021\130\026" +
    "\136\036\242\041\140\001\001\000\020\003\231\006\145" +
    "\010\142\011\133\021\130\026\136\041\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\246\022\031" +
    "\032\160\033\036\034\032\035\035\037\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\256\022\031\032\160\033\036\034\032" +
    "\035\035\037\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\126\006\145\010\142\011\133\021\130" +
    "\026\136\036\261\041\140\001\001\000\020\003\231\006" +
    "\145\010\142\011\133\021\130\026\136\041\140\001\001" +
    "\000\004\007\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\126\006\145\010\142\011\133\021\130" +
    "\026\136\036\276\041\140\001\001\000\002\001\001\000" +
    "\020\012\270\022\031\032\160\033\036\034\032\035\035" +
    "\037\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\126\006\145\010\142\011\133\021\130\026\136" +
    "\036\273\041\140\001\001\000\020\003\231\006\145\010" +
    "\142\011\133\021\130\026\136\041\140\001\001\000\004" +
    "\007\275\001\001\000\002\001\001\000\020\003\231\006" +
    "\145\010\142\011\133\021\130\026\136\041\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\307\022\031\032\160\033\036\034" +
    "\032\035\035\037\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\126\006\145\010\142\011\133\021" +
    "\130\026\136\036\312\041\140\001\001\000\020\003\231" +
    "\006\145\010\142\011\133\021\130\026\136\041\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\126\004\006\006\145\010\142\011" +
    "\133\014\143\021\130\026\136\027\327\036\326\041\140" +
    "\001\001\000\020\003\231\006\145\010\142\011\133\021" +
    "\130\026\136\041\140\001\001\000\026\003\126\004\236" +
    "\006\145\010\142\011\133\014\143\021\130\026\136\036" +
    "\330\041\140\001\001\000\020\003\231\006\145\010\142" +
    "\011\133\021\130\026\136\041\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\115\025\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\126\004\006\006\145\010\142\011\133\014\143\021" +
    "\130\026\136\027\344\036\343\041\140\001\001\000\020" +
    "\003\231\006\145\010\142\011\133\021\130\026\136\041" +
    "\140\001\001\000\026\003\126\004\236\006\145\010\142" +
    "\011\133\014\143\021\130\026\136\036\345\041\140\001" +
    "\001\000\020\003\231\006\145\010\142\011\133\021\130" +
    "\026\136\041\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\126\004\006\006\145\010\142\011\133" +
    "\014\143\021\130\026\136\027\352\036\351\041\140\001" +
    "\001\000\020\003\231\006\145\010\142\011\133\021\130" +
    "\026\136\041\140\001\001\000\026\003\126\004\236\006" +
    "\145\010\142\011\133\014\143\021\130\026\136\036\353" +
    "\041\140\001\001\000\020\003\231\006\145\010\142\011" +
    "\133\021\130\026\136\041\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\356\024\357\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= T_DATO IDENTIFIER ASSIGN NUMBER SEMICOLON EXPRESIONES SEMICOLON DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= IDENTIFIER ASSIGN NUMBER SEMICOLON EXPRESIONES SEMICOLON DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= IDENTIFIER PLUS_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= IDENTIFIER MINUS_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= IDENTIFIER TIMES_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= IDENTIFIER DIV_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= IDENTIFIER MOD_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // READ_WRITE ::= WRITE LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
