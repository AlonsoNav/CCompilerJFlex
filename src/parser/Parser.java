
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\030\003\000\002\030\004\000\002\031\003" +
    "\000\002\031\004\000\002\025\013\000\002\025\012\000" +
    "\002\025\012\000\002\025\013\000\002\025\012\000\002" +
    "\025\011\000\002\025\011\000\002\025\012\000\002\026" +
    "\004\000\002\026\006\000\002\037\003\000\002\037\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\005" +
    "\000\002\027\005\000\002\027\004\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\024\003\000\002\024" +
    "\005\000\002\006\011\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\036\005\000\002\036\005\000" +
    "\002\007\015\000\002\010\011\000\002\011\013\000\002" +
    "\012\011\000\002\014\012\000\002\014\011\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\041\011\000\002" +
    "\042\004\000\002\042\003\000\002\042\003\000\002\045" +
    "\006\000\002\044\004\000\002\044\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\022\007\000\002\022\006\000\002\022" +
    "\007\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\002" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\002" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\005\000\002\035\003\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\016\074\016\075\017\111\005\112\006\115" +
    "\015\126\013\001\002\000\016\074\016\075\017\111\005" +
    "\112\006\115\015\126\013\001\002\000\010\062\uffb0\112" +
    "\u0108\115\u0107\001\002\000\006\062\uffae\111\u0106\001\002" +
    "\000\056\006\ufffe\036\ufffe\037\ufffe\061\ufffe\062\ufffe\072" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\106\ufffe" +
    "\110\ufffe\111\ufffe\112\ufffe\114\ufffe\115\ufffe\122\ufffe\126" +
    "\ufffe\130\ufffe\131\ufffe\132\ufffe\001\002\000\016\002\uffff" +
    "\074\016\111\005\112\006\115\015\126\013\001\002\000" +
    "\004\062\362\001\002\000\004\002\361\001\002\000\004" +
    "\062\040\001\002\000\016\002\ufffc\074\ufffc\111\ufffc\112" +
    "\ufffc\115\ufffc\126\ufffc\001\002\000\006\062\uffad\111\037" +
    "\001\002\000\004\062\uffaf\001\002\000\012\074\016\111" +
    "\005\112\006\115\015\001\002\000\004\062\021\001\002" +
    "\000\006\021\023\024\022\001\002\000\056\006\uffdc\036" +
    "\uffdc\037\uffdc\061\uffdc\062\uffdc\072\uffdc\074\uffdc\075\uffdc" +
    "\076\uffdc\077\uffdc\100\uffdc\106\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\114\uffdc\115\uffdc\122\uffdc\126\uffdc\130\uffdc\131\uffdc" +
    "\132\uffdc\001\002\000\022\061\027\062\032\063\030\064" +
    "\033\065\031\066\034\067\024\070\026\001\002\000\004" +
    "\024\uff80\001\002\000\004\024\036\001\002\000\004\024" +
    "\uff83\001\002\000\004\024\uff86\001\002\000\004\024\uff85" +
    "\001\002\000\004\024\uff82\001\002\000\004\024\035\001" +
    "\002\000\004\024\uff84\001\002\000\004\024\uff81\001\002" +
    "\000\056\006\uffda\036\uffda\037\uffda\061\uffda\062\uffda\072" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\106\uffda" +
    "\110\uffda\111\uffda\112\uffda\114\uffda\115\uffda\122\uffda\126" +
    "\uffda\130\uffda\131\uffda\132\uffda\001\002\000\056\006\uffdb" +
    "\036\uffdb\037\uffdb\061\uffdb\062\uffdb\072\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\106\uffdb\110\uffdb\111\uffdb" +
    "\112\uffdb\114\uffdb\115\uffdb\122\uffdb\126\uffdb\130\uffdb\131" +
    "\uffdb\132\uffdb\001\002\000\004\062\uffa9\001\002\000\004" +
    "\006\041\001\002\000\014\007\043\074\016\111\005\112" +
    "\006\115\015\001\002\000\004\062\360\001\002\000\004" +
    "\027\352\001\002\000\006\007\046\015\045\001\002\000" +
    "\012\074\016\111\005\112\006\115\015\001\002\000\004" +
    "\027\047\001\002\000\054\006\060\036\062\037\054\061" +
    "\074\062\110\072\075\074\016\075\017\076\061\077\103" +
    "\100\107\106\063\110\067\111\005\112\006\114\071\115" +
    "\015\122\077\130\102\131\101\132\064\001\002\000\046" +
    "\006\uffee\030\uffee\036\uffee\037\uffee\061\uffee\062\uffee\072" +
    "\uffee\073\uffee\076\uffee\077\uffee\100\uffee\106\uffee\110\uffee" +
    "\114\uffee\122\uffee\130\uffee\131\uffee\132\uffee\001\002\000" +
    "\046\006\uffed\030\uffed\036\uffed\037\uffed\061\uffed\062\uffed" +
    "\072\uffed\073\uffed\076\uffed\077\uffed\100\uffed\106\uffed\110" +
    "\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132\uffed\001\002" +
    "\000\056\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\013\uff77\017\uff77\020\uff77\023\uff77\024\uff77" +
    "\034\uff77\035\uff77\036\uff77\037\uff77\054\uff77\055\uff77\056" +
    "\uff77\057\uff77\061\uff77\062\uff77\001\002\000\014\007\uffd4" +
    "\013\345\024\uffd4\034\344\035\342\001\002\000\004\062" +
    "\341\001\002\000\046\006\uffe7\030\uffe7\036\uffe7\037\uffe7" +
    "\061\uffe7\062\uffe7\072\uffe7\073\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\106\uffe7\110\uffe7\114\uffe7\122\uffe7\130\uffe7\131\uffe7" +
    "\132\uffe7\001\002\000\044\006\060\030\340\036\062\037" +
    "\054\061\074\062\110\072\075\076\061\077\103\100\107" +
    "\106\063\110\067\114\071\122\077\130\102\131\101\132" +
    "\064\001\002\000\046\006\ufff0\030\ufff0\036\ufff0\037\ufff0" +
    "\061\ufff0\062\ufff0\072\ufff0\073\ufff0\076\ufff0\077\ufff0\100" +
    "\ufff0\106\ufff0\110\ufff0\114\ufff0\122\ufff0\130\ufff0\131\ufff0" +
    "\132\ufff0\001\002\000\014\006\060\036\062\037\054\061" +
    "\074\062\121\001\002\000\004\024\335\001\002\000\004" +
    "\062\334\001\002\000\004\006\266\001\002\000\004\006" +
    "\262\001\002\000\046\006\uffeb\030\uffeb\036\uffeb\037\uffeb" +
    "\061\uffeb\062\uffeb\072\uffeb\073\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\106\uffeb\110\uffeb\114\uffeb\122\uffeb\130\uffeb\131\uffeb" +
    "\132\uffeb\001\002\000\046\006\uffea\030\uffea\036\uffea\037" +
    "\uffea\061\uffea\062\uffea\072\uffea\073\uffea\076\uffea\077\uffea" +
    "\100\uffea\106\uffea\110\uffea\114\uffea\122\uffea\130\uffea\131" +
    "\uffea\132\uffea\001\002\000\004\006\250\001\002\000\004" +
    "\062\241\001\002\000\024\024\235\061\027\062\236\063" +
    "\030\064\033\065\031\066\034\067\024\070\026\001\002" +
    "\000\046\006\uffe8\030\uffe8\036\uffe8\037\uffe8\061\uffe8\062" +
    "\uffe8\072\uffe8\073\uffe8\076\uffe8\077\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\054\006\060\036\062\037\054\061\074\062\110" +
    "\072\075\074\016\075\017\076\061\077\103\100\107\106" +
    "\063\110\067\111\005\112\006\114\071\115\015\122\077" +
    "\130\102\131\101\132\064\001\002\000\056\004\uff79\005" +
    "\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79" +
    "\017\uff79\020\uff79\023\uff79\024\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\054\uff79\055\uff79\056\uff79\057\uff79\061\uff79" +
    "\062\uff79\001\002\000\004\024\230\001\002\000\006\007" +
    "\uffd6\024\uffd6\001\002\000\004\006\200\001\002\000\050" +
    "\004\123\005\126\006\uffa1\007\uffd5\010\124\011\125\012" +
    "\122\017\170\020\174\023\171\024\uffd5\036\uffa1\037\uffa1" +
    "\054\176\055\173\056\167\057\172\061\uffa1\062\uffa1\001" +
    "\002\000\004\006\161\001\002\000\004\006\153\001\002" +
    "\000\004\023\152\001\002\000\046\006\uffec\030\uffec\036" +
    "\uffec\037\uffec\061\uffec\062\uffec\072\uffec\073\uffec\076\uffec" +
    "\077\uffec\100\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130" +
    "\uffec\131\uffec\132\uffec\001\002\000\004\024\151\001\002" +
    "\000\046\006\uffe9\030\uffe9\036\uffe9\037\uffe9\061\uffe9\062" +
    "\uffe9\072\uffe9\073\uffe9\076\uffe9\077\uffe9\100\uffe9\106\uffe9" +
    "\110\uffe9\114\uffe9\122\uffe9\130\uffe9\131\uffe9\132\uffe9\001" +
    "\002\000\004\027\140\001\002\000\062\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\017\uff7a\020" +
    "\uff7a\021\117\023\uff7a\024\uff7a\036\114\037\116\040\113" +
    "\041\112\042\115\043\111\054\uff7a\055\uff7a\056\uff7a\057" +
    "\uff7a\061\uff7a\062\uff7a\001\002\000\014\006\060\036\062" +
    "\037\054\061\074\062\121\001\002\000\014\006\060\036" +
    "\062\037\054\061\074\062\121\001\002\000\014\006\060" +
    "\036\062\037\054\061\074\062\121\001\002\000\056\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\017\uff76\020\uff76\023\uff76\024\uff76\034\uff76\035" +
    "\uff76\036\uff76\037\uff76\054\uff76\055\uff76\056\uff76\057\uff76" +
    "\061\uff76\062\uff76\001\002\000\014\006\060\036\062\037" +
    "\054\061\074\062\121\001\002\000\056\004\uff75\005\uff75" +
    "\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\017" +
    "\uff75\020\uff75\023\uff75\024\uff75\034\uff75\035\uff75\036\uff75" +
    "\037\uff75\054\uff75\055\uff75\056\uff75\057\uff75\061\uff75\062" +
    "\uff75\001\002\000\014\006\060\036\062\037\054\061\074" +
    "\062\121\001\002\000\020\004\123\005\126\007\uff6e\010" +
    "\124\011\125\012\122\024\uff6e\001\002\000\056\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013" +
    "\uff7a\017\uff7a\020\uff7a\023\uff7a\024\uff7a\034\uff7a\035\uff7a" +
    "\036\114\037\116\054\uff7a\055\uff7a\056\uff7a\057\uff7a\061" +
    "\uff7a\062\uff7a\001\002\000\014\006\060\036\062\037\054" +
    "\061\074\062\121\001\002\000\014\006\060\036\062\037" +
    "\054\061\074\062\121\001\002\000\014\006\060\036\062" +
    "\037\054\061\074\062\121\001\002\000\014\006\060\036" +
    "\062\037\054\061\074\062\121\001\002\000\014\006\060" +
    "\036\062\037\054\061\074\062\121\001\002\000\056\004" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d" +
    "\013\uff7d\017\uff7d\020\uff7d\023\uff7d\024\uff7d\034\uff7d\035" +
    "\uff7d\036\uff7d\037\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\061\uff7d\062\uff7d\001\002\000\056\004\uff7c\005\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\017\uff7c" +
    "\020\uff7c\023\uff7c\024\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\061\uff7c\062\uff7c" +
    "\001\002\000\056\004\uff7e\005\126\006\uff7e\007\uff7e\010" +
    "\uff7e\011\125\012\122\013\uff7e\017\uff7e\020\uff7e\023\uff7e" +
    "\024\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\054\uff7e\055" +
    "\uff7e\056\uff7e\057\uff7e\061\uff7e\062\uff7e\001\002\000\056" +
    "\004\uff7f\005\126\006\uff7f\007\uff7f\010\uff7f\011\125\012" +
    "\122\013\uff7f\017\uff7f\020\uff7f\023\uff7f\024\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\054\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\061\uff7f\062\uff7f\001\002\000\056\004\uff7b\005\uff7b" +
    "\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\017" +
    "\uff7b\020\uff7b\023\uff7b\024\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\061\uff7b\062" +
    "\uff7b\001\002\000\020\004\123\005\126\007\uff70\010\124" +
    "\011\125\012\122\024\uff70\001\002\000\020\004\123\005" +
    "\126\007\uff72\010\124\011\125\012\122\024\uff72\001\002" +
    "\000\020\004\123\005\126\007\uff71\010\124\011\125\012" +
    "\122\024\uff71\001\002\000\020\004\123\005\126\007\uff6f" +
    "\010\124\011\125\012\122\024\uff6f\001\002\000\042\006" +
    "\060\036\062\037\054\061\074\062\110\072\075\076\061" +
    "\077\103\100\107\106\063\110\067\114\071\122\077\130" +
    "\102\131\101\132\064\001\002\000\044\006\060\030\143" +
    "\036\062\037\054\061\074\062\110\072\075\076\061\077" +
    "\103\100\107\106\063\110\067\114\071\122\077\130\102" +
    "\131\101\132\064\001\002\000\046\006\uffef\030\uffef\036" +
    "\uffef\037\uffef\061\uffef\062\uffef\072\uffef\073\uffef\076\uffef" +
    "\077\uffef\100\uffef\106\uffef\110\uffef\114\uffef\122\uffef\130" +
    "\uffef\131\uffef\132\uffef\001\002\000\004\130\144\001\002" +
    "\000\004\006\145\001\002\000\014\006\060\036\062\037" +
    "\054\061\074\062\110\001\002\000\004\007\147\001\002" +
    "\000\004\024\150\001\002\000\046\006\uffcf\030\uffcf\036" +
    "\uffcf\037\uffcf\061\uffcf\062\uffcf\072\uffcf\073\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\106\uffcf\110\uffcf\114\uffcf\122\uffcf\130" +
    "\uffcf\131\uffcf\132\uffcf\001\002\000\046\006\uffe6\030\uffe6" +
    "\036\uffe6\037\uffe6\061\uffe6\062\uffe6\072\uffe6\073\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\106\uffe6\110\uffe6\114\uffe6\122\uffe6" +
    "\130\uffe6\131\uffe6\132\uffe6\001\002\000\046\006\uffe3\030" +
    "\uffe3\036\uffe3\037\uffe3\061\uffe3\062\uffe3\072\uffe3\073\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\106\uffe3\110\uffe3\114\uffe3\122" +
    "\uffe3\130\uffe3\131\uffe3\132\uffe3\001\002\000\014\006\060" +
    "\036\062\037\054\061\074\062\110\001\002\000\004\007" +
    "\155\001\002\000\004\027\156\001\002\000\042\006\060" +
    "\036\062\037\054\061\074\062\110\072\075\076\061\077" +
    "\103\100\107\106\063\110\067\114\071\122\077\130\102" +
    "\131\101\132\064\001\002\000\044\006\060\030\160\036" +
    "\062\037\054\061\074\062\110\072\075\076\061\077\103" +
    "\100\107\106\063\110\067\114\071\122\077\130\102\131" +
    "\101\132\064\001\002\000\046\006\uffd0\030\uffd0\036\uffd0" +
    "\037\uffd0\061\uffd0\062\uffd0\072\uffd0\073\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\106\uffd0\110\uffd0\114\uffd0\122\uffd0\130\uffd0" +
    "\131\uffd0\132\uffd0\001\002\000\006\007\162\062\163\001" +
    "\002\000\004\024\166\001\002\000\004\007\164\001\002" +
    "\000\004\024\165\001\002\000\046\006\uffb3\030\uffb3\036" +
    "\uffb3\037\uffb3\061\uffb3\062\uffb3\072\uffb3\073\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\106\uffb3\110\uffb3\114\uffb3\122\uffb3\130" +
    "\uffb3\131\uffb3\132\uffb3\001\002\000\046\006\uffb2\030\uffb2" +
    "\036\uffb2\037\uffb2\061\uffb2\062\uffb2\072\uffb2\073\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\106\uffb2\110\uffb2\114\uffb2\122\uffb2" +
    "\130\uffb2\131\uffb2\132\uffb2\001\002\000\014\006\uffa4\036" +
    "\uffa4\037\uffa4\061\uffa4\062\uffa4\001\002\000\014\006\uffa6" +
    "\036\uffa6\037\uffa6\061\uffa6\062\uffa6\001\002\000\014\006" +
    "\uffa2\036\uffa2\037\uffa2\061\uffa2\062\uffa2\001\002\000\014" +
    "\006\uffa3\036\uffa3\037\uffa3\061\uffa3\062\uffa3\001\002\000" +
    "\014\006\uffa8\036\uffa8\037\uffa8\061\uffa8\062\uffa8\001\002" +
    "\000\014\006\uffa5\036\uffa5\037\uffa5\061\uffa5\062\uffa5\001" +
    "\002\000\014\006\060\036\062\037\054\061\074\062\121" +
    "\001\002\000\014\006\uffa7\036\uffa7\037\uffa7\061\uffa7\062" +
    "\uffa7\001\002\000\026\004\123\005\126\007\uffd3\010\124" +
    "\011\125\012\122\013\uffd3\024\uffd3\034\uffd3\035\uffd3\001" +
    "\002\000\004\062\201\001\002\000\004\007\202\001\002" +
    "\000\004\027\203\001\002\000\044\006\060\036\062\037" +
    "\054\061\074\062\110\072\075\073\211\076\061\077\103" +
    "\100\107\106\063\110\067\114\071\122\077\130\102\131" +
    "\101\132\064\001\002\000\006\030\uffbc\073\uffbc\001\002" +
    "\000\006\030\uffbf\073\uffbf\001\002\000\006\030\uffc0\073" +
    "\uffc0\001\002\000\046\006\060\030\uffe8\036\062\037\054" +
    "\061\074\062\110\072\075\073\uffe8\076\061\077\103\100" +
    "\107\106\063\110\067\114\071\122\077\130\102\131\101" +
    "\132\064\001\002\000\006\030\226\073\211\001\002\000" +
    "\022\061\215\062\220\063\216\064\221\065\217\066\222" +
    "\067\213\070\214\001\002\000\004\023\223\001\002\000" +
    "\004\023\uffb5\001\002\000\004\023\uffb4\001\002\000\004" +
    "\023\uffbb\001\002\000\004\023\uffb8\001\002\000\004\023" +
    "\uffb7\001\002\000\004\023\uffba\001\002\000\004\023\uffb9" +
    "\001\002\000\004\023\uffb6\001\002\000\042\006\060\036" +
    "\062\037\054\061\074\062\110\072\075\076\061\077\103" +
    "\100\107\106\063\110\067\114\071\122\077\130\102\131" +
    "\101\132\064\001\002\000\046\006\060\030\uffbe\036\062" +
    "\037\054\061\074\062\110\072\075\073\uffbe\076\061\077" +
    "\103\100\107\106\063\110\067\114\071\122\077\130\102" +
    "\131\101\132\064\001\002\000\006\030\uffc1\073\uffc1\001" +
    "\002\000\046\006\uffc2\030\uffc2\036\uffc2\037\uffc2\061\uffc2" +
    "\062\uffc2\072\uffc2\073\uffc2\076\uffc2\077\uffc2\100\uffc2\106" +
    "\uffc2\110\uffc2\114\uffc2\122\uffc2\130\uffc2\131\uffc2\132\uffc2" +
    "\001\002\000\046\006\060\030\uffbd\036\062\037\054\061" +
    "\074\062\110\072\075\073\uffbd\076\061\077\103\100\107" +
    "\106\063\110\067\114\071\122\077\130\102\131\101\132" +
    "\064\001\002\000\046\006\uffe5\030\uffe5\036\uffe5\037\uffe5" +
    "\061\uffe5\062\uffe5\072\uffe5\073\uffe5\076\uffe5\077\uffe5\100" +
    "\uffe5\106\uffe5\110\uffe5\114\uffe5\122\uffe5\130\uffe5\131\uffe5" +
    "\132\uffe5\001\002\000\044\006\060\030\233\036\062\037" +
    "\054\061\074\062\110\072\075\076\061\077\103\100\107" +
    "\106\063\110\067\114\071\122\077\130\102\131\101\132" +
    "\064\001\002\000\056\006\ufffd\036\ufffd\037\ufffd\061\ufffd" +
    "\062\ufffd\072\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100" +
    "\ufffd\106\ufffd\110\ufffd\111\ufffd\112\ufffd\114\ufffd\115\ufffd" +
    "\122\ufffd\126\ufffd\130\ufffd\131\ufffd\132\ufffd\001\002\000" +
    "\016\002\ufff7\074\ufff7\111\ufff7\112\ufff7\115\ufff7\126\ufff7" +
    "\001\002\000\004\024\240\001\002\000\046\006\uffe0\030" +
    "\uffe0\036\uffe0\037\uffe0\061\uffe0\062\uffe0\072\uffe0\073\uffe0" +
    "\076\uffe0\077\uffe0\100\uffe0\106\uffe0\110\uffe0\114\uffe0\122" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\004\024\237" +
    "\001\002\000\046\006\uffe1\030\uffe1\036\uffe1\037\uffe1\061" +
    "\uffe1\062\uffe1\072\uffe1\073\uffe1\076\uffe1\077\uffe1\100\uffe1" +
    "\106\uffe1\110\uffe1\114\uffe1\122\uffe1\130\uffe1\131\uffe1\132" +
    "\uffe1\001\002\000\046\006\uffe2\030\uffe2\036\uffe2\037\uffe2" +
    "\061\uffe2\062\uffe2\072\uffe2\073\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\106\uffe2\110\uffe2\114\uffe2\122\uffe2\130\uffe2\131\uffe2" +
    "\132\uffe2\001\002\000\006\021\243\024\242\001\002\000" +
    "\056\006\uffdf\036\uffdf\037\uffdf\061\uffdf\062\uffdf\072\uffdf" +
    "\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\106\uffdf\110" +
    "\uffdf\111\uffdf\112\uffdf\114\uffdf\115\uffdf\122\uffdf\126\uffdf" +
    "\130\uffdf\131\uffdf\132\uffdf\001\002\000\022\061\027\062" +
    "\245\063\030\064\033\065\031\066\034\067\024\070\026" +
    "\001\002\000\004\024\247\001\002\000\004\024\246\001" +
    "\002\000\056\006\uffdd\036\uffdd\037\uffdd\061\uffdd\062\uffdd" +
    "\072\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\106" +
    "\uffdd\110\uffdd\111\uffdd\112\uffdd\114\uffdd\115\uffdd\122\uffdd" +
    "\126\uffdd\130\uffdd\131\uffdd\132\uffdd\001\002\000\056\006" +
    "\uffde\036\uffde\037\uffde\061\uffde\062\uffde\072\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\100\uffde\106\uffde\110\uffde\111" +
    "\uffde\112\uffde\114\uffde\115\uffde\122\uffde\126\uffde\130\uffde" +
    "\131\uffde\132\uffde\001\002\000\014\006\060\036\062\037" +
    "\054\061\074\062\110\001\002\000\004\007\252\001\002" +
    "\000\004\027\253\001\002\000\042\006\060\036\062\037" +
    "\054\061\074\062\110\072\075\076\061\077\103\100\107" +
    "\106\063\110\067\114\071\122\077\130\102\131\101\132" +
    "\064\001\002\000\044\006\060\030\255\036\062\037\054" +
    "\061\074\062\110\072\075\076\061\077\103\100\107\106" +
    "\063\110\067\114\071\122\077\130\102\131\101\132\064" +
    "\001\002\000\050\006\uffd7\030\uffd7\036\uffd7\037\uffd7\061" +
    "\uffd7\062\uffd7\072\uffd7\073\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\102\256\106\uffd7\110\uffd7\114\uffd7\122\uffd7\130\uffd7\131" +
    "\uffd7\132\uffd7\001\002\000\004\027\257\001\002\000\042" +
    "\006\060\036\062\037\054\061\074\062\110\072\075\076" +
    "\061\077\103\100\107\106\063\110\067\114\071\122\077" +
    "\130\102\131\101\132\064\001\002\000\044\006\060\030" +
    "\261\036\062\037\054\061\074\062\110\072\075\076\061" +
    "\077\103\100\107\106\063\110\067\114\071\122\077\130" +
    "\102\131\101\132\064\001\002\000\046\006\uffd1\030\uffd1" +
    "\036\uffd1\037\uffd1\061\uffd1\062\uffd1\072\uffd1\073\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\106\uffd1\110\uffd1\114\uffd1\122\uffd1" +
    "\130\uffd1\131\uffd1\132\uffd1\001\002\000\004\062\263\001" +
    "\002\000\004\007\264\001\002\000\004\024\265\001\002" +
    "\000\046\006\uffb1\030\uffb1\036\uffb1\037\uffb1\061\uffb1\062" +
    "\uffb1\072\uffb1\073\uffb1\076\uffb1\077\uffb1\100\uffb1\106\uffb1" +
    "\110\uffb1\114\uffb1\122\uffb1\130\uffb1\131\uffb1\132\uffb1\001" +
    "\002\000\014\062\271\074\016\111\005\112\006\115\015" +
    "\001\002\000\004\007\330\001\002\000\004\062\321\001" +
    "\002\000\004\021\272\001\002\000\004\061\273\001\002" +
    "\000\004\024\274\001\002\000\014\006\060\036\062\037" +
    "\054\061\074\062\110\001\002\000\004\024\276\001\002" +
    "\000\010\036\277\037\302\062\301\001\002\000\004\062" +
    "\320\001\002\000\004\007\uffcc\001\002\000\020\036\307" +
    "\037\311\040\306\041\304\042\310\043\305\044\312\001" +
    "\002\000\004\062\303\001\002\000\004\007\uffc3\001\002" +
    "\000\004\061\317\001\002\000\004\061\316\001\002\000" +
    "\004\061\315\001\002\000\004\007\uffc6\001\002\000\004" +
    "\061\314\001\002\000\004\007\uffc5\001\002\000\004\061" +
    "\313\001\002\000\004\007\uffc7\001\002\000\004\007\uffc9" +
    "\001\002\000\004\007\uffcb\001\002\000\004\007\uffc8\001" +
    "\002\000\004\007\uffca\001\002\000\004\007\uffc4\001\002" +
    "\000\004\021\322\001\002\000\004\061\323\001\002\000" +
    "\004\024\324\001\002\000\014\006\060\036\062\037\054" +
    "\061\074\062\110\001\002\000\004\024\326\001\002\000" +
    "\010\036\277\037\302\062\301\001\002\000\004\007\uffcd" +
    "\001\002\000\004\027\331\001\002\000\042\006\060\036" +
    "\062\037\054\061\074\062\110\072\075\076\061\077\103" +
    "\100\107\106\063\110\067\114\071\122\077\130\102\131" +
    "\101\132\064\001\002\000\044\006\060\030\333\036\062" +
    "\037\054\061\074\062\110\072\075\076\061\077\103\100" +
    "\107\106\063\110\067\114\071\122\077\130\102\131\101" +
    "\132\064\001\002\000\046\006\uffce\030\uffce\036\uffce\037" +
    "\uffce\061\uffce\062\uffce\072\uffce\073\uffce\076\uffce\077\uffce" +
    "\100\uffce\106\uffce\110\uffce\114\uffce\122\uffce\130\uffce\131" +
    "\uffce\132\uffce\001\002\000\056\004\uff74\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\017\uff74\020" +
    "\uff74\023\uff74\024\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\054\uff74\055\uff74\056\uff74\057\uff74\061\uff74\062\uff74\001" +
    "\002\000\046\006\uffe4\030\uffe4\036\uffe4\037\uffe4\061\uffe4" +
    "\062\uffe4\072\uffe4\073\uffe4\076\uffe4\077\uffe4\100\uffe4\106" +
    "\uffe4\110\uffe4\114\uffe4\122\uffe4\130\uffe4\131\uffe4\132\uffe4" +
    "\001\002\000\016\004\123\005\126\007\337\010\124\011" +
    "\125\012\122\001\002\000\056\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78\017\uff78\020" +
    "\uff78\023\uff78\024\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\054\uff78\055\uff78\056\uff78\057\uff78\061\uff78\062\uff78\001" +
    "\002\000\016\002\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3" +
    "\126\ufff3\001\002\000\056\004\uff73\005\uff73\006\uff73\007" +
    "\uff73\010\uff73\011\uff73\012\uff73\013\uff73\017\uff73\020\uff73" +
    "\023\uff73\024\uff73\034\uff73\035\uff73\036\uff73\037\uff73\054" +
    "\uff73\055\uff73\056\uff73\057\uff73\061\uff73\062\uff73\001\002" +
    "\000\014\006\uffa0\036\uffa0\037\uffa0\061\uffa0\062\uffa0\001" +
    "\002\000\014\006\060\036\062\037\054\061\074\062\121" +
    "\001\002\000\014\006\uff9f\036\uff9f\037\uff9f\061\uff9f\062" +
    "\uff9f\001\002\000\014\006\uff9e\036\uff9e\037\uff9e\061\uff9e" +
    "\062\uff9e\001\002\000\044\004\123\005\126\006\uffa1\010" +
    "\124\011\125\012\122\017\170\020\174\023\171\036\uffa1" +
    "\037\uffa1\054\176\055\173\056\167\057\172\061\uffa1\062" +
    "\uffa1\001\002\000\014\007\uffd2\013\345\024\uffd2\034\344" +
    "\035\342\001\002\000\004\062\351\001\002\000\006\007" +
    "\ufff1\015\ufff1\001\002\000\054\006\060\036\062\037\054" +
    "\061\074\062\110\072\075\074\016\075\017\076\061\077" +
    "\103\100\107\106\063\110\067\111\005\112\006\114\071" +
    "\115\015\122\077\130\102\131\101\132\064\001\002\000" +
    "\044\006\060\030\357\036\062\037\054\061\074\062\110" +
    "\072\075\076\061\077\103\100\107\106\063\110\067\114" +
    "\071\122\077\130\102\131\101\132\064\001\002\000\054" +
    "\006\060\036\062\037\054\061\074\062\110\072\075\074" +
    "\016\075\017\076\061\077\103\100\107\106\063\110\067" +
    "\111\005\112\006\114\071\115\015\122\077\130\102\131" +
    "\101\132\064\001\002\000\044\006\060\030\356\036\062" +
    "\037\054\061\074\062\110\072\075\076\061\077\103\100" +
    "\107\106\063\110\067\114\071\122\077\130\102\131\101" +
    "\132\064\001\002\000\016\002\ufff8\074\ufff8\111\ufff8\112" +
    "\ufff8\115\ufff8\126\ufff8\001\002\000\016\002\ufff4\074\ufff4" +
    "\111\ufff4\112\ufff4\115\ufff4\126\ufff4\001\002\000\006\007" +
    "\ufff2\015\ufff2\001\002\000\004\002\001\001\002\000\010" +
    "\006\363\021\243\024\242\001\002\000\014\007\364\074" +
    "\016\111\005\112\006\115\015\001\002\000\004\027\375" +
    "\001\002\000\006\007\366\015\045\001\002\000\004\027" +
    "\367\001\002\000\054\006\060\036\062\037\054\061\074" +
    "\062\110\072\075\074\016\075\017\076\061\077\103\100" +
    "\107\106\063\110\067\111\005\112\006\114\071\115\015" +
    "\122\077\130\102\131\101\132\064\001\002\000\044\006" +
    "\060\030\374\036\062\037\054\061\074\062\110\072\075" +
    "\076\061\077\103\100\107\106\063\110\067\114\071\122" +
    "\077\130\102\131\101\132\064\001\002\000\054\006\060" +
    "\036\062\037\054\061\074\062\110\072\075\074\016\075" +
    "\017\076\061\077\103\100\107\106\063\110\067\111\005" +
    "\112\006\114\071\115\015\122\077\130\102\131\101\132" +
    "\064\001\002\000\044\006\060\030\373\036\062\037\054" +
    "\061\074\062\110\072\075\076\061\077\103\100\107\106" +
    "\063\110\067\114\071\122\077\130\102\131\101\132\064" +
    "\001\002\000\016\002\ufffa\074\ufffa\111\ufffa\112\ufffa\115" +
    "\ufffa\126\ufffa\001\002\000\016\002\ufff6\074\ufff6\111\ufff6" +
    "\112\ufff6\115\ufff6\126\ufff6\001\002\000\054\006\060\036" +
    "\062\037\054\061\074\062\110\072\075\074\016\075\017" +
    "\076\061\077\103\100\107\106\063\110\067\111\005\112" +
    "\006\114\071\115\015\122\077\130\102\131\101\132\064" +
    "\001\002\000\044\006\060\030\u0102\036\062\037\054\061" +
    "\074\062\110\072\075\076\061\077\103\100\107\106\063" +
    "\110\067\114\071\122\077\130\102\131\101\132\064\001" +
    "\002\000\054\006\060\036\062\037\054\061\074\062\110" +
    "\072\075\074\016\075\017\076\061\077\103\100\107\106" +
    "\063\110\067\111\005\112\006\114\071\115\015\122\077" +
    "\130\102\131\101\132\064\001\002\000\044\006\060\030" +
    "\u0101\036\062\037\054\061\074\062\110\072\075\076\061" +
    "\077\103\100\107\106\063\110\067\114\071\122\077\130" +
    "\102\131\101\132\064\001\002\000\016\002\ufff9\074\ufff9" +
    "\111\ufff9\112\ufff9\115\ufff9\126\ufff9\001\002\000\016\002" +
    "\ufff5\074\ufff5\111\ufff5\112\ufff5\115\ufff5\126\ufff5\001\002" +
    "\000\004\062\u0105\001\002\000\016\002\ufffb\074\ufffb\111" +
    "\ufffb\112\ufffb\115\ufffb\126\ufffb\001\002\000\004\006\363" +
    "\001\002\000\004\062\uffaa\001\002\000\004\062\uffab\001" +
    "\002\000\004\062\uffac\001\002\000\016\002\000\074\016" +
    "\111\005\112\006\115\015\126\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\016\002\011\004\006\015\010\025\013\030" +
    "\003\031\007\001\001\000\012\004\231\015\010\025\013" +
    "\031\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u0102\025\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\041\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\347\001\001\000\002\001\001\000\046" +
    "\003\056\004\006\006\047\007\050\010\103\011\064\012" +
    "\065\013\104\015\067\022\105\027\071\030\072\033\075" +
    "\034\051\035\077\036\052\037\055\041\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\141\006\047\007\050\010\103\011\064\012\065" +
    "\013\104\022\105\027\071\033\075\034\051\035\077\036" +
    "\052\041\054\001\001\000\002\001\001\000\006\034\051" +
    "\035\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\233\001\001\000\002\001\001\000\044\003\056\004\231" +
    "\006\047\007\050\010\103\011\064\012\065\013\104\015" +
    "\067\022\105\027\071\033\075\034\051\035\077\036\052" +
    "\037\230\041\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\051\035" +
    "\136\001\001\000\006\034\051\035\135\001\001\000\006" +
    "\034\051\035\134\001\001\000\002\001\001\000\006\034" +
    "\051\035\133\001\001\000\002\001\001\000\006\034\051" +
    "\035\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\051\035\132\001\001\000\006\034\051\035\131" +
    "\001\001\000\006\034\051\035\130\001\001\000\006\034" +
    "\051\035\127\001\001\000\006\034\051\035\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\056\006\047\007\050\010\103\011\064\012\065\013\104" +
    "\022\105\027\071\033\075\034\051\035\077\036\052\037" +
    "\140\041\054\001\001\000\036\003\141\006\047\007\050" +
    "\010\103\011\064\012\065\013\104\022\105\027\071\033" +
    "\075\034\051\035\077\036\052\041\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\145\033\075\034\051\035\077\036\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\153\033\075\034\051" +
    "\035\077\036\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\056\006\047\007\050\010\103\011\064" +
    "\012\065\013\104\022\105\027\071\033\075\034\051\035" +
    "\077\036\052\037\156\041\054\001\001\000\036\003\141" +
    "\006\047\007\050\010\103\011\064\012\065\013\104\022" +
    "\105\027\071\033\075\034\051\035\077\036\052\041\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\051\035\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\203\006\047\007\050\010" +
    "\103\011\064\012\065\013\104\022\105\027\206\033\075" +
    "\034\051\035\077\036\052\041\054\042\207\044\204\045" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\056\006\047\007\050\010\103\011" +
    "\064\012\065\013\104\022\105\027\071\033\075\034\051" +
    "\035\077\036\052\037\226\041\054\001\001\000\004\045" +
    "\224\001\001\000\004\043\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\056\006\047\007" +
    "\050\010\103\011\064\012\065\013\104\022\105\027\071" +
    "\033\075\034\051\035\077\036\052\037\223\041\054\001" +
    "\001\000\036\003\141\006\047\007\050\010\103\011\064" +
    "\012\065\013\104\022\105\027\071\033\075\034\051\035" +
    "\077\036\052\041\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\141\006\047\007\050\010\103\011" +
    "\064\012\065\013\104\022\105\027\071\033\075\034\051" +
    "\035\077\036\052\041\054\001\001\000\002\001\001\000" +
    "\036\003\141\006\047\007\050\010\103\011\064\012\065" +
    "\013\104\022\105\027\071\033\075\034\051\035\077\036" +
    "\052\041\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\250\033\075\034\051\035\077\036\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\056\006\047" +
    "\007\050\010\103\011\064\012\065\013\104\022\105\027" +
    "\071\033\075\034\051\035\077\036\052\037\253\041\054" +
    "\001\001\000\036\003\141\006\047\007\050\010\103\011" +
    "\064\012\065\013\104\022\105\027\071\033\075\034\051" +
    "\035\077\036\052\041\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\056\006\047\007\050\010\103" +
    "\011\064\012\065\013\104\022\105\027\071\033\075\034" +
    "\051\035\077\036\052\037\257\041\054\001\001\000\036" +
    "\003\141\006\047\007\050\010\103\011\064\012\065\013" +
    "\104\022\105\027\071\033\075\034\051\035\077\036\052" +
    "\041\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\266\015\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\274\033\075\034\051\035\077\036\052\001" +
    "\001\000\002\001\001\000\004\005\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\324\033\075\034\051\035" +
    "\077\036\052\001\001\000\002\001\001\000\004\005\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\056\006\047\007\050\010\103\011\064\012\065\013\104" +
    "\022\105\027\071\033\075\034\051\035\077\036\052\037" +
    "\331\041\054\001\001\000\036\003\141\006\047\007\050" +
    "\010\103\011\064\012\065\013\104\022\105\027\071\033" +
    "\075\034\051\035\077\036\052\041\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\051\035\345\036\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\174" +
    "\001\001\000\004\017\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\056\004\006\006\047\007\050" +
    "\010\103\011\064\012\065\013\104\015\067\022\105\027" +
    "\071\030\353\033\075\034\051\035\077\036\052\037\352" +
    "\041\054\001\001\000\036\003\141\006\047\007\050\010" +
    "\103\011\064\012\065\013\104\022\105\027\071\033\075" +
    "\034\051\035\077\036\052\041\054\001\001\000\044\003" +
    "\056\004\231\006\047\007\050\010\103\011\064\012\065" +
    "\013\104\015\067\022\105\027\071\033\075\034\051\035" +
    "\077\036\052\037\354\041\054\001\001\000\036\003\141" +
    "\006\047\007\050\010\103\011\064\012\065\013\104\022" +
    "\105\027\071\033\075\034\051\035\077\036\052\041\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\041" +
    "\026\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\056\004\006\006\047\007\050" +
    "\010\103\011\064\012\065\013\104\015\067\022\105\027" +
    "\071\030\370\033\075\034\051\035\077\036\052\037\367" +
    "\041\054\001\001\000\036\003\141\006\047\007\050\010" +
    "\103\011\064\012\065\013\104\022\105\027\071\033\075" +
    "\034\051\035\077\036\052\041\054\001\001\000\044\003" +
    "\056\004\231\006\047\007\050\010\103\011\064\012\065" +
    "\013\104\015\067\022\105\027\071\033\075\034\051\035" +
    "\077\036\052\037\371\041\054\001\001\000\036\003\141" +
    "\006\047\007\050\010\103\011\064\012\065\013\104\022" +
    "\105\027\071\033\075\034\051\035\077\036\052\041\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\056\004\006\006\047\007\050\010\103\011\064\012\065" +
    "\013\104\015\067\022\105\027\071\030\376\033\075\034" +
    "\051\035\077\036\052\037\375\041\054\001\001\000\036" +
    "\003\141\006\047\007\050\010\103\011\064\012\065\013" +
    "\104\022\105\027\071\033\075\034\051\035\077\036\052" +
    "\041\054\001\001\000\044\003\056\004\231\006\047\007" +
    "\050\010\103\011\064\012\065\013\104\015\067\022\105" +
    "\027\071\033\075\034\051\035\077\036\052\037\377\041" +
    "\054\001\001\000\036\003\141\006\047\007\050\010\103" +
    "\011\064\012\065\013\104\022\105\027\071\033\075\034" +
    "\051\035\077\036\052\041\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u0102\025\u0103\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTROL_STATEMENT ::= DEFAULT COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_DATO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_DATO IDENTIFIER ASSIGN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_DATO IDENTIFIER ASSIGN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= CONST T_DATO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= CONST T_DATO IDENTIFIER ASSIGN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= CONST T_DATO IDENTIFIER ASSIGN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_LIST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_LIST ::= ID_LIST COMMA DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES ::= EXPRESIONES_RELACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES_RELACIONES ::= EXPRESION_ARITMETICA OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONES_RELACIONES ::= EXPRESIONES_RELACIONES OP_LOGICOS EXPRESIONES_RELACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_ELSE ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= T_DATO IDENTIFIER ASSIGN NUMBER SEMICOLON EXPRESIONES SEMICOLON DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= IDENTIFIER ASSIGN NUMBER SEMICOLON EXPRESIONES SEMICOLON DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= IDENTIFIER PLUS_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= IDENTIFIER MINUS_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= IDENTIFIER TIMES_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= IDENTIFIER DIV_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= IDENTIFIER MOD_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_FOR ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_FOR ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_FOR ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCHs ::= SWITCH LPAREN IDENTIFIER RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASES ::= CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASES ::= DEFAULT_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASE_STMT ::= CASE CONSTANTE COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DEFAULT_STMT ::= CONTROL_STATEMENT SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEFAULT_STMT ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONSTANTE ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONSTANTE ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONSTANTE ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONSTANTE ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONSTANTE ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONSTANTE ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONSTANTE ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONSTANTE ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // READ_WRITE ::= WRITE LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_RELACIONALES ::= COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_RELACIONALES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_BIT ::= BIT_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP_BIT ::= BIT_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP_BIT ::= BIT_XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP_BIT ::= BIT_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP_BIT ::= LSHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_BIT ::= RSHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_BIT ::= LSHIFT_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_BIT ::= RSHIFT_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_BIT ::= BIT_AND_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_BIT ::= BIT_OR_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_BIT ::= BIT_XOR_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_BIT ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LITERALES ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERALES ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION_ARITMETICA ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION_ARITMETICA ::= LPAREN EXPRESION_ARITMETICA RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
