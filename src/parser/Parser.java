
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java.util.ArrayList;
import semantic.SymbolTable;
import semantic.Translator.PilaS;
import semantic.Translator.RS;
import semantic.LabelGenerator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\002\003" +
    "\000\002\002\004\000\002\027\003\000\002\027\004\000" +
    "\002\030\003\000\002\030\004\000\002\061\002\000\002" +
    "\024\011\000\002\062\002\000\002\024\010\000\002\063" +
    "\002\000\002\024\010\000\002\064\002\000\002\024\011" +
    "\000\002\024\003\000\002\052\006\000\002\052\005\000" +
    "\002\052\006\000\002\053\006\000\002\053\006\000\002" +
    "\053\006\000\002\053\006\000\002\053\006\000\002\053" +
    "\007\000\002\053\006\000\002\025\004\000\002\025\006" +
    "\000\002\025\004\000\002\025\003\000\002\025\005\000" +
    "\002\025\005\000\002\035\004\000\002\035\002\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\004\000\002\026" +
    "\004\000\002\004\005\000\002\004\006\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\023\003\000\002\023\005\000\002" +
    "\023\007\000\002\023\005\000\002\006\012\000\002\006" +
    "\011\000\002\006\003\000\002\050\012\000\002\050\011" +
    "\000\002\050\011\000\002\050\010\000\002\050\011\000" +
    "\002\050\010\000\002\050\010\000\002\050\007\000\002" +
    "\050\010\000\002\050\007\000\002\050\012\000\002\050" +
    "\011\000\002\012\003\000\002\012\003\000\002\036\005" +
    "\000\002\036\003\000\002\034\005\000\002\034\003\000" +
    "\002\007\013\000\002\007\012\000\002\007\006\000\002" +
    "\007\007\000\002\007\006\000\002\007\004\000\002\010" +
    "\007\000\002\054\003\000\002\054\003\000\002\055\003" +
    "\000\002\055\003\000\002\056\005\000\002\057\003\000" +
    "\002\057\002\000\002\060\003\000\002\040\013\000\002" +
    "\040\013\000\002\040\012\000\002\040\012\000\002\040" +
    "\011\000\002\040\011\000\002\040\012\000\002\040\013" +
    "\000\002\040\012\000\002\040\012\000\002\040\012\000" +
    "\002\011\011\000\002\011\011\000\002\011\010\000\002" +
    "\011\010\000\002\011\007\000\002\011\007\000\002\011" +
    "\011\000\002\013\006\000\002\013\007\000\002\013\004" +
    "\000\002\005\002\000\002\005\003\000\002\005\003\000" +
    "\002\041\013\000\002\041\011\000\002\041\012\000\002" +
    "\041\011\000\002\041\012\000\002\041\011\000\002\041" +
    "\010\000\002\041\010\000\002\041\015\000\002\042\004" +
    "\000\002\042\002\000\002\044\006\000\002\044\010\000" +
    "\002\044\006\000\002\044\010\000\002\044\007\000\002" +
    "\044\005\000\002\043\005\000\002\043\007\000\002\043" +
    "\006\000\002\043\006\000\002\043\005\000\002\043\007" +
    "\000\002\051\004\000\002\051\003\000\002\021\007\000" +
    "\002\021\006\000\002\021\007\000\002\021\007\000\002" +
    "\021\007\000\002\021\005\000\002\021\006\000\002\021" +
    "\006\000\002\021\007\000\002\021\007\000\002\021\006" +
    "\000\002\021\005\000\002\021\006\000\002\021\007\000" +
    "\002\021\004\000\002\021\004\000\002\047\003\000\002" +
    "\047\005\000\002\047\005\000\002\047\004\000\002\047" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\037\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\004\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\006\000\002\033\005\000\002\033\003\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\003\000\002\046\006" +
    "\000\002\046\005\000\002\046\003\000\002\046\003\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0219\000\024\002\ufffd\003\015\062\016\074\022\075" +
    "\021\111\005\112\006\115\020\126\013\001\002\000\024" +
    "\002\ufffe\003\u021b\062\016\074\022\075\021\111\005\112" +
    "\006\115\020\126\013\001\002\000\020\003\uff55\007\uff55" +
    "\015\uff55\024\uff55\062\uff55\112\u0219\115\u0218\001\002\000" +
    "\016\003\uff53\007\uff53\015\uff53\024\uff53\062\uff53\111\u0217" +
    "\001\002\000\114\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\010\ufffa\011\ufffa\021\ufffa\030\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\061\ufffa\062\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\072\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\100\ufffa\106\ufffa\110\ufffa\111\ufffa\112\ufffa\114" +
    "\ufffa\115\ufffa\122\ufffa\126\ufffa\130\ufffa\131\ufffa\132\ufffa" +
    "\001\002\000\020\002\uffff\062\016\074\022\111\005\112" +
    "\006\115\020\126\u0213\001\002\000\010\003\172\024\171" +
    "\062\u0204\001\002\000\004\002\u0203\001\002\000\004\062" +
    "\u01f6\001\002\000\020\002\uffee\062\uffee\074\uffee\111\uffee" +
    "\112\uffee\115\uffee\126\uffee\001\002\000\006\002\ufffc\062" +
    "\025\001\002\000\004\006\146\001\002\000\020\002\ufff8" +
    "\062\ufff8\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126\ufff8\001" +
    "\002\000\016\003\uff52\007\uff52\015\uff52\024\uff52\062\uff52" +
    "\111\145\001\002\000\012\074\022\111\005\112\006\115" +
    "\020\001\002\000\014\003\uff54\007\uff54\015\uff54\024\uff54" +
    "\062\uff54\001\002\000\006\024\024\062\025\001\002\000" +
    "\116\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4" +
    "\011\uffc4\021\uffc4\024\uffc4\030\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\061\uffc4\062\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\072\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\100\uffc4\106\uffc4\110\uffc4\111\uffc4\112\uffc4\114\uffc4" +
    "\115\uffc4\122\uffc4\126\uffc4\130\uffc4\131\uffc4\132\uffc4\001" +
    "\002\000\010\015\uffc3\021\143\024\uffc3\001\002\000\006" +
    "\015\027\024\030\001\002\000\004\062\031\001\002\000" +
    "\116\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9" +
    "\011\uffc9\021\uffc9\024\uffc9\030\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\061\uffc9\062\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\067\uffc9\072\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\100\uffc9\106\uffc9\110\uffc9\111\uffc9\112\uffc9\114\uffc9" +
    "\115\uffc9\122\uffc9\126\uffc9\130\uffc9\131\uffc9\132\uffc9\001" +
    "\002\000\010\015\uffc2\021\032\024\uffc2\001\002\000\034" +
    "\004\037\005\034\006\042\010\050\011\045\036\046\037" +
    "\054\061\044\062\041\064\047\065\035\066\033\067\040" +
    "\001\002\000\140\003\uff36\004\uff36\005\uff36\006\uff36\007" +
    "\uff36\010\uff36\011\uff36\012\uff36\013\uff36\015\uff36\017\uff36" +
    "\020\uff36\021\uff36\023\uff36\024\uff36\027\uff36\030\uff36\034" +
    "\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041\uff36\042\uff36" +
    "\043\uff36\054\uff36\055\uff36\056\uff36\057\uff36\061\uff36\062" +
    "\uff36\064\uff36\065\uff36\066\uff36\067\uff36\072\uff36\073\uff36" +
    "\076\uff36\077\uff36\100\uff36\106\uff36\110\uff36\114\uff36\122" +
    "\uff36\130\uff36\131\uff36\132\uff36\001\002\000\034\004\037" +
    "\005\034\006\042\010\050\011\045\036\046\037\054\061" +
    "\044\062\041\064\047\065\035\066\033\067\040\001\002" +
    "\000\140\003\uff37\004\uff37\005\uff37\006\uff37\007\uff37\010" +
    "\uff37\011\uff37\012\uff37\013\uff37\015\uff37\017\uff37\020\uff37" +
    "\021\uff37\023\uff37\024\uff37\027\uff37\030\uff37\034\uff37\035" +
    "\uff37\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37" +
    "\054\uff37\055\uff37\056\uff37\057\uff37\061\uff37\062\uff37\064" +
    "\uff37\065\uff37\066\uff37\067\uff37\072\uff37\073\uff37\076\uff37" +
    "\077\uff37\100\uff37\106\uff37\110\uff37\114\uff37\122\uff37\130" +
    "\uff37\131\uff37\132\uff37\001\002\000\136\003\uff25\004\uff25" +
    "\005\uff25\006\uff25\007\uff25\010\uff25\011\uff25\012\uff25\013" +
    "\uff25\015\uff25\017\uff25\020\uff25\021\uff25\024\uff25\027\uff25" +
    "\030\uff25\034\uff25\035\uff25\036\uff25\037\uff25\040\uff25\041" +
    "\uff25\042\uff25\043\uff25\054\uff25\055\uff25\056\uff25\057\uff25" +
    "\061\uff25\062\uff25\064\uff25\065\uff25\066\uff25\067\uff25\072" +
    "\uff25\073\uff25\076\uff25\077\uff25\100\uff25\106\uff25\110\uff25" +
    "\114\uff25\122\uff25\130\uff25\131\uff25\132\uff25\001\002\000" +
    "\034\004\037\005\034\006\042\010\050\011\045\036\046" +
    "\037\054\061\044\062\041\064\047\065\035\066\033\067" +
    "\040\001\002\000\140\003\uff35\004\uff35\005\uff35\006\uff35" +
    "\007\uff35\010\uff35\011\uff35\012\uff35\013\uff35\015\uff35\017" +
    "\uff35\020\uff35\021\uff35\023\uff35\024\uff35\027\uff35\030\uff35" +
    "\034\uff35\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35\042" +
    "\uff35\043\uff35\054\uff35\055\uff35\056\uff35\057\uff35\061\uff35" +
    "\062\uff35\064\uff35\065\uff35\066\uff35\067\uff35\072\uff35\073" +
    "\uff35\076\uff35\077\uff35\100\uff35\106\uff35\110\uff35\114\uff35" +
    "\122\uff35\130\uff35\131\uff35\132\uff35\001\002\000\136\003" +
    "\uff29\004\uff29\005\uff29\006\125\007\uff29\010\uff29\011\uff29" +
    "\012\uff29\013\uff29\015\uff29\017\uff29\020\uff29\021\uff29\024" +
    "\uff29\027\uff29\030\uff29\034\uff29\035\uff29\036\123\037\124" +
    "\040\uff29\041\uff29\042\uff29\043\uff29\054\uff29\055\uff29\056" +
    "\uff29\057\uff29\061\uff29\062\uff29\064\uff29\065\uff29\066\uff29" +
    "\067\uff29\072\uff29\073\uff29\076\uff29\077\uff29\100\uff29\106" +
    "\uff29\110\uff29\114\uff29\122\uff29\130\uff29\131\uff29\132\uff29" +
    "\001\002\000\036\003\117\004\037\005\034\006\042\010" +
    "\050\011\045\036\046\037\054\061\044\062\041\064\047" +
    "\065\035\066\033\067\040\001\002\000\134\003\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\uffad" +
    "\015\uffad\017\064\020\070\021\uffad\024\uffad\027\uffad\030" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\054\067\055\065\056\066\057\071\061" +
    "\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad\072\uffad" +
    "\073\uffad\076\uffad\077\uffad\100\uffad\106\uffad\110\uffad\114" +
    "\uffad\122\uffad\130\uffad\131\uffad\132\uffad\001\002\000\140" +
    "\003\uff39\004\uff39\005\uff39\006\uff39\007\uff39\010\uff39\011" +
    "\uff39\012\uff39\013\uff39\015\uff39\017\uff39\020\uff39\021\uff39" +
    "\023\uff39\024\uff39\027\uff39\030\uff39\034\uff39\035\uff39\036" +
    "\uff39\037\uff39\040\uff39\041\uff39\042\uff39\043\uff39\054\uff39" +
    "\055\uff39\056\uff39\057\uff39\061\uff39\062\uff39\064\uff39\065" +
    "\uff39\066\uff39\067\uff39\072\uff39\073\uff39\076\uff39\077\uff39" +
    "\100\uff39\106\uff39\110\uff39\114\uff39\122\uff39\130\uff39\131" +
    "\uff39\132\uff39\001\002\000\034\004\037\005\034\006\042" +
    "\010\050\011\045\036\046\037\054\061\044\062\041\064" +
    "\047\065\035\066\033\067\040\001\002\000\006\003\114" +
    "\062\115\001\002\000\140\003\uff38\004\uff38\005\uff38\006" +
    "\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013\uff38\015\uff38" +
    "\017\uff38\020\uff38\021\uff38\023\uff38\024\uff38\027\uff38\030" +
    "\uff38\034\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38" +
    "\042\uff38\043\uff38\054\uff38\055\uff38\056\uff38\057\uff38\061" +
    "\uff38\062\uff38\064\uff38\065\uff38\066\uff38\067\uff38\072\uff38" +
    "\073\uff38\076\uff38\077\uff38\100\uff38\106\uff38\110\uff38\114" +
    "\uff38\122\uff38\130\uff38\131\uff38\132\uff38\001\002\000\034" +
    "\004\037\005\034\006\042\010\050\011\045\036\046\037" +
    "\054\061\044\062\041\064\047\065\035\066\033\067\040" +
    "\001\002\000\136\003\uffab\004\075\005\100\006\uffab\007" +
    "\uffab\010\076\011\077\012\074\013\uffab\015\uffab\017\uffab" +
    "\020\uffab\021\uffab\024\uffab\027\uffab\030\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\061\uffab\062\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\072\uffab\073\uffab\076\uffab" +
    "\077\uffab\100\uffab\106\uffab\110\uffab\114\uffab\122\uffab\130" +
    "\uffab\131\uffab\132\uffab\001\002\000\014\013\062\015\uffc1" +
    "\024\uffc1\034\061\035\057\001\002\000\136\003\uff26\004" +
    "\uff26\005\uff26\006\uff26\007\uff26\010\uff26\011\uff26\012\uff26" +
    "\013\uff26\015\uff26\017\uff26\020\uff26\021\uff26\024\uff26\027" +
    "\uff26\030\uff26\034\uff26\035\uff26\036\uff26\037\uff26\040\uff26" +
    "\041\uff26\042\uff26\043\uff26\054\uff26\055\uff26\056\uff26\057" +
    "\uff26\061\uff26\062\uff26\064\uff26\065\uff26\066\uff26\067\uff26" +
    "\072\uff26\073\uff26\076\uff26\077\uff26\100\uff26\106\uff26\110" +
    "\uff26\114\uff26\122\uff26\130\uff26\131\uff26\132\uff26\001\002" +
    "\000\006\003\055\062\056\001\002\000\136\003\ufeff\004" +
    "\ufeff\005\ufeff\006\ufeff\007\ufeff\010\ufeff\011\ufeff\012\ufeff" +
    "\013\ufeff\015\ufeff\017\ufeff\020\ufeff\021\ufeff\024\ufeff\027" +
    "\ufeff\030\ufeff\034\ufeff\035\ufeff\036\ufeff\037\ufeff\040\ufeff" +
    "\041\ufeff\042\ufeff\043\ufeff\054\ufeff\055\ufeff\056\ufeff\057" +
    "\ufeff\061\ufeff\062\ufeff\064\ufeff\065\ufeff\066\ufeff\067\ufeff" +
    "\072\ufeff\073\ufeff\076\ufeff\077\ufeff\100\ufeff\106\ufeff\110" +
    "\ufeff\114\ufeff\122\ufeff\130\ufeff\131\ufeff\132\ufeff\001\002" +
    "\000\136\003\uff00\004\uff00\005\uff00\006\uff00\007\uff00\010" +
    "\uff00\011\uff00\012\uff00\013\uff00\015\uff00\017\uff00\020\uff00" +
    "\021\uff00\024\uff00\027\uff00\030\uff00\034\uff00\035\uff00\036" +
    "\uff00\037\uff00\040\uff00\041\uff00\042\uff00\043\uff00\054\uff00" +
    "\055\uff00\056\uff00\057\uff00\061\uff00\062\uff00\064\uff00\065" +
    "\uff00\066\uff00\067\uff00\072\uff00\073\uff00\076\uff00\077\uff00" +
    "\100\uff00\106\uff00\110\uff00\114\uff00\122\uff00\130\uff00\131" +
    "\uff00\132\uff00\001\002\000\034\004\uff47\005\uff47\006\uff47" +
    "\010\uff47\011\uff47\036\uff47\037\uff47\061\uff47\062\uff47\064" +
    "\uff47\065\uff47\066\uff47\067\uff47\001\002\000\034\004\037" +
    "\005\034\006\042\010\050\011\045\036\046\037\054\061" +
    "\044\062\041\064\047\065\035\066\033\067\040\001\002" +
    "\000\034\004\uff46\005\uff46\006\uff46\010\uff46\011\uff46\036" +
    "\uff46\037\uff46\061\uff46\062\uff46\064\uff46\065\uff46\066\uff46" +
    "\067\uff46\001\002\000\034\004\uff45\005\uff45\006\uff45\010" +
    "\uff45\011\uff45\036\uff45\037\uff45\061\uff45\062\uff45\064\uff45" +
    "\065\uff45\066\uff45\067\uff45\001\002\000\134\003\uffae\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\013\uffae" +
    "\015\uffae\017\064\020\070\021\uffae\024\uffae\027\uffae\030" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\054\067\055\065\056\066\057\071\061" +
    "\uffae\062\uffae\064\uffae\065\uffae\066\uffae\067\uffae\072\uffae" +
    "\073\uffae\076\uffae\077\uffae\100\uffae\106\uffae\110\uffae\114" +
    "\uffae\122\uffae\130\uffae\131\uffae\132\uffae\001\002\000\034" +
    "\004\uff4b\005\uff4b\006\uff4b\010\uff4b\011\uff4b\036\uff4b\037" +
    "\uff4b\061\uff4b\062\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b" +
    "\001\002\000\034\004\uff4d\005\uff4d\006\uff4d\010\uff4d\011" +
    "\uff4d\036\uff4d\037\uff4d\061\uff4d\062\uff4d\064\uff4d\065\uff4d" +
    "\066\uff4d\067\uff4d\001\002\000\034\004\uff49\005\uff49\006" +
    "\uff49\010\uff49\011\uff49\036\uff49\037\uff49\061\uff49\062\uff49" +
    "\064\uff49\065\uff49\066\uff49\067\uff49\001\002\000\034\004" +
    "\uff4c\005\uff4c\006\uff4c\010\uff4c\011\uff4c\036\uff4c\037\uff4c" +
    "\061\uff4c\062\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c\001" +
    "\002\000\034\004\uff4a\005\uff4a\006\uff4a\010\uff4a\011\uff4a" +
    "\036\uff4a\037\uff4a\061\uff4a\062\uff4a\064\uff4a\065\uff4a\066" +
    "\uff4a\067\uff4a\001\002\000\034\004\uff48\005\uff48\006\uff48" +
    "\010\uff48\011\uff48\036\uff48\037\uff48\061\uff48\062\uff48\064" +
    "\uff48\065\uff48\066\uff48\067\uff48\001\002\000\034\004\037" +
    "\005\034\006\042\010\050\011\045\036\046\037\054\061" +
    "\044\062\041\064\047\065\035\066\033\067\040\001\002" +
    "\000\136\003\uffac\004\075\005\100\006\uffac\007\uffac\010" +
    "\076\011\077\012\074\013\uffac\015\uffac\017\uffac\020\uffac" +
    "\021\uffac\024\uffac\027\uffac\030\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\061\uffac\062\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\072\uffac\073\uffac\076\uffac\077\uffac" +
    "\100\uffac\106\uffac\110\uffac\114\uffac\122\uffac\130\uffac\131" +
    "\uffac\132\uffac\001\002\000\036\003\112\004\037\005\034" +
    "\006\042\010\050\011\045\036\046\037\054\061\044\062" +
    "\041\064\047\065\035\066\033\067\040\001\002\000\036" +
    "\003\110\004\037\005\034\006\042\010\050\011\045\036" +
    "\046\037\054\061\044\062\041\064\047\065\035\066\033" +
    "\067\040\001\002\000\036\003\106\004\037\005\034\006" +
    "\042\010\050\011\045\036\046\037\054\061\044\062\041" +
    "\064\047\065\035\066\033\067\040\001\002\000\036\003" +
    "\104\004\037\005\034\006\042\010\050\011\045\036\046" +
    "\037\054\061\044\062\041\064\047\065\035\066\033\067" +
    "\040\001\002\000\036\003\102\004\037\005\034\006\042" +
    "\010\050\011\045\036\046\037\054\061\044\062\041\064" +
    "\047\065\035\066\033\067\040\001\002\000\136\003\uff2d" +
    "\004\uff2d\005\uff2d\006\uff2d\007\uff2d\010\uff2d\011\uff2d\012" +
    "\uff2d\013\uff2d\015\uff2d\017\uff2d\020\uff2d\021\uff2d\024\uff2d" +
    "\027\uff2d\030\uff2d\034\uff2d\035\uff2d\036\uff2d\037\uff2d\040" +
    "\uff2d\041\uff2d\042\uff2d\043\uff2d\054\uff2d\055\uff2d\056\uff2d" +
    "\057\uff2d\061\uff2d\062\uff2d\064\uff2d\065\uff2d\066\uff2d\067" +
    "\uff2d\072\uff2d\073\uff2d\076\uff2d\077\uff2d\100\uff2d\106\uff2d" +
    "\110\uff2d\114\uff2d\122\uff2d\130\uff2d\131\uff2d\132\uff2d\001" +
    "\002\000\136\003\uff22\004\uff22\005\uff22\006\uff22\007\uff22" +
    "\010\uff22\011\uff22\012\uff22\013\uff22\015\uff22\017\uff22\020" +
    "\uff22\021\uff22\024\uff22\027\uff22\030\uff22\034\uff22\035\uff22" +
    "\036\uff22\037\uff22\040\uff22\041\uff22\042\uff22\043\uff22\054" +
    "\uff22\055\uff22\056\uff22\057\uff22\061\uff22\062\uff22\064\uff22" +
    "\065\uff22\066\uff22\067\uff22\072\uff22\073\uff22\076\uff22\077" +
    "\uff22\100\uff22\106\uff22\110\uff22\114\uff22\122\uff22\130\uff22" +
    "\131\uff22\132\uff22\001\002\000\136\003\uff2c\004\uff2c\005" +
    "\uff2c\006\uff2c\007\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c" +
    "\015\uff2c\017\uff2c\020\uff2c\021\uff2c\024\uff2c\027\uff2c\030" +
    "\uff2c\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c" +
    "\042\uff2c\043\uff2c\054\uff2c\055\uff2c\056\uff2c\057\uff2c\061" +
    "\uff2c\062\uff2c\064\uff2c\065\uff2c\066\uff2c\067\uff2c\072\uff2c" +
    "\073\uff2c\076\uff2c\077\uff2c\100\uff2c\106\uff2c\110\uff2c\114" +
    "\uff2c\122\uff2c\130\uff2c\131\uff2c\132\uff2c\001\002\000\136" +
    "\003\uff21\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\015\uff21\017\uff21\020\uff21\021\uff21" +
    "\024\uff21\027\uff21\030\uff21\034\uff21\035\uff21\036\uff21\037" +
    "\uff21\040\uff21\041\uff21\042\uff21\043\uff21\054\uff21\055\uff21" +
    "\056\uff21\057\uff21\061\uff21\062\uff21\064\uff21\065\uff21\066" +
    "\uff21\067\uff21\072\uff21\073\uff21\076\uff21\077\uff21\100\uff21" +
    "\106\uff21\110\uff21\114\uff21\122\uff21\130\uff21\131\uff21\132" +
    "\uff21\001\002\000\136\003\uff2e\004\uff2e\005\100\006\uff2e" +
    "\007\uff2e\010\uff2e\011\077\012\074\013\uff2e\015\uff2e\017" +
    "\uff2e\020\uff2e\021\uff2e\024\uff2e\027\uff2e\030\uff2e\034\uff2e" +
    "\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e\043" +
    "\uff2e\054\uff2e\055\uff2e\056\uff2e\057\uff2e\061\uff2e\062\uff2e" +
    "\064\uff2e\065\uff2e\066\uff2e\067\uff2e\072\uff2e\073\uff2e\076" +
    "\uff2e\077\uff2e\100\uff2e\106\uff2e\110\uff2e\114\uff2e\122\uff2e" +
    "\130\uff2e\131\uff2e\132\uff2e\001\002\000\136\003\uff23\004" +
    "\uff23\005\uff23\006\uff23\007\uff23\010\uff23\011\uff23\012\uff23" +
    "\013\uff23\015\uff23\017\uff23\020\uff23\021\uff23\024\uff23\027" +
    "\uff23\030\uff23\034\uff23\035\uff23\036\uff23\037\uff23\040\uff23" +
    "\041\uff23\042\uff23\043\uff23\054\uff23\055\uff23\056\uff23\057" +
    "\uff23\061\uff23\062\uff23\064\uff23\065\uff23\066\uff23\067\uff23" +
    "\072\uff23\073\uff23\076\uff23\077\uff23\100\uff23\106\uff23\110" +
    "\uff23\114\uff23\122\uff23\130\uff23\131\uff23\132\uff23\001\002" +
    "\000\136\003\uff2f\004\uff2f\005\100\006\uff2f\007\uff2f\010" +
    "\uff2f\011\077\012\074\013\uff2f\015\uff2f\017\uff2f\020\uff2f" +
    "\021\uff2f\024\uff2f\027\uff2f\030\uff2f\034\uff2f\035\uff2f\036" +
    "\uff2f\037\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\054\uff2f" +
    "\055\uff2f\056\uff2f\057\uff2f\061\uff2f\062\uff2f\064\uff2f\065" +
    "\uff2f\066\uff2f\067\uff2f\072\uff2f\073\uff2f\076\uff2f\077\uff2f" +
    "\100\uff2f\106\uff2f\110\uff2f\114\uff2f\122\uff2f\130\uff2f\131" +
    "\uff2f\132\uff2f\001\002\000\136\003\uff24\004\uff24\005\uff24" +
    "\006\uff24\007\uff24\010\uff24\011\uff24\012\uff24\013\uff24\015" +
    "\uff24\017\uff24\020\uff24\021\uff24\024\uff24\027\uff24\030\uff24" +
    "\034\uff24\035\uff24\036\uff24\037\uff24\040\uff24\041\uff24\042" +
    "\uff24\043\uff24\054\uff24\055\uff24\056\uff24\057\uff24\061\uff24" +
    "\062\uff24\064\uff24\065\uff24\066\uff24\067\uff24\072\uff24\073" +
    "\uff24\076\uff24\077\uff24\100\uff24\106\uff24\110\uff24\114\uff24" +
    "\122\uff24\130\uff24\131\uff24\132\uff24\001\002\000\136\003" +
    "\uff2b\004\uff2b\005\uff2b\006\uff2b\007\uff2b\010\uff2b\011\uff2b" +
    "\012\uff2b\013\uff2b\015\uff2b\017\uff2b\020\uff2b\021\uff2b\024" +
    "\uff2b\027\uff2b\030\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b" +
    "\040\uff2b\041\uff2b\042\uff2b\043\uff2b\054\uff2b\055\uff2b\056" +
    "\uff2b\057\uff2b\061\uff2b\062\uff2b\064\uff2b\065\uff2b\066\uff2b" +
    "\067\uff2b\072\uff2b\073\uff2b\076\uff2b\077\uff2b\100\uff2b\106" +
    "\uff2b\110\uff2b\114\uff2b\122\uff2b\130\uff2b\131\uff2b\132\uff2b" +
    "\001\002\000\136\003\uff20\004\uff20\005\uff20\006\uff20\007" +
    "\uff20\010\uff20\011\uff20\012\uff20\013\uff20\015\uff20\017\uff20" +
    "\020\uff20\021\uff20\024\uff20\027\uff20\030\uff20\034\uff20\035" +
    "\uff20\036\uff20\037\uff20\040\uff20\041\uff20\042\uff20\043\uff20" +
    "\054\uff20\055\uff20\056\uff20\057\uff20\061\uff20\062\uff20\064" +
    "\uff20\065\uff20\066\uff20\067\uff20\072\uff20\073\uff20\076\uff20" +
    "\077\uff20\100\uff20\106\uff20\110\uff20\114\uff20\122\uff20\130" +
    "\uff20\131\uff20\132\uff20\001\002\000\136\003\uff1b\004\uff1b" +
    "\005\100\006\uff1b\007\uff1b\010\uff1b\011\077\012\074\013" +
    "\uff1b\015\uff1b\017\uff1b\020\uff1b\021\uff1b\024\uff1b\027\uff1b" +
    "\030\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\040\uff1b\041" +
    "\uff1b\042\uff1b\043\uff1b\054\uff1b\055\uff1b\056\uff1b\057\uff1b" +
    "\061\uff1b\062\uff1b\064\uff1b\065\uff1b\066\uff1b\067\uff1b\072" +
    "\uff1b\073\uff1b\076\uff1b\077\uff1b\100\uff1b\106\uff1b\110\uff1b" +
    "\114\uff1b\122\uff1b\130\uff1b\131\uff1b\132\uff1b\001\002\000" +
    "\136\003\ufefe\004\ufefe\005\ufefe\006\ufefe\007\ufefe\010\ufefe" +
    "\011\ufefe\012\ufefe\013\ufefe\015\ufefe\017\ufefe\020\ufefe\021" +
    "\ufefe\024\ufefe\027\ufefe\030\ufefe\034\ufefe\035\ufefe\036\ufefe" +
    "\037\ufefe\040\ufefe\041\ufefe\042\ufefe\043\ufefe\054\ufefe\055" +
    "\ufefe\056\ufefe\057\ufefe\061\ufefe\062\ufefe\064\ufefe\065\ufefe" +
    "\066\ufefe\067\ufefe\072\ufefe\073\ufefe\076\ufefe\077\ufefe\100" +
    "\ufefe\106\ufefe\110\ufefe\114\ufefe\122\ufefe\130\ufefe\131\ufefe" +
    "\132\ufefe\001\002\000\136\003\uff01\004\uff01\005\uff01\006" +
    "\uff01\007\uff01\010\uff01\011\uff01\012\uff01\013\uff01\015\uff01" +
    "\017\uff01\020\uff01\021\uff01\024\uff01\027\uff01\030\uff01\034" +
    "\uff01\035\uff01\036\uff01\037\uff01\040\uff01\041\uff01\042\uff01" +
    "\043\uff01\054\uff01\055\uff01\056\uff01\057\uff01\061\uff01\062" +
    "\uff01\064\uff01\065\uff01\066\uff01\067\uff01\072\uff01\073\uff01" +
    "\076\uff01\077\uff01\100\uff01\106\uff01\110\uff01\114\uff01\122" +
    "\uff01\130\uff01\131\uff01\132\uff01\001\002\000\136\003\uff1d" +
    "\004\uff1d\005\uff1d\006\uff1d\007\uff1d\010\uff1d\011\uff1d\012" +
    "\uff1d\013\uff1d\015\uff1d\017\uff1d\020\uff1d\021\uff1d\024\uff1d" +
    "\027\uff1d\030\uff1d\034\uff1d\035\uff1d\036\uff1d\037\uff1d\040" +
    "\uff1d\041\uff1d\042\uff1d\043\uff1d\054\uff1d\055\uff1d\056\uff1d" +
    "\057\uff1d\061\uff1d\062\uff1d\064\uff1d\065\uff1d\066\uff1d\067" +
    "\uff1d\072\uff1d\073\uff1d\076\uff1d\077\uff1d\100\uff1d\106\uff1d" +
    "\110\uff1d\114\uff1d\122\uff1d\130\uff1d\131\uff1d\132\uff1d\001" +
    "\002\000\136\003\uff1a\004\uff1a\005\uff1a\006\uff1a\007\122" +
    "\010\uff1a\011\uff1a\012\uff1a\013\uff1a\015\uff1a\017\uff1a\020" +
    "\uff1a\021\uff1a\024\uff1a\027\uff1a\030\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\037\uff1a\040\uff1a\041\uff1a\042\uff1a\043\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\061\uff1a\062\uff1a\064\uff1a" +
    "\065\uff1a\066\uff1a\067\uff1a\072\uff1a\073\uff1a\076\uff1a\077" +
    "\uff1a\100\uff1a\106\uff1a\110\uff1a\114\uff1a\122\uff1a\130\uff1a" +
    "\131\uff1a\132\uff1a\001\002\000\012\007\121\013\062\034" +
    "\061\035\057\001\002\000\136\003\uff2a\004\uff2a\005\uff2a" +
    "\006\uff2a\007\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a\015" +
    "\uff2a\017\uff2a\020\uff2a\021\uff2a\024\uff2a\027\uff2a\030\uff2a" +
    "\034\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042" +
    "\uff2a\043\uff2a\054\uff2a\055\uff2a\056\uff2a\057\uff2a\061\uff2a" +
    "\062\uff2a\064\uff2a\065\uff2a\066\uff2a\067\uff2a\072\uff2a\073" +
    "\uff2a\076\uff2a\077\uff2a\100\uff2a\106\uff2a\110\uff2a\114\uff2a" +
    "\122\uff2a\130\uff2a\131\uff2a\132\uff2a\001\002\000\136\003" +
    "\uff1f\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010\uff1f\011\uff1f" +
    "\012\uff1f\013\uff1f\015\uff1f\017\uff1f\020\uff1f\021\uff1f\024" +
    "\uff1f\027\uff1f\030\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f" +
    "\040\uff1f\041\uff1f\042\uff1f\043\uff1f\054\uff1f\055\uff1f\056" +
    "\uff1f\057\uff1f\061\uff1f\062\uff1f\064\uff1f\065\uff1f\066\uff1f" +
    "\067\uff1f\072\uff1f\073\uff1f\076\uff1f\077\uff1f\100\uff1f\106" +
    "\uff1f\110\uff1f\114\uff1f\122\uff1f\130\uff1f\131\uff1f\132\uff1f" +
    "\001\002\000\136\003\uff03\004\uff03\005\uff03\006\uff03\007" +
    "\uff03\010\uff03\011\uff03\012\uff03\013\uff03\015\uff03\017\uff03" +
    "\020\uff03\021\uff03\024\uff03\027\uff03\030\uff03\034\uff03\035" +
    "\uff03\036\uff03\037\uff03\040\uff03\041\uff03\042\uff03\043\uff03" +
    "\054\uff03\055\uff03\056\uff03\057\uff03\061\uff03\062\uff03\064" +
    "\uff03\065\uff03\066\uff03\067\uff03\072\uff03\073\uff03\076\uff03" +
    "\077\uff03\100\uff03\106\uff03\110\uff03\114\uff03\122\uff03\130" +
    "\uff03\131\uff03\132\uff03\001\002\000\136\003\uff02\004\uff02" +
    "\005\uff02\006\uff02\007\uff02\010\uff02\011\uff02\012\uff02\013" +
    "\uff02\015\uff02\017\uff02\020\uff02\021\uff02\024\uff02\027\uff02" +
    "\030\uff02\034\uff02\035\uff02\036\uff02\037\uff02\040\uff02\041" +
    "\uff02\042\uff02\043\uff02\054\uff02\055\uff02\056\uff02\057\uff02" +
    "\061\uff02\062\uff02\064\uff02\065\uff02\066\uff02\067\uff02\072" +
    "\uff02\073\uff02\076\uff02\077\uff02\100\uff02\106\uff02\110\uff02" +
    "\114\uff02\122\uff02\130\uff02\131\uff02\132\uff02\001\002\000" +
    "\040\004\037\005\034\006\042\007\127\010\050\011\045" +
    "\015\130\036\046\037\054\061\044\062\041\064\047\065" +
    "\035\066\033\067\040\001\002\000\010\003\135\007\134" +
    "\015\133\001\002\000\136\003\uff27\004\uff27\005\uff27\006" +
    "\uff27\007\uff27\010\uff27\011\uff27\012\uff27\013\uff27\015\uff27" +
    "\017\uff27\020\uff27\021\uff27\024\uff27\027\uff27\030\uff27\034" +
    "\uff27\035\uff27\036\uff27\037\uff27\040\uff27\041\uff27\042\uff27" +
    "\043\uff27\054\uff27\055\uff27\056\uff27\057\uff27\061\uff27\062" +
    "\uff27\064\uff27\065\uff27\066\uff27\067\uff27\072\uff27\073\uff27" +
    "\076\uff27\077\uff27\100\uff27\106\uff27\110\uff27\114\uff27\122" +
    "\uff27\130\uff27\131\uff27\132\uff27\001\002\000\034\004\037" +
    "\005\034\006\042\010\050\011\045\036\046\037\054\061" +
    "\044\062\041\064\047\065\035\066\033\067\040\001\002" +
    "\000\016\003\uff34\007\uff34\013\062\015\uff34\034\061\035" +
    "\057\001\002\000\016\003\uff30\007\uff30\013\062\015\uff30" +
    "\034\061\035\057\001\002\000\036\003\137\004\037\005" +
    "\034\006\042\010\050\011\045\036\046\037\054\061\044" +
    "\062\041\064\047\065\035\066\033\067\040\001\002\000" +
    "\136\003\uff28\004\uff28\005\uff28\006\uff28\007\uff28\010\uff28" +
    "\011\uff28\012\uff28\013\uff28\015\uff28\017\uff28\020\uff28\021" +
    "\uff28\024\uff28\027\uff28\030\uff28\034\uff28\035\uff28\036\uff28" +
    "\037\uff28\040\uff28\041\uff28\042\uff28\043\uff28\054\uff28\055" +
    "\uff28\056\uff28\057\uff28\061\uff28\062\uff28\064\uff28\065\uff28" +
    "\066\uff28\067\uff28\072\uff28\073\uff28\076\uff28\077\uff28\100" +
    "\uff28\106\uff28\110\uff28\114\uff28\122\uff28\130\uff28\131\uff28" +
    "\132\uff28\001\002\000\034\004\037\005\034\006\042\010" +
    "\050\011\045\036\046\037\054\061\044\062\041\064\047" +
    "\065\035\066\033\067\040\001\002\000\016\003\uff32\007" +
    "\uff32\013\062\015\uff32\034\061\035\057\001\002\000\010" +
    "\003\uff31\007\uff31\015\uff31\001\002\000\016\003\uff33\007" +
    "\uff33\013\062\015\uff33\034\061\035\057\001\002\000\136" +
    "\003\uff1c\004\uff1c\005\100\006\uff1c\007\uff1c\010\uff1c\011" +
    "\077\012\074\013\uff1c\015\uff1c\017\uff1c\020\uff1c\021\uff1c" +
    "\024\uff1c\027\uff1c\030\uff1c\034\uff1c\035\uff1c\036\uff1c\037" +
    "\uff1c\040\uff1c\041\uff1c\042\uff1c\043\uff1c\054\uff1c\055\uff1c" +
    "\056\uff1c\057\uff1c\061\uff1c\062\uff1c\064\uff1c\065\uff1c\066" +
    "\uff1c\067\uff1c\072\uff1c\073\uff1c\076\uff1c\077\uff1c\100\uff1c" +
    "\106\uff1c\110\uff1c\114\uff1c\122\uff1c\130\uff1c\131\uff1c\132" +
    "\uff1c\001\002\000\136\003\uff1e\004\uff1e\005\uff1e\006\uff1e" +
    "\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e\015\uff1e\017" +
    "\uff1e\020\uff1e\021\uff1e\024\uff1e\027\uff1e\030\uff1e\034\uff1e" +
    "\035\uff1e\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e\043" +
    "\uff1e\054\uff1e\055\uff1e\056\uff1e\057\uff1e\061\uff1e\062\uff1e" +
    "\064\uff1e\065\uff1e\066\uff1e\067\uff1e\072\uff1e\073\uff1e\076" +
    "\uff1e\077\uff1e\100\uff1e\106\uff1e\110\uff1e\114\uff1e\122\uff1e" +
    "\130\uff1e\131\uff1e\132\uff1e\001\002\000\034\004\037\005" +
    "\034\006\042\010\050\011\045\036\046\037\054\061\044" +
    "\062\041\064\047\065\035\066\033\067\040\001\002\000" +
    "\014\013\062\015\uffc0\024\uffc0\034\061\035\057\001\002" +
    "\000\014\003\uff4e\007\uff4e\015\uff4e\024\uff4e\062\uff4e\001" +
    "\002\000\016\003\151\007\147\074\022\111\005\112\006" +
    "\115\020\001\002\000\006\003\155\027\156\001\002\000" +
    "\010\007\uffe0\015\uffe0\062\u01f4\001\002\000\004\062\u01f3" +
    "\001\002\000\006\007\154\015\153\001\002\000\014\003" +
    "\u01f1\074\022\111\005\112\006\115\020\001\002\000\006" +
    "\003\155\027\156\001\002\000\020\003\164\074\022\075" +
    "\021\111\005\112\006\115\020\126\163\001\002\000\112" +
    "\003\164\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021" +
    "\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\072\uffdc\074\022\075\021\076\uffdc\100\uffdc\106\uffdc" +
    "\110\uffdc\111\005\112\006\114\uffdc\115\020\122\uffdc\126" +
    "\163\130\uffdc\131\uffdc\132\uffdc\001\002\000\020\002\uffe5" +
    "\062\uffe5\074\uffe5\111\uffe5\112\uffe5\115\uffe5\126\uffe5\001" +
    "\002\000\112\003\164\004\uffdc\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\074\022\075\021\076\uffdc\100" +
    "\uffdc\106\uffdc\110\uffdc\111\005\112\006\114\uffdc\115\020" +
    "\122\uffdc\126\163\130\uffdc\131\uffdc\132\uffdc\001\002\000" +
    "\074\004\037\005\034\006\042\010\050\011\045\021\206" +
    "\030\217\036\046\037\054\040\176\041\227\042\220\043" +
    "\215\061\044\062\231\064\047\065\035\066\033\067\040" +
    "\072\213\076\201\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\010\003\172" +
    "\024\171\062\025\001\002\000\004\062\025\001\002\000" +
    "\004\062\025\001\002\000\006\015\027\024\166\001\002" +
    "\000\116\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5\010" +
    "\uffc5\011\uffc5\021\uffc5\024\uffc5\030\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\061\uffc5\062\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\072\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\100\uffc5\106\uffc5\110\uffc5\111\uffc5\112\uffc5\114" +
    "\uffc5\115\uffc5\122\uffc5\126\uffc5\130\uffc5\131\uffc5\132\uffc5" +
    "\001\002\000\006\015\027\024\170\001\002\000\116\002" +
    "\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8\011\uffc8" +
    "\021\uffc8\024\uffc8\030\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\072\uffc8\074\uffc8\075\uffc8\076\uffc8\100" +
    "\uffc8\106\uffc8\110\uffc8\111\uffc8\112\uffc8\114\uffc8\115\uffc8" +
    "\122\uffc8\126\uffc8\130\uffc8\131\uffc8\132\uffc8\001\002\000" +
    "\116\002\uffc7\003\uffc7\004\uffc7\005\uffc7\006\uffc7\010\uffc7" +
    "\011\uffc7\021\uffc7\024\uffc7\030\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\061\uffc7\062\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\072\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\100\uffc7\106\uffc7\110\uffc7\111\uffc7\112\uffc7\114\uffc7" +
    "\115\uffc7\122\uffc7\126\uffc7\130\uffc7\131\uffc7\132\uffc7\001" +
    "\002\000\116\002\uffc6\003\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\010\uffc6\011\uffc6\021\uffc6\024\uffc6\030\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\061\uffc6\062\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\100\uffc6\106\uffc6\110\uffc6\111\uffc6\112\uffc6" +
    "\114\uffc6\115\uffc6\122\uffc6\126\uffc6\130\uffc6\131\uffc6\132" +
    "\uffc6\001\002\000\006\015\027\024\174\001\002\000\116" +
    "\002\uffca\003\uffca\004\uffca\005\uffca\006\uffca\010\uffca\011" +
    "\uffca\021\uffca\024\uffca\030\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\061\uffca\062\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\072\uffca\074\uffca\075\uffca\076\uffca" +
    "\100\uffca\106\uffca\110\uffca\111\uffca\112\uffca\114\uffca\115" +
    "\uffca\122\uffca\126\uffca\130\uffca\131\uffca\132\uffca\001\002" +
    "\000\100\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\021" +
    "\uffdb\030\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\072\uffdb\073\uffdb\076\uffdb\077\uffdb\100\uffdb\106\uffdb" +
    "\110\uffdb\114\uffdb\122\uffdb\130\uffdb\131\uffdb\132\uffdb\001" +
    "\002\000\034\004\037\005\034\006\042\010\050\011\045" +
    "\036\046\037\054\061\044\062\041\064\047\065\035\066" +
    "\033\067\040\001\002\000\100\004\uffd5\005\uffd5\006\uffd5" +
    "\010\uffd5\011\uffd5\021\uffd5\030\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\061\uffd5\062\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\072\uffd5\073\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\106\uffd5\110\uffd5\114\uffd5\122\uffd5\130\uffd5" +
    "\131\uffd5\132\uffd5\001\002\000\100\004\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\011\uffdd\021\uffdd\030\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\061\uffdd\062\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\073\uffdd\076\uffdd" +
    "\077\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd\122\uffdd\130" +
    "\uffdd\131\uffdd\132\uffdd\001\002\000\102\004\uffcd\005\uffcd" +
    "\006\uffcd\010\uffcd\011\uffcd\021\uffcd\024\u01e8\030\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\061\uffcd" +
    "\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\072\uffcd\073" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\106\uffcd\110\uffcd\114\uffcd" +
    "\122\uffcd\130\uffcd\131\uffcd\132\uffcd\001\002\000\006\003" +
    "\u01c1\006\u01c2\001\002\000\010\003\u01ad\006\u01ae\024\u01ac" +
    "\001\002\000\100\004\uffda\005\uffda\006\uffda\010\uffda\011" +
    "\uffda\021\uffda\030\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066" +
    "\uffda\067\uffda\072\uffda\073\uffda\076\uffda\077\uffda\100\uffda" +
    "\106\uffda\110\uffda\114\uffda\122\uffda\130\uffda\131\uffda\132" +
    "\uffda\001\002\000\100\004\uffd8\005\uffd8\006\uffd8\010\uffd8" +
    "\011\uffd8\021\uffd8\030\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\061\uffd8\062\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\072\uffd8\073\uffd8\076\uffd8\077\uffd8\100" +
    "\uffd8\106\uffd8\110\uffd8\114\uffd8\122\uffd8\130\uffd8\131\uffd8" +
    "\132\uffd8\001\002\000\034\004\037\005\034\006\042\010" +
    "\050\011\045\036\046\037\054\061\044\062\041\064\047" +
    "\065\035\066\033\067\040\001\002\000\006\003\u0177\006" +
    "\u0178\001\002\000\040\003\u0174\004\037\005\034\006\042" +
    "\010\050\011\045\024\u0173\036\046\037\054\061\044\062" +
    "\041\064\047\065\035\066\033\067\040\001\002\000\100" +
    "\004\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6\021\uffd6\030" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\061\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\072" +
    "\uffd6\073\uffd6\076\uffd6\077\uffd6\100\uffd6\106\uffd6\110\uffd6" +
    "\114\uffd6\122\uffd6\130\uffd6\131\uffd6\132\uffd6\001\002\000" +
    "\120\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\013\062\015\uffaf\021\246\024\uffaf\027\uffaf\030" +
    "\uffaf\034\061\035\057\036\uffaf\037\uffaf\040\245\041\243" +
    "\042\242\043\244\061\uffaf\062\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\072\uffaf\073\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\106\uffaf\110\uffaf\114\uffaf\122\uffaf\130\uffaf\131\uffaf\132" +
    "\uffaf\001\002\000\102\004\uffce\005\uffce\006\uffce\010\uffce" +
    "\011\uffce\021\uffce\024\u0172\030\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\061\uffce\062\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\072\uffce\073\uffce\076\uffce\077" +
    "\uffce\100\uffce\106\uffce\110\uffce\114\uffce\122\uffce\130\uffce" +
    "\131\uffce\132\uffce\001\002\000\112\003\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\015\uffb0\021\uffb0" +
    "\024\uffb0\027\uffb0\030\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\072\uffb0\073\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\106\uffb0\110\uffb0\114\uffb0\122\uffb0\130\uffb0\131\uffb0" +
    "\132\uffb0\001\002\000\034\004\037\005\034\006\042\010" +
    "\050\011\045\036\046\037\054\061\044\062\041\064\047" +
    "\065\035\066\033\067\040\001\002\000\006\003\376\006" +
    "\377\001\002\000\020\002\uffec\062\uffec\074\uffec\111\uffec" +
    "\112\uffec\115\uffec\126\uffec\001\002\000\034\004\037\005" +
    "\034\006\042\010\050\011\045\036\046\037\054\061\044" +
    "\062\041\064\047\065\035\066\033\067\040\001\002\000" +
    "\012\003\353\006\355\024\352\062\354\001\002\000\006" +
    "\003\271\006\351\001\002\000\100\004\uffbd\005\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\021\uffbd\030\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd\073\uffbd\076\uffbd" +
    "\077\uffbd\100\uffbd\106\uffbd\110\uffbd\114\uffbd\122\uffbd\130" +
    "\uffbd\131\uffbd\132\uffbd\001\002\000\100\004\uffd9\005\uffd9" +
    "\006\uffd9\010\uffd9\011\uffd9\021\uffd9\030\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\061\uffd9\062\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\067\uffd9\072\uffd9\073\uffd9\076" +
    "\uffd9\077\uffd9\100\uffd9\106\uffd9\110\uffd9\114\uffd9\122\uffd9" +
    "\130\uffd9\131\uffd9\132\uffd9\001\002\000\102\004\uffd3\005" +
    "\uffd3\006\uffd3\010\uffd3\011\uffd3\021\uffd3\024\350\030\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\061" +
    "\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\072\uffd3" +
    "\073\uffd3\076\uffd3\077\uffd3\100\uffd3\106\uffd3\110\uffd3\114" +
    "\uffd3\122\uffd3\130\uffd3\131\uffd3\132\uffd3\001\002\000\100" +
    "\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011\uffd7\021\uffd7\030" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\061\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072" +
    "\uffd7\073\uffd7\076\uffd7\077\uffd7\100\uffd7\106\uffd7\110\uffd7" +
    "\114\uffd7\122\uffd7\130\uffd7\131\uffd7\132\uffd7\001\002\000" +
    "\034\004\037\005\034\006\042\010\050\011\045\036\046" +
    "\037\054\061\044\062\041\064\047\065\035\066\033\067" +
    "\040\001\002\000\006\003\264\027\265\001\002\000\136" +
    "\003\uff29\004\uff29\005\uff29\006\125\007\uff29\010\uff29\011" +
    "\uff29\012\uff29\013\uff29\015\uff29\017\uff29\020\uff29\021\236" +
    "\024\uff29\027\uff29\030\uff29\034\uff29\035\uff29\036\123\037" +
    "\124\040\234\041\233\042\235\043\232\054\uff29\055\uff29" +
    "\056\uff29\057\uff29\061\uff29\062\uff29\064\uff29\065\uff29\066" +
    "\uff29\067\uff29\072\uff29\073\uff29\076\uff29\077\uff29\100\uff29" +
    "\106\uff29\110\uff29\114\uff29\122\uff29\130\uff29\131\uff29\132" +
    "\uff29\001\002\000\036\003\262\004\037\005\034\006\042" +
    "\010\050\011\045\036\046\037\054\061\044\062\041\064" +
    "\047\065\035\066\033\067\040\001\002\000\036\003\260" +
    "\004\037\005\034\006\042\010\050\011\045\036\046\037" +
    "\054\061\044\062\041\064\047\065\035\066\033\067\040" +
    "\001\002\000\036\003\256\004\037\005\034\006\042\010" +
    "\050\011\045\036\046\037\054\061\044\062\041\064\047" +
    "\065\035\066\033\067\040\001\002\000\036\003\254\004" +
    "\037\005\034\006\042\010\050\011\045\036\046\037\054" +
    "\061\044\062\041\064\047\065\035\066\033\067\040\001" +
    "\002\000\050\003\240\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\001\002\000\112\003\ufef8\004\ufef8\005\ufef8\006" +
    "\ufef8\007\ufef8\010\ufef8\011\ufef8\015\ufef8\021\ufef8\024\ufef8" +
    "\027\ufef8\030\ufef8\036\ufef8\037\ufef8\040\ufef8\041\ufef8\042" +
    "\ufef8\043\ufef8\061\ufef8\062\ufef8\064\ufef8\065\ufef8\066\ufef8" +
    "\067\ufef8\072\ufef8\073\ufef8\076\ufef8\077\ufef8\100\ufef8\106" +
    "\ufef8\110\ufef8\114\ufef8\122\ufef8\130\ufef8\131\ufef8\132\ufef8" +
    "\001\002\000\112\003\ufef3\004\ufef3\005\ufef3\006\ufef3\007" +
    "\ufef3\010\ufef3\011\ufef3\015\ufef3\021\ufef3\024\ufef3\027\ufef3" +
    "\030\ufef3\036\ufef3\037\ufef3\040\ufef3\041\ufef3\042\ufef3\043" +
    "\ufef3\061\ufef3\062\ufef3\064\ufef3\065\ufef3\066\ufef3\067\ufef3" +
    "\072\ufef3\073\ufef3\076\ufef3\077\ufef3\100\ufef3\106\ufef3\110" +
    "\ufef3\114\ufef3\122\ufef3\130\ufef3\131\ufef3\132\ufef3\001\002" +
    "\000\120\003\ufef9\004\ufef9\005\ufef9\006\ufef9\007\ufef9\010" +
    "\ufef9\011\ufef9\013\062\015\ufef9\021\246\024\ufef9\027\ufef9" +
    "\030\ufef9\034\061\035\057\036\ufef9\037\ufef9\040\245\041" +
    "\243\042\242\043\244\061\ufef9\062\ufef9\064\ufef9\065\ufef9" +
    "\066\ufef9\067\ufef9\072\ufef9\073\ufef9\076\ufef9\077\ufef9\100" +
    "\ufef9\106\ufef9\110\ufef9\114\ufef9\122\ufef9\130\ufef9\131\ufef9" +
    "\132\ufef9\001\002\000\034\004\037\005\034\006\042\010" +
    "\050\011\045\036\046\037\054\061\044\062\041\064\047" +
    "\065\035\066\033\067\040\001\002\000\034\004\037\005" +
    "\034\006\042\010\050\011\045\036\046\037\054\061\044" +
    "\062\041\064\047\065\035\066\033\067\040\001\002\000" +
    "\034\004\037\005\034\006\042\010\050\011\045\036\046" +
    "\037\054\061\044\062\041\064\047\065\035\066\033\067" +
    "\040\001\002\000\034\004\037\005\034\006\042\010\050" +
    "\011\045\036\046\037\054\061\044\062\041\064\047\065" +
    "\035\066\033\067\040\001\002\000\034\004\037\005\034" +
    "\006\042\010\050\011\045\036\046\037\054\061\044\062" +
    "\041\064\047\065\035\066\033\067\040\001\002\000\120" +
    "\003\ufeed\004\ufeed\005\ufeed\006\ufeed\007\ufeed\010\ufeed\011" +
    "\ufeed\013\062\015\ufeed\021\ufeed\024\ufeed\027\ufeed\030\ufeed" +
    "\034\061\035\057\036\ufeed\037\ufeed\040\ufeed\041\ufeed\042" +
    "\ufeed\043\ufeed\061\ufeed\062\ufeed\064\ufeed\065\ufeed\066\ufeed" +
    "\067\ufeed\072\ufeed\073\ufeed\076\ufeed\077\ufeed\100\ufeed\106" +
    "\ufeed\110\ufeed\114\ufeed\122\ufeed\130\ufeed\131\ufeed\132\ufeed" +
    "\001\002\000\120\003\ufee9\004\ufee9\005\ufee9\006\ufee9\007" +
    "\ufee9\010\ufee9\011\ufee9\013\062\015\ufee9\021\ufee9\024\ufee9" +
    "\027\ufee9\030\ufee9\034\061\035\057\036\ufee9\037\ufee9\040" +
    "\ufee9\041\ufee9\042\ufee9\043\ufee9\061\ufee9\062\ufee9\064\ufee9" +
    "\065\ufee9\066\ufee9\067\ufee9\072\ufee9\073\ufee9\076\ufee9\077" +
    "\ufee9\100\ufee9\106\ufee9\110\ufee9\114\ufee9\122\ufee9\130\ufee9" +
    "\131\ufee9\132\ufee9\001\002\000\120\003\ufeec\004\ufeec\005" +
    "\ufeec\006\ufeec\007\ufeec\010\ufeec\011\ufeec\013\062\015\ufeec" +
    "\021\ufeec\024\ufeec\027\ufeec\030\ufeec\034\061\035\057\036" +
    "\ufeec\037\ufeec\040\ufeec\041\ufeec\042\ufeec\043\ufeec\061\ufeec" +
    "\062\ufeec\064\ufeec\065\ufeec\066\ufeec\067\ufeec\072\ufeec\073" +
    "\ufeec\076\ufeec\077\ufeec\100\ufeec\106\ufeec\110\ufeec\114\ufeec" +
    "\122\ufeec\130\ufeec\131\ufeec\132\ufeec\001\002\000\120\003" +
    "\ufeea\004\ufeea\005\ufeea\006\ufeea\007\ufeea\010\ufeea\011\ufeea" +
    "\013\062\015\ufeea\021\ufeea\024\ufeea\027\ufeea\030\ufeea\034" +
    "\061\035\057\036\ufeea\037\ufeea\040\ufeea\041\ufeea\042\ufeea" +
    "\043\ufeea\061\ufeea\062\ufeea\064\ufeea\065\ufeea\066\ufeea\067" +
    "\ufeea\072\ufeea\073\ufeea\076\ufeea\077\ufeea\100\ufeea\106\ufeea" +
    "\110\ufeea\114\ufeea\122\ufeea\130\ufeea\131\ufeea\132\ufeea\001" +
    "\002\000\120\003\ufeeb\004\ufeeb\005\ufeeb\006\ufeeb\007\ufeeb" +
    "\010\ufeeb\011\ufeeb\013\062\015\ufeeb\021\ufeeb\024\ufeeb\027" +
    "\ufeeb\030\ufeeb\034\061\035\057\036\ufeeb\037\ufeeb\040\ufeeb" +
    "\041\ufeeb\042\ufeeb\043\ufeeb\061\ufeeb\062\ufeeb\064\ufeeb\065" +
    "\ufeeb\066\ufeeb\067\ufeeb\072\ufeeb\073\ufeeb\076\ufeeb\077\ufeeb" +
    "\100\ufeeb\106\ufeeb\110\ufeeb\114\ufeeb\122\ufeeb\130\ufeeb\131" +
    "\ufeeb\132\ufeeb\001\002\000\112\003\ufef5\004\ufef5\005\ufef5" +
    "\006\ufef5\007\ufef5\010\ufef5\011\ufef5\015\ufef5\021\ufef5\024" +
    "\ufef5\027\ufef5\030\ufef5\036\ufef5\037\ufef5\040\ufef5\041\ufef5" +
    "\042\ufef5\043\ufef5\061\ufef5\062\ufef5\064\ufef5\065\ufef5\066" +
    "\ufef5\067\ufef5\072\ufef5\073\ufef5\076\ufef5\077\ufef5\100\ufef5" +
    "\106\ufef5\110\ufef5\114\ufef5\122\ufef5\130\ufef5\131\ufef5\132" +
    "\ufef5\001\002\000\120\003\ufefb\004\ufefb\005\ufefb\006\ufefb" +
    "\007\ufefb\010\ufefb\011\ufefb\013\062\015\ufefb\021\ufefb\024" +
    "\ufefb\027\ufefb\030\ufefb\034\061\035\057\036\ufefb\037\ufefb" +
    "\040\ufefb\041\ufefb\042\ufefb\043\ufefb\061\ufefb\062\ufefb\064" +
    "\ufefb\065\ufefb\066\ufefb\067\ufefb\072\ufefb\073\ufefb\076\ufefb" +
    "\077\ufefb\100\ufefb\106\ufefb\110\ufefb\114\ufefb\122\ufefb\130" +
    "\ufefb\131\ufefb\132\ufefb\001\002\000\112\003\ufef7\004\ufef7" +
    "\005\ufef7\006\ufef7\007\ufef7\010\ufef7\011\ufef7\015\ufef7\021" +
    "\ufef7\024\ufef7\027\ufef7\030\ufef7\036\ufef7\037\ufef7\040\ufef7" +
    "\041\ufef7\042\ufef7\043\ufef7\061\ufef7\062\ufef7\064\ufef7\065" +
    "\ufef7\066\ufef7\067\ufef7\072\ufef7\073\ufef7\076\ufef7\077\ufef7" +
    "\100\ufef7\106\ufef7\110\ufef7\114\ufef7\122\ufef7\130\ufef7\131" +
    "\ufef7\132\ufef7\001\002\000\120\003\ufefd\004\ufefd\005\ufefd" +
    "\006\ufefd\007\ufefd\010\ufefd\011\ufefd\013\062\015\ufefd\021" +
    "\ufefd\024\ufefd\027\ufefd\030\ufefd\034\061\035\057\036\ufefd" +
    "\037\ufefd\040\ufefd\041\ufefd\042\ufefd\043\ufefd\061\ufefd\062" +
    "\ufefd\064\ufefd\065\ufefd\066\ufefd\067\ufefd\072\ufefd\073\ufefd" +
    "\076\ufefd\077\ufefd\100\ufefd\106\ufefd\110\ufefd\114\ufefd\122" +
    "\ufefd\130\ufefd\131\ufefd\132\ufefd\001\002\000\112\003\ufef6" +
    "\004\ufef6\005\ufef6\006\ufef6\007\ufef6\010\ufef6\011\ufef6\015" +
    "\ufef6\021\ufef6\024\ufef6\027\ufef6\030\ufef6\036\ufef6\037\ufef6" +
    "\040\ufef6\041\ufef6\042\ufef6\043\ufef6\061\ufef6\062\ufef6\064" +
    "\ufef6\065\ufef6\066\ufef6\067\ufef6\072\ufef6\073\ufef6\076\ufef6" +
    "\077\ufef6\100\ufef6\106\ufef6\110\ufef6\114\ufef6\122\ufef6\130" +
    "\ufef6\131\ufef6\132\ufef6\001\002\000\120\003\ufefc\004\ufefc" +
    "\005\ufefc\006\ufefc\007\ufefc\010\ufefc\011\ufefc\013\062\015" +
    "\ufefc\021\ufefc\024\ufefc\027\ufefc\030\ufefc\034\061\035\057" +
    "\036\ufefc\037\ufefc\040\ufefc\041\ufefc\042\ufefc\043\ufefc\061" +
    "\ufefc\062\ufefc\064\ufefc\065\ufefc\066\ufefc\067\ufefc\072\ufefc" +
    "\073\ufefc\076\ufefc\077\ufefc\100\ufefc\106\ufefc\110\ufefc\114" +
    "\ufefc\122\ufefc\130\ufefc\131\ufefc\132\ufefc\001\002\000\112" +
    "\003\ufef4\004\ufef4\005\ufef4\006\ufef4\007\ufef4\010\ufef4\011" +
    "\ufef4\015\ufef4\021\ufef4\024\ufef4\027\ufef4\030\ufef4\036\ufef4" +
    "\037\ufef4\040\ufef4\041\ufef4\042\ufef4\043\ufef4\061\ufef4\062" +
    "\ufef4\064\ufef4\065\ufef4\066\ufef4\067\ufef4\072\ufef4\073\ufef4" +
    "\076\ufef4\077\ufef4\100\ufef4\106\ufef4\110\ufef4\114\ufef4\122" +
    "\ufef4\130\ufef4\131\ufef4\132\ufef4\001\002\000\120\003\ufefa" +
    "\004\ufefa\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011\ufefa\013" +
    "\062\015\ufefa\021\ufefa\024\ufefa\027\ufefa\030\ufefa\034\061" +
    "\035\057\036\ufefa\037\ufefa\040\ufefa\041\ufefa\042\ufefa\043" +
    "\ufefa\061\ufefa\062\ufefa\064\ufefa\065\ufefa\066\ufefa\067\ufefa" +
    "\072\ufefa\073\ufefa\076\ufefa\077\ufefa\100\ufefa\106\ufefa\110" +
    "\ufefa\114\ufefa\122\ufefa\130\ufefa\131\ufefa\132\ufefa\001\002" +
    "\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021" +
    "\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc" +
    "\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\074\004" +
    "\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061" +
    "\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc" +
    "\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130" +
    "\uffdc\131\uffdc\132\uffdc\001\002\000\074\004\037\005\034" +
    "\006\042\010\050\011\045\021\206\030\267\036\046\037" +
    "\054\040\176\041\227\042\220\043\215\061\044\062\231" +
    "\064\047\065\035\066\033\067\040\072\213\076\201\100" +
    "\230\106\202\110\207\114\210\122\216\130\270\131\221" +
    "\132\203\001\002\000\006\006\311\130\312\001\002\000" +
    "\006\003\271\006\273\001\002\000\046\004\uffa2\005\uffa2" +
    "\006\uffa2\010\uffa2\011\uffa2\021\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\061\uffa2\062\uffa2\064\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\001\002\000\046\004\037\005" +
    "\034\006\042\010\050\011\045\021\206\036\046\037\054" +
    "\040\176\041\227\042\220\043\215\061\044\062\231\064" +
    "\047\065\035\066\033\067\040\001\002\000\046\004\uffa3" +
    "\005\uffa3\006\042\010\uffa3\011\uffa3\021\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\061\uffa3\062\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\001\002\000\004\007" +
    "\275\001\002\000\004\024\276\001\002\000\100\004\uff93" +
    "\005\uff93\006\uff93\010\uff93\011\uff93\021\uff93\030\uff93\036" +
    "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\061\uff93" +
    "\062\uff93\064\uff93\065\uff93\066\uff93\067\uff93\072\uff93\073" +
    "\uff93\076\uff93\077\uff93\100\uff93\106\uff93\110\uff93\114\uff93" +
    "\122\uff93\130\uff93\131\uff93\132\uff93\001\002\000\006\003" +
    "\301\007\300\001\002\000\076\004\uffa1\005\uffa1\006\uffa1" +
    "\010\uffa1\011\uffa1\021\uffa1\027\uffa1\030\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\061\uffa1\062\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\072\uffa1\076\uffa1\100" +
    "\uffa1\106\uffa1\110\uffa1\114\uffa1\122\uffa1\130\uffa1\131\uffa1" +
    "\132\uffa1\001\002\000\076\004\uffa0\005\uffa0\006\uffa0\010" +
    "\uffa0\011\uffa0\021\uffa0\027\uffa0\030\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\061\uffa0\062\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\072\uffa0\076\uffa0\100\uffa0" +
    "\106\uffa0\110\uffa0\114\uffa0\122\uffa0\130\uffa0\131\uffa0\132" +
    "\uffa0\001\002\000\076\004\uff9d\005\uff9d\006\uff9d\010\uff9d" +
    "\011\uff9d\021\uff9d\027\303\030\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\061\uff9d\062\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\072\uff9d\076\uff9d\100\uff9d\106" +
    "\uff9d\110\uff9d\114\uff9d\122\uff9d\130\uff9d\131\uff9d\132\uff9d" +
    "\001\002\000\074\004\uff9e\005\uff9e\006\uff9e\010\uff9e\011" +
    "\uff9e\021\uff9e\030\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\072\uff9e\076\uff9e\100\uff9e\106\uff9e\110\uff9e" +
    "\114\uff9e\122\uff9e\130\uff9e\131\uff9e\132\uff9e\001\002\000" +
    "\100\004\uffa4\005\uffa4\006\uffa4\010\uffa4\011\uffa4\021\uffa4" +
    "\030\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\072\uffa4\073\uffa4\076\uffa4\077\uffa4\100\uffa4\106\uffa4\110" +
    "\uffa4\114\uffa4\122\uffa4\130\uffa4\131\uffa4\132\uffa4\001\002" +
    "\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021" +
    "\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc" +
    "\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\074\004" +
    "\037\005\034\006\042\010\050\011\045\021\206\030\310" +
    "\036\046\037\054\040\176\041\227\042\220\043\215\061" +
    "\044\062\231\064\047\065\035\066\033\067\040\072\213" +
    "\076\201\100\230\106\202\110\207\114\210\122\216\130" +
    "\222\131\221\132\203\001\002\000\100\004\uff9f\005\uff9f" +
    "\006\uff9f\010\uff9f\011\uff9f\021\uff9f\030\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\061\uff9f\062\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\067\uff9f\072\uff9f\073\uff9f\076" +
    "\uff9f\077\uff9f\100\uff9f\106\uff9f\110\uff9f\114\uff9f\122\uff9f" +
    "\130\uff9f\131\uff9f\132\uff9f\001\002\000\100\004\uff9c\005" +
    "\uff9c\006\uff9c\010\uff9c\011\uff9c\021\uff9c\030\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\061\uff9c\062" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\072\uff9c\073\uff9c" +
    "\076\uff9c\077\uff9c\100\uff9c\106\uff9c\110\uff9c\114\uff9c\122" +
    "\uff9c\130\uff9c\131\uff9c\132\uff9c\001\002\000\046\004\037" +
    "\005\034\006\042\010\050\011\045\021\206\036\046\037" +
    "\054\040\176\041\227\042\220\043\215\061\044\062\231" +
    "\064\047\065\035\066\033\067\040\001\002\000\006\003" +
    "\313\006\314\001\002\000\006\007\325\024\326\001\002" +
    "\000\052\003\316\004\037\005\034\006\042\010\050\011" +
    "\045\021\206\024\315\036\046\037\054\040\176\041\227" +
    "\042\220\043\215\061\044\062\231\064\047\065\035\066" +
    "\033\067\040\001\002\000\100\004\uff97\005\uff97\006\uff97" +
    "\010\uff97\011\uff97\021\uff97\030\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\061\uff97\062\uff97\064\uff97" +
    "\065\uff97\066\uff97\067\uff97\072\uff97\073\uff97\076\uff97\077" +
    "\uff97\100\uff97\106\uff97\110\uff97\114\uff97\122\uff97\130\uff97" +
    "\131\uff97\132\uff97\001\002\000\004\007\323\001\002\000" +
    "\006\007\321\024\320\001\002\000\100\004\uff98\005\uff98" +
    "\006\uff98\010\uff98\011\uff98\021\uff98\030\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\061\uff98\062\uff98" +
    "\064\uff98\065\uff98\066\uff98\067\uff98\072\uff98\073\uff98\076" +
    "\uff98\077\uff98\100\uff98\106\uff98\110\uff98\114\uff98\122\uff98" +
    "\130\uff98\131\uff98\132\uff98\001\002\000\102\004\uff95\005" +
    "\uff95\006\uff95\010\uff95\011\uff95\021\uff95\024\322\030\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\061" +
    "\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067\uff95\072\uff95" +
    "\073\uff95\076\uff95\077\uff95\100\uff95\106\uff95\110\uff95\114" +
    "\uff95\122\uff95\130\uff95\131\uff95\132\uff95\001\002\000\100" +
    "\004\uff9b\005\uff9b\006\uff9b\010\uff9b\011\uff9b\021\uff9b\030" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\061\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\072" +
    "\uff9b\073\uff9b\076\uff9b\077\uff9b\100\uff9b\106\uff9b\110\uff9b" +
    "\114\uff9b\122\uff9b\130\uff9b\131\uff9b\132\uff9b\001\002\000" +
    "\004\024\324\001\002\000\100\004\uff9a\005\uff9a\006\uff9a" +
    "\010\uff9a\011\uff9a\021\uff9a\030\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\061\uff9a\062\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\072\uff9a\073\uff9a\076\uff9a\077" +
    "\uff9a\100\uff9a\106\uff9a\110\uff9a\114\uff9a\122\uff9a\130\uff9a" +
    "\131\uff9a\132\uff9a\001\002\000\004\024\327\001\002\000" +
    "\100\004\uff96\005\uff96\006\uff96\010\uff96\011\uff96\021\uff96" +
    "\030\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\072\uff96\073\uff96\076\uff96\077\uff96\100\uff96\106\uff96\110" +
    "\uff96\114\uff96\122\uff96\130\uff96\131\uff96\132\uff96\001\002" +
    "\000\100\004\uff99\005\uff99\006\uff99\010\uff99\011\uff99\021" +
    "\uff99\030\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\072\uff99\073\uff99\076\uff99\077\uff99\100\uff99\106\uff99" +
    "\110\uff99\114\uff99\122\uff99\130\uff99\131\uff99\132\uff99\001" +
    "\002\000\004\007\331\001\002\000\004\024\332\001\002" +
    "\000\100\004\uff92\005\uff92\006\uff92\010\uff92\011\uff92\021" +
    "\uff92\030\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\061\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\072\uff92\073\uff92\076\uff92\077\uff92\100\uff92\106\uff92" +
    "\110\uff92\114\uff92\122\uff92\130\uff92\131\uff92\132\uff92\001" +
    "\002\000\074\004\037\005\034\006\042\010\050\011\045" +
    "\021\206\030\334\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\072\213\076\201\100\230\106\202\110\207\114" +
    "\210\122\216\130\335\131\221\132\203\001\002\000\004" +
    "\130\342\001\002\000\006\003\271\006\336\001\002\000" +
    "\046\004\uffa3\005\uffa3\006\042\010\uffa3\011\uffa3\021\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\061" +
    "\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\001\002" +
    "\000\004\007\340\001\002\000\004\024\341\001\002\000" +
    "\100\004\uff91\005\uff91\006\uff91\010\uff91\011\uff91\021\uff91" +
    "\030\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\061\uff91\062\uff91\064\uff91\065\uff91\066\uff91\067\uff91" +
    "\072\uff91\073\uff91\076\uff91\077\uff91\100\uff91\106\uff91\110" +
    "\uff91\114\uff91\122\uff91\130\uff91\131\uff91\132\uff91\001\002" +
    "\000\004\006\343\001\002\000\046\004\037\005\034\006" +
    "\042\010\050\011\045\021\206\036\046\037\054\040\176" +
    "\041\227\042\220\043\215\061\044\062\231\064\047\065" +
    "\035\066\033\067\040\001\002\000\004\007\345\001\002" +
    "\000\004\024\346\001\002\000\100\004\uff94\005\uff94\006" +
    "\uff94\010\uff94\011\uff94\021\uff94\030\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\061\uff94\062\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\072\uff94\073\uff94\076\uff94" +
    "\077\uff94\100\uff94\106\uff94\110\uff94\114\uff94\122\uff94\130" +
    "\uff94\131\uff94\132\uff94\001\002\000\120\003\ufef1\004\ufef1" +
    "\005\ufef1\006\ufef1\007\ufef1\010\ufef1\011\ufef1\013\062\015" +
    "\ufef1\021\ufef1\024\ufef1\027\ufef1\030\ufef1\034\061\035\057" +
    "\036\ufef1\037\ufef1\040\ufef1\041\ufef1\042\ufef1\043\ufef1\061" +
    "\ufef1\062\ufef1\064\ufef1\065\ufef1\066\ufef1\067\ufef1\072\ufef1" +
    "\073\ufef1\076\ufef1\077\ufef1\100\ufef1\106\ufef1\110\ufef1\114" +
    "\ufef1\122\ufef1\130\ufef1\131\ufef1\132\ufef1\001\002\000\100" +
    "\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4\021\uffd4\030" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\072" +
    "\uffd4\073\uffd4\076\uffd4\077\uffd4\100\uffd4\106\uffd4\110\uffd4" +
    "\114\uffd4\122\uffd4\130\uffd4\131\uffd4\132\uffd4\001\002\000" +
    "\046\004\uffa3\005\uffa3\006\uffa3\010\uffa3\011\uffa3\021\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\061" +
    "\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\001\002" +
    "\000\100\004\uff5c\005\uff5c\006\uff5c\010\uff5c\011\uff5c\021" +
    "\uff5c\030\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c" +
    "\043\uff5c\061\uff5c\062\uff5c\064\uff5c\065\uff5c\066\uff5c\067" +
    "\uff5c\072\uff5c\073\uff5c\076\uff5c\077\uff5c\100\uff5c\106\uff5c" +
    "\110\uff5c\114\uff5c\122\uff5c\130\uff5c\131\uff5c\132\uff5c\001" +
    "\002\000\006\007\370\062\371\001\002\000\004\024\367" +
    "\001\002\000\010\003\357\007\356\062\360\001\002\000" +
    "\102\004\uff5f\005\uff5f\006\uff5f\010\uff5f\011\uff5f\021\uff5f" +
    "\024\366\030\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\061\uff5f\062\uff5f\064\uff5f\065\uff5f\066\uff5f" +
    "\067\uff5f\072\uff5f\073\uff5f\076\uff5f\077\uff5f\100\uff5f\106" +
    "\uff5f\110\uff5f\114\uff5f\122\uff5f\130\uff5f\131\uff5f\132\uff5f" +
    "\001\002\000\004\024\365\001\002\000\006\003\362\007" +
    "\361\001\002\000\102\004\uff60\005\uff60\006\uff60\010\uff60" +
    "\011\uff60\021\uff60\024\364\030\uff60\036\uff60\037\uff60\040" +
    "\uff60\041\uff60\042\uff60\043\uff60\061\uff60\062\uff60\064\uff60" +
    "\065\uff60\066\uff60\067\uff60\072\uff60\073\uff60\076\uff60\077" +
    "\uff60\100\uff60\106\uff60\110\uff60\114\uff60\122\uff60\130\uff60" +
    "\131\uff60\132\uff60\001\002\000\004\024\363\001\002\000" +
    "\100\004\uff66\005\uff66\006\uff66\010\uff66\011\uff66\021\uff66" +
    "\030\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043" +
    "\uff66\061\uff66\062\uff66\064\uff66\065\uff66\066\uff66\067\uff66" +
    "\072\uff66\073\uff66\076\uff66\077\uff66\100\uff66\106\uff66\110" +
    "\uff66\114\uff66\122\uff66\130\uff66\131\uff66\132\uff66\001\002" +
    "\000\100\004\uff6a\005\uff6a\006\uff6a\010\uff6a\011\uff6a\021" +
    "\uff6a\030\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\061\uff6a\062\uff6a\064\uff6a\065\uff6a\066\uff6a\067" +
    "\uff6a\072\uff6a\073\uff6a\076\uff6a\077\uff6a\100\uff6a\106\uff6a" +
    "\110\uff6a\114\uff6a\122\uff6a\130\uff6a\131\uff6a\132\uff6a\001" +
    "\002\000\100\004\uff63\005\uff63\006\uff63\010\uff63\011\uff63" +
    "\021\uff63\030\uff63\036\uff63\037\uff63\040\uff63\041\uff63\042" +
    "\uff63\043\uff63\061\uff63\062\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\072\uff63\073\uff63\076\uff63\077\uff63\100\uff63\106" +
    "\uff63\110\uff63\114\uff63\122\uff63\130\uff63\131\uff63\132\uff63" +
    "\001\002\000\100\004\uff69\005\uff69\006\uff69\010\uff69\011" +
    "\uff69\021\uff69\030\uff69\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\061\uff69\062\uff69\064\uff69\065\uff69\066" +
    "\uff69\067\uff69\072\uff69\073\uff69\076\uff69\077\uff69\100\uff69" +
    "\106\uff69\110\uff69\114\uff69\122\uff69\130\uff69\131\uff69\132" +
    "\uff69\001\002\000\100\004\uff65\005\uff65\006\uff65\010\uff65" +
    "\011\uff65\021\uff65\030\uff65\036\uff65\037\uff65\040\uff65\041" +
    "\uff65\042\uff65\043\uff65\061\uff65\062\uff65\064\uff65\065\uff65" +
    "\066\uff65\067\uff65\072\uff65\073\uff65\076\uff65\077\uff65\100" +
    "\uff65\106\uff65\110\uff65\114\uff65\122\uff65\130\uff65\131\uff65" +
    "\132\uff65\001\002\000\004\024\374\001\002\000\004\007" +
    "\372\001\002\000\004\024\373\001\002\000\100\004\uff67" +
    "\005\uff67\006\uff67\010\uff67\011\uff67\021\uff67\030\uff67\036" +
    "\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\061\uff67" +
    "\062\uff67\064\uff67\065\uff67\066\uff67\067\uff67\072\uff67\073" +
    "\uff67\076\uff67\077\uff67\100\uff67\106\uff67\110\uff67\114\uff67" +
    "\122\uff67\130\uff67\131\uff67\132\uff67\001\002\000\100\004" +
    "\uff64\005\uff64\006\uff64\010\uff64\011\uff64\021\uff64\030\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\061" +
    "\uff64\062\uff64\064\uff64\065\uff64\066\uff64\067\uff64\072\uff64" +
    "\073\uff64\076\uff64\077\uff64\100\uff64\106\uff64\110\uff64\114" +
    "\uff64\122\uff64\130\uff64\131\uff64\132\uff64\001\002\000\120" +
    "\003\ufef0\004\ufef0\005\ufef0\006\ufef0\007\ufef0\010\ufef0\011" +
    "\ufef0\013\062\015\ufef0\021\ufef0\024\ufef0\027\ufef0\030\ufef0" +
    "\034\061\035\057\036\ufef0\037\ufef0\040\ufef0\041\ufef0\042" +
    "\ufef0\043\ufef0\061\ufef0\062\ufef0\064\ufef0\065\ufef0\066\ufef0" +
    "\067\ufef0\072\ufef0\073\ufef0\076\ufef0\077\ufef0\100\ufef0\106" +
    "\ufef0\110\ufef0\114\ufef0\122\ufef0\130\ufef0\131\ufef0\132\ufef0" +
    "\001\002\000\006\007\u0168\027\u0169\001\002\000\030\003" +
    "\u0102\006\u0105\027\u0106\036\046\037\054\061\044\062\u0104" +
    "\064\047\065\035\066\033\067\040\001\002\000\020\004" +
    "\uff10\005\uff10\007\uff10\010\uff10\011\uff10\012\uff10\027\uff10" +
    "\001\002\000\020\004\u0138\005\u013b\007\u0154\010\u0139\011" +
    "\u013a\012\u0137\027\u0155\001\002\000\016\004\u0131\005\u0134" +
    "\007\u014f\010\u0132\011\u0133\012\u012f\001\002\000\020\004" +
    "\uff0f\005\uff0f\007\uff0f\010\uff0f\011\uff0f\012\uff0f\027\uff0f" +
    "\001\002\000\026\004\uff13\005\uff13\006\u014b\007\uff13\010" +
    "\uff13\011\uff13\012\uff13\027\uff13\036\123\037\124\001\002" +
    "\000\026\003\u012e\006\u0105\036\046\037\054\061\044\062" +
    "\u0104\064\047\065\035\066\033\067\040\001\002\000\006" +
    "\073\uff79\077\uff79\001\002\000\006\073\u010b\077\u0108\001" +
    "\002\000\022\003\u011f\023\u011e\027\u0120\061\044\064\047" +
    "\065\035\066\033\067\040\001\002\000\004\030\u011c\001" +
    "\002\000\010\030\uff7a\073\uff7a\077\uff7a\001\002\000\016" +
    "\003\u010c\061\044\064\047\065\035\066\033\067\040\001" +
    "\002\000\004\023\u0117\001\002\000\104\004\uffdc\005\uffdc" +
    "\006\uffdc\010\uffdc\011\uffdc\021\uffdc\023\u010f\027\u010e\030" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072" +
    "\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\106\uffdc\110\uffdc" +
    "\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000" +
    "\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc" +
    "\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\102\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\027\u0111\030" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072" +
    "\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\106\uffdc\110\uffdc" +
    "\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000" +
    "\100\004\037\005\034\006\042\010\050\011\045\021\206" +
    "\030\uff73\036\046\037\054\040\176\041\227\042\220\043" +
    "\215\061\044\062\231\064\047\065\035\066\033\067\040" +
    "\072\213\073\uff73\076\201\077\uff73\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021" +
    "\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc" +
    "\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\100\004" +
    "\037\005\034\006\042\010\050\011\045\021\206\030\uff78" +
    "\036\046\037\054\040\176\041\227\042\220\043\215\061" +
    "\044\062\231\064\047\065\035\066\033\067\040\072\213" +
    "\073\uff78\076\201\077\uff78\100\230\106\202\110\207\114" +
    "\210\122\216\130\222\131\221\132\203\001\002\000\074" +
    "\004\037\005\034\006\042\010\050\011\045\021\206\030" +
    "\u0114\036\046\037\054\040\176\041\227\042\220\043\215" +
    "\061\044\062\231\064\047\065\035\066\033\067\040\072" +
    "\213\076\201\100\230\106\202\110\207\114\210\122\216" +
    "\130\222\131\221\132\203\001\002\000\010\030\uff77\073" +
    "\uff77\077\uff77\001\002\000\074\004\037\005\034\006\042" +
    "\010\050\011\045\021\206\030\u0116\036\046\037\054\040" +
    "\176\041\227\042\220\043\215\061\044\062\231\064\047" +
    "\065\035\066\033\067\040\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\010\030\uff74\073\uff74\077\uff74\001\002\000" +
    "\102\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc" +
    "\027\u0118\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\106" +
    "\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc" +
    "\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011" +
    "\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc" +
    "\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000" +
    "\100\004\037\005\034\006\042\010\050\011\045\021\206" +
    "\030\uff76\036\046\037\054\040\176\041\227\042\220\043" +
    "\215\061\044\062\231\064\047\065\035\066\033\067\040" +
    "\072\213\073\uff76\076\201\077\uff76\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\074\004\037\005\034\006\042\010\050\011\045\021" +
    "\206\030\u011b\036\046\037\054\040\176\041\227\042\220" +
    "\043\215\061\044\062\231\064\047\065\035\066\033\067" +
    "\040\072\213\076\201\100\230\106\202\110\207\114\210" +
    "\122\216\130\222\131\221\132\203\001\002\000\010\030" +
    "\uff75\073\uff75\077\uff75\001\002\000\100\004\uff7d\005\uff7d" +
    "\006\uff7d\010\uff7d\011\uff7d\021\uff7d\030\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\061\uff7d\062\uff7d" +
    "\064\uff7d\065\uff7d\066\uff7d\067\uff7d\072\uff7d\073\uff7d\076" +
    "\uff7d\077\uff7d\100\uff7d\106\uff7d\110\uff7d\114\uff7d\122\uff7d" +
    "\130\uff7d\131\uff7d\132\uff7d\001\002\000\004\023\u012b\001" +
    "\002\000\102\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc" +
    "\021\uffdc\027\u0127\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\100" +
    "\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc" +
    "\132\uffdc\001\002\000\102\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\011\uffdc\021\uffdc\027\u0123\030\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\073\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130" +
    "\uffdc\131\uffdc\132\uffdc\001\002\000\074\004\uffdc\005\uffdc" +
    "\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100" +
    "\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc" +
    "\132\uffdc\001\002\000\074\004\037\005\034\006\042\010" +
    "\050\011\045\021\206\030\u0122\036\046\037\054\040\176" +
    "\041\227\042\220\043\215\061\044\062\231\064\047\065" +
    "\035\066\033\067\040\072\213\076\201\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\010\030\uff6f\073\uff6f\077\uff6f\001\002\000\074" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072" +
    "\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc" +
    "\130\uffdc\131\uffdc\132\uffdc\001\002\000\100\004\037\005" +
    "\034\006\042\010\050\011\045\021\206\030\uff6e\036\046" +
    "\037\054\040\176\041\227\042\220\043\215\061\044\062" +
    "\231\064\047\065\035\066\033\067\040\072\213\073\uff6e" +
    "\076\201\077\uff6e\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\074\004\037" +
    "\005\034\006\042\010\050\011\045\021\206\030\u0126\036" +
    "\046\037\054\040\176\041\227\042\220\043\215\061\044" +
    "\062\231\064\047\065\035\066\033\067\040\072\213\076" +
    "\201\100\230\106\202\110\207\114\210\122\216\130\222" +
    "\131\221\132\203\001\002\000\010\030\uff6d\073\uff6d\077" +
    "\uff6d\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110" +
    "\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002" +
    "\000\100\004\037\005\034\006\042\010\050\011\045\021" +
    "\206\030\uff72\036\046\037\054\040\176\041\227\042\220" +
    "\043\215\061\044\062\231\064\047\065\035\066\033\067" +
    "\040\072\213\073\uff72\076\201\077\uff72\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\074\004\037\005\034\006\042\010\050\011\045" +
    "\021\206\030\u012a\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\072\213\076\201\100\230\106\202\110\207\114" +
    "\210\122\216\130\222\131\221\132\203\001\002\000\010" +
    "\030\uff71\073\uff71\077\uff71\001\002\000\100\004\uffdc\005" +
    "\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\073\uffdc" +
    "\076\uffdc\077\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\100\004\037" +
    "\005\034\006\042\010\050\011\045\021\206\030\uff70\036" +
    "\046\037\054\040\176\041\227\042\220\043\215\061\044" +
    "\062\231\064\047\065\035\066\033\067\040\072\213\073" +
    "\uff70\076\201\077\uff70\100\230\106\202\110\207\114\210" +
    "\122\216\130\222\131\221\132\203\001\002\000\016\004" +
    "\u0138\005\u013b\007\u014a\010\u0139\011\u013a\012\u0137\001\002" +
    "\000\016\004\u0131\005\u0134\007\u0130\010\u0132\011\u0133\012" +
    "\u012f\001\002\000\026\003\u0136\006\u0105\036\046\037\054" +
    "\061\044\062\u0104\064\047\065\035\066\033\067\040\001" +
    "\002\000\020\004\uff04\005\uff04\007\uff04\010\uff04\011\uff04" +
    "\012\uff04\027\uff04\001\002\000\026\003\u0136\006\u0105\036" +
    "\046\037\054\061\044\062\u0104\064\047\065\035\066\033" +
    "\067\040\001\002\000\026\003\u0136\006\u0105\036\046\037" +
    "\054\061\044\062\u0104\064\047\065\035\066\033\067\040" +
    "\001\002\000\026\003\u0136\006\u0105\036\046\037\054\061" +
    "\044\062\u0104\064\047\065\035\066\033\067\040\001\002" +
    "\000\026\003\u0136\006\u0105\036\046\037\054\061\044\062" +
    "\u0104\064\047\065\035\066\033\067\040\001\002\000\020" +
    "\004\uff07\005\uff07\007\uff07\010\uff07\011\uff07\012\uff07\027" +
    "\uff07\001\002\000\014\004\u0131\005\u0134\010\u0132\011\u0133" +
    "\012\u012f\001\002\000\026\003\u0145\006\u0105\036\046\037" +
    "\054\061\044\062\u0104\064\047\065\035\066\033\067\040" +
    "\001\002\000\026\003\u0143\006\u0105\036\046\037\054\061" +
    "\044\062\u0104\064\047\065\035\066\033\067\040\001\002" +
    "\000\026\003\u0141\006\u0105\036\046\037\054\061\044\062" +
    "\u0104\064\047\065\035\066\033\067\040\001\002\000\026" +
    "\003\u013f\006\u0105\036\046\037\054\061\044\062\u0104\064" +
    "\047\065\035\066\033\067\040\001\002\000\026\003\u013d" +
    "\006\u0105\036\046\037\054\061\044\062\u0104\064\047\065" +
    "\035\066\033\067\040\001\002\000\020\004\uff17\005\uff17" +
    "\007\uff17\010\uff17\011\uff17\012\uff17\027\uff17\001\002\000" +
    "\020\004\u0131\005\u0134\007\uff0c\010\u0132\011\u0133\012\u012f" +
    "\027\uff0c\001\002\000\020\004\uff16\005\uff16\007\uff16\010" +
    "\uff16\011\uff16\012\uff16\027\uff16\001\002\000\020\004\u0131" +
    "\005\u0134\007\uff0b\010\u0132\011\u0133\012\u012f\027\uff0b\001" +
    "\002\000\020\004\uff18\005\u013b\007\uff18\010\uff18\011\u013a" +
    "\012\u0137\027\uff18\001\002\000\020\004\u0131\005\u0134\007" +
    "\uff0d\010\u0132\011\u0133\012\u012f\027\uff0d\001\002\000\020" +
    "\004\uff19\005\u013b\007\uff19\010\uff19\011\u013a\012\u0137\027" +
    "\uff19\001\002\000\020\004\u0131\005\u0134\007\uff0e\010\u0132" +
    "\011\u0133\012\u012f\027\uff0e\001\002\000\020\004\uff15\005" +
    "\uff15\007\uff15\010\uff15\011\uff15\012\uff15\027\uff15\001\002" +
    "\000\020\004\u0131\005\u0134\007\uff0a\010\u0132\011\u0133\012" +
    "\u012f\027\uff0a\001\002\000\020\004\uff06\005\uff06\007\uff06" +
    "\010\uff06\011\uff06\012\uff06\027\uff06\001\002\000\020\004" +
    "\uff08\005\u013b\007\uff08\010\uff08\011\u013a\012\u0137\027\uff08" +
    "\001\002\000\020\004\uff09\005\u013b\007\uff09\010\uff09\011" +
    "\u013a\012\u0137\027\uff09\001\002\000\020\004\uff05\005\uff05" +
    "\007\uff05\010\uff05\011\uff05\012\uff05\027\uff05\001\002\000" +
    "\020\004\uff14\005\uff14\007\uff14\010\uff14\011\uff14\012\uff14" +
    "\027\uff14\001\002\000\040\004\037\005\034\006\042\007" +
    "\u014d\010\050\011\045\015\130\036\046\037\054\061\044" +
    "\062\041\064\047\065\035\066\033\067\040\001\002\000" +
    "\010\003\135\007\u014e\015\133\001\002\000\020\004\uff11" +
    "\005\uff11\007\uff11\010\uff11\011\uff11\012\uff11\027\uff11\001" +
    "\002\000\020\004\uff12\005\uff12\007\uff12\010\uff12\011\uff12" +
    "\012\uff12\027\uff12\001\002\000\004\027\u0150\001\002\000" +
    "\006\073\uff79\077\uff79\001\002\000\006\073\u010b\077\u0108" +
    "\001\002\000\004\030\u0153\001\002\000\100\004\uff81\005" +
    "\uff81\006\uff81\010\uff81\011\uff81\021\uff81\030\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\061\uff81\062" +
    "\uff81\064\uff81\065\uff81\066\uff81\067\uff81\072\uff81\073\uff81" +
    "\076\uff81\077\uff81\100\uff81\106\uff81\110\uff81\114\uff81\122" +
    "\uff81\130\uff81\131\uff81\132\uff81\001\002\000\006\003\u0159" +
    "\027\u015a\001\002\000\006\073\uff79\077\uff79\001\002\000" +
    "\006\073\u010b\077\u0108\001\002\000\004\030\u0158\001\002" +
    "\000\100\004\uff80\005\uff80\006\uff80\010\uff80\011\uff80\021" +
    "\uff80\030\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\061\uff80\062\uff80\064\uff80\065\uff80\066\uff80\067" +
    "\uff80\072\uff80\073\uff80\076\uff80\077\uff80\100\uff80\106\uff80" +
    "\110\uff80\114\uff80\122\uff80\130\uff80\131\uff80\132\uff80\001" +
    "\002\000\006\073\uff79\077\uff79\001\002\000\010\030\uff79" +
    "\073\uff79\077\uff79\001\002\000\010\030\u015d\073\u010b\077" +
    "\u0108\001\002\000\010\030\uff79\073\uff79\077\uff79\001\002" +
    "\000\100\004\uff82\005\uff82\006\uff82\010\uff82\011\uff82\021" +
    "\uff82\030\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\061\uff82\062\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\072\uff82\073\uff82\076\uff82\077\uff82\100\uff82\106\uff82" +
    "\110\uff82\114\uff82\122\uff82\130\uff82\131\uff82\132\uff82\001" +
    "\002\000\010\030\u0161\073\u010b\077\u0108\001\002\000\010" +
    "\030\uff6b\073\uff6b\077\u0108\001\002\000\006\030\uff79\073" +
    "\uff79\001\002\000\100\004\uff83\005\uff83\006\uff83\010\uff83" +
    "\011\uff83\021\uff83\030\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\061\uff83\062\uff83\064\uff83\065\uff83" +
    "\066\uff83\067\uff83\072\uff83\073\uff83\076\uff83\077\uff83\100" +
    "\uff83\106\uff83\110\uff83\114\uff83\122\uff83\130\uff83\131\uff83" +
    "\132\uff83\001\002\000\006\030\u0163\073\u010b\001\002\000" +
    "\100\004\uff7b\005\uff7b\006\uff7b\010\uff7b\011\uff7b\021\uff7b" +
    "\030\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b" +
    "\072\uff7b\073\uff7b\076\uff7b\077\uff7b\100\uff7b\106\uff7b\110" +
    "\uff7b\114\uff7b\122\uff7b\130\uff7b\131\uff7b\132\uff7b\001\002" +
    "\000\006\030\uff6c\073\uff6c\001\002\000\006\073\u010b\077" +
    "\u0108\001\002\000\004\030\u0167\001\002\000\100\004\uff7f" +
    "\005\uff7f\006\uff7f\010\uff7f\011\uff7f\021\uff7f\030\uff7f\036" +
    "\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\061\uff7f" +
    "\062\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\072\uff7f\073" +
    "\uff7f\076\uff7f\077\uff7f\100\uff7f\106\uff7f\110\uff7f\114\uff7f" +
    "\122\uff7f\130\uff7f\131\uff7f\132\uff7f\001\002\000\004\027" +
    "\u016d\001\002\000\006\073\uff79\077\uff79\001\002\000\006" +
    "\073\u010b\077\u0108\001\002\000\004\030\u016c\001\002\000" +
    "\100\004\uff7c\005\uff7c\006\uff7c\010\uff7c\011\uff7c\021\uff7c" +
    "\030\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043" +
    "\uff7c\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c" +
    "\072\uff7c\073\uff7c\076\uff7c\077\uff7c\100\uff7c\106\uff7c\110" +
    "\uff7c\114\uff7c\122\uff7c\130\uff7c\131\uff7c\132\uff7c\001\002" +
    "\000\006\073\uff79\077\uff79\001\002\000\006\073\u010b\077" +
    "\u0108\001\002\000\004\030\u0170\001\002\000\100\004\uff7e" +
    "\005\uff7e\006\uff7e\010\uff7e\011\uff7e\021\uff7e\030\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\061\uff7e" +
    "\062\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\072\uff7e\073" +
    "\uff7e\076\uff7e\077\uff7e\100\uff7e\106\uff7e\110\uff7e\114\uff7e" +
    "\122\uff7e\130\uff7e\131\uff7e\132\uff7e\001\002\000\120\003" +
    "\ufeef\004\ufeef\005\ufeef\006\ufeef\007\ufeef\010\ufeef\011\ufeef" +
    "\013\062\015\ufeef\021\ufeef\024\ufeef\027\ufeef\030\ufeef\034" +
    "\061\035\057\036\ufeef\037\ufeef\040\ufeef\041\ufeef\042\ufeef" +
    "\043\ufeef\061\ufeef\062\ufeef\064\ufeef\065\ufeef\066\ufeef\067" +
    "\ufeef\072\ufeef\073\ufeef\076\ufeef\077\ufeef\100\ufeef\106\ufeef" +
    "\110\ufeef\114\ufeef\122\ufeef\130\ufeef\131\ufeef\132\ufeef\001" +
    "\002\000\100\004\uffd2\005\uffd2\006\uffd2\010\uffd2\011\uffd2" +
    "\021\uffd2\030\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\072\uffd2\073\uffd2\076\uffd2\077\uffd2\100\uffd2\106" +
    "\uffd2\110\uffd2\114\uffd2\122\uffd2\130\uffd2\131\uffd2\132\uffd2" +
    "\001\002\000\100\004\uffd0\005\uffd0\006\uffd0\010\uffd0\011" +
    "\uffd0\021\uffd0\030\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\072\uffd0\073\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\106\uffd0\110\uffd0\114\uffd0\122\uffd0\130\uffd0\131\uffd0\132" +
    "\uffd0\001\002\000\100\004\uffcb\005\uffcb\006\uffcb\010\uffcb" +
    "\011\uffcb\021\uffcb\030\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\072\uffcb\073\uffcb\076\uffcb\077\uffcb\100" +
    "\uffcb\106\uffcb\110\uffcb\114\uffcb\122\uffcb\130\uffcb\131\uffcb" +
    "\132\uffcb\001\002\000\104\004\075\005\100\006\uffcc\010" +
    "\076\011\077\012\074\021\uffcc\024\u0176\030\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\061\uffcc\062" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\072\uffcc\073\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\106\uffcc\110\uffcc\114\uffcc\122" +
    "\uffcc\130\uffcc\131\uffcc\132\uffcc\001\002\000\100\004\uffcf" +
    "\005\uffcf\006\uffcf\010\uffcf\011\uffcf\021\uffcf\030\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\061\uffcf" +
    "\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\072\uffcf\073" +
    "\uffcf\076\uffcf\077\uffcf\100\uffcf\106\uffcf\110\uffcf\114\uffcf" +
    "\122\uffcf\130\uffcf\131\uffcf\132\uffcf\001\002\000\006\007" +
    "\u01a2\027\u01a3\001\002\000\052\003\u017a\004\037\005\034" +
    "\006\042\010\050\011\045\021\206\027\u0179\036\046\037" +
    "\054\040\176\041\227\042\220\043\215\061\044\062\231" +
    "\064\047\065\035\066\033\067\040\001\002\000\074\004" +
    "\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061" +
    "\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc" +
    "\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130" +
    "\uffdc\131\uffdc\132\uffdc\001\002\000\004\007\u019a\001\002" +
    "\000\006\007\u017c\027\u017d\001\002\000\006\003\u0189\027" +
    "\u0196\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110" +
    "\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002" +
    "\000\074\004\037\005\034\006\042\010\050\011\045\021" +
    "\206\030\u017f\036\046\037\054\040\176\041\227\042\220" +
    "\043\215\061\044\062\231\064\047\065\035\066\033\067" +
    "\040\072\213\076\201\100\230\106\202\110\207\114\210" +
    "\122\216\130\222\131\221\132\203\001\002\000\102\004" +
    "\uffb7\005\uffb7\006\uffb7\010\uffb7\011\uffb7\021\uffb7\030\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\061" +
    "\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\072\uffb7" +
    "\073\uffb7\076\uffb7\077\uffb7\100\uffb7\102\u0180\106\uffb7\110" +
    "\uffb7\114\uffb7\122\uffb7\130\uffb7\131\uffb7\132\uffb7\001\002" +
    "\000\010\003\u0182\027\u0184\110\u0185\001\002\000\100\004" +
    "\uffb8\005\uffb8\006\uffb8\010\uffb8\011\uffb8\021\uffb8\030\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\061" +
    "\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\072\uffb8" +
    "\073\uffb8\076\uffb8\077\uffb8\100\uffb8\106\uffb8\110\uffb8\114" +
    "\uffb8\122\uffb8\130\uffb8\131\uffb8\132\uffb8\001\002\000\074" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072" +
    "\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc" +
    "\130\uffdc\131\uffdc\132\uffdc\001\002\000\100\004\uffa5\005" +
    "\uffa5\006\uffa5\010\uffa5\011\uffa5\021\uffa5\030\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\061\uffa5\062" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\072\uffa5\073\uffa5" +
    "\076\uffa5\077\uffa5\100\uffa5\106\uffa5\110\uffa5\114\uffa5\122" +
    "\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002\000\074\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc" +
    "\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076" +
    "\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc" +
    "\131\uffdc\132\uffdc\001\002\000\006\003\u0177\006\u0186\001" +
    "\002\000\052\003\u017a\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\027\u0179\036\046\037\054\040\176\041" +
    "\227\042\220\043\215\061\044\062\231\064\047\065\035" +
    "\066\033\067\040\001\002\000\006\007\u0188\027\u017d\001" +
    "\002\000\006\003\u0189\027\u018a\001\002\000\074\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc" +
    "\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076" +
    "\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc" +
    "\131\uffdc\132\uffdc\001\002\000\074\004\uffdc\005\uffdc\006" +
    "\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc" +
    "\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132" +
    "\uffdc\001\002\000\074\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\030\u018c\036\046\037\054\040\176\041" +
    "\227\042\220\043\215\061\044\062\231\064\047\065\035" +
    "\066\033\067\040\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\102\004\uffa9\005\uffa9\006\uffa9\010\uffa9\011\uffa9\021" +
    "\uffa9\030\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\072\uffa9\073\uffa9\076\uffa9\077\uffa9\100\uffa9\102\u0180" +
    "\106\uffa9\110\uffa9\114\uffa9\122\uffa9\130\uffa9\131\uffa9\132" +
    "\uffa9\001\002\000\100\004\uffaa\005\uffaa\006\uffaa\010\uffaa" +
    "\011\uffaa\021\uffaa\030\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\072\uffaa\073\uffaa\076\uffaa\077\uffaa\100" +
    "\uffaa\106\uffaa\110\uffaa\114\uffaa\122\uffaa\130\uffaa\131\uffaa" +
    "\132\uffaa\001\002\000\074\004\037\005\034\006\042\010" +
    "\050\011\045\021\206\030\u018f\036\046\037\054\040\176" +
    "\041\227\042\220\043\215\061\044\062\231\064\047\065" +
    "\035\066\033\067\040\072\213\076\201\100\230\106\202" +
    "\110\207\114\210\122\216\130\222\131\221\132\203\001" +
    "\002\000\102\004\uffb1\005\uffb1\006\uffb1\010\uffb1\011\uffb1" +
    "\021\uffb1\030\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\072\uffb1\073\uffb1\076\uffb1\077\uffb1\100\uffb1\102" +
    "\u0180\106\uffb1\110\uffb1\114\uffb1\122\uffb1\130\uffb1\131\uffb1" +
    "\132\uffb1\001\002\000\100\004\uffb2\005\uffb2\006\uffb2\010" +
    "\uffb2\011\uffb2\021\uffb2\030\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\061\uffb2\062\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\072\uffb2\073\uffb2\076\uffb2\077\uffb2" +
    "\100\uffb2\106\uffb2\110\uffb2\114\uffb2\122\uffb2\130\uffb2\131" +
    "\uffb2\132\uffb2\001\002\000\074\004\037\005\034\006\042" +
    "\010\050\011\045\021\206\030\u0192\036\046\037\054\040" +
    "\176\041\227\042\220\043\215\061\044\062\231\064\047" +
    "\065\035\066\033\067\040\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\102\004\uffa8\005\uffa8\006\uffa8\010\uffa8\011" +
    "\uffa8\021\uffa8\030\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\072\uffa8\073\uffa8\076\uffa8\077\uffa8\100\uffa8" +
    "\102\u0180\106\uffa8\110\uffa8\114\uffa8\122\uffa8\130\uffa8\131" +
    "\uffa8\132\uffa8\001\002\000\100\004\uffa7\005\uffa7\006\uffa7" +
    "\010\uffa7\011\uffa7\021\uffa7\030\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\061\uffa7\062\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\072\uffa7\073\uffa7\076\uffa7\077" +
    "\uffa7\100\uffa7\106\uffa7\110\uffa7\114\uffa7\122\uffa7\130\uffa7" +
    "\131\uffa7\132\uffa7\001\002\000\074\004\037\005\034\006" +
    "\042\010\050\011\045\021\206\030\u0195\036\046\037\054" +
    "\040\176\041\227\042\220\043\215\061\044\062\231\064" +
    "\047\065\035\066\033\067\040\072\213\076\201\100\230" +
    "\106\202\110\207\114\210\122\216\130\222\131\221\132" +
    "\203\001\002\000\100\004\uffa6\005\uffa6\006\uffa6\010\uffa6" +
    "\011\uffa6\021\uffa6\030\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\061\uffa6\062\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\072\uffa6\073\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\106\uffa6\110\uffa6\114\uffa6\122\uffa6\130\uffa6\131\uffa6" +
    "\132\uffa6\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc" +
    "\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001" +
    "\002\000\074\004\037\005\034\006\042\010\050\011\045" +
    "\021\206\030\u0198\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\072\213\076\201\100\230\106\202\110\207\114" +
    "\210\122\216\130\222\131\221\132\203\001\002\000\102" +
    "\004\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\021\uffbe\030" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\072" +
    "\uffbe\073\uffbe\076\uffbe\077\uffbe\100\uffbe\102\u0180\106\uffbe" +
    "\110\uffbe\114\uffbe\122\uffbe\130\uffbe\131\uffbe\132\uffbe\001" +
    "\002\000\100\004\uffbf\005\uffbf\006\uffbf\010\uffbf\011\uffbf" +
    "\021\uffbf\030\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\072\uffbf\073\uffbf\076\uffbf\077\uffbf\100\uffbf\106" +
    "\uffbf\110\uffbf\114\uffbf\122\uffbf\130\uffbf\131\uffbf\132\uffbf" +
    "\001\002\000\004\027\u019b\001\002\000\074\004\uffdc\005" +
    "\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc" +
    "\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131" +
    "\uffdc\132\uffdc\001\002\000\074\004\037\005\034\006\042" +
    "\010\050\011\045\021\206\030\u019d\036\046\037\054\040" +
    "\176\041\227\042\220\043\215\061\044\062\231\064\047" +
    "\065\035\066\033\067\040\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\102\004\uffbb\005\uffbb\006\uffbb\010\uffbb\011" +
    "\uffbb\021\uffbb\030\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\072\uffbb\073\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\102\u0180\106\uffbb\110\uffbb\114\uffbb\122\uffbb\130\uffbb\131" +
    "\uffbb\132\uffbb\001\002\000\100\004\uffbc\005\uffbc\006\uffbc" +
    "\010\uffbc\011\uffbc\021\uffbc\030\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\061\uffbc\062\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\072\uffbc\073\uffbc\076\uffbc\077" +
    "\uffbc\100\uffbc\106\uffbc\110\uffbc\114\uffbc\122\uffbc\130\uffbc" +
    "\131\uffbc\132\uffbc\001\002\000\074\004\037\005\034\006" +
    "\042\010\050\011\045\021\206\030\u01a0\036\046\037\054" +
    "\040\176\041\227\042\220\043\215\061\044\062\231\064" +
    "\047\065\035\066\033\067\040\072\213\076\201\100\230" +
    "\106\202\110\207\114\210\122\216\130\222\131\221\132" +
    "\203\001\002\000\102\004\uffb5\005\uffb5\006\uffb5\010\uffb5" +
    "\011\uffb5\021\uffb5\030\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\072\uffb5\073\uffb5\076\uffb5\077\uffb5\100" +
    "\uffb5\102\u0180\106\uffb5\110\uffb5\114\uffb5\122\uffb5\130\uffb5" +
    "\131\uffb5\132\uffb5\001\002\000\100\004\uffb6\005\uffb6\006" +
    "\uffb6\010\uffb6\011\uffb6\021\uffb6\030\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\061\uffb6\062\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\067\uffb6\072\uffb6\073\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\106\uffb6\110\uffb6\114\uffb6\122\uffb6\130" +
    "\uffb6\131\uffb6\132\uffb6\001\002\000\004\027\u01a7\001\002" +
    "\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021" +
    "\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc" +
    "\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\074\004" +
    "\037\005\034\006\042\010\050\011\045\021\206\030\u01a5" +
    "\036\046\037\054\040\176\041\227\042\220\043\215\061" +
    "\044\062\231\064\047\065\035\066\033\067\040\072\213" +
    "\076\201\100\230\106\202\110\207\114\210\122\216\130" +
    "\222\131\221\132\203\001\002\000\102\004\uffb3\005\uffb3" +
    "\006\uffb3\010\uffb3\011\uffb3\021\uffb3\030\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\061\uffb3\062\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\072\uffb3\073\uffb3\076" +
    "\uffb3\077\uffb3\100\uffb3\102\u0180\106\uffb3\110\uffb3\114\uffb3" +
    "\122\uffb3\130\uffb3\131\uffb3\132\uffb3\001\002\000\100\004" +
    "\uffb4\005\uffb4\006\uffb4\010\uffb4\011\uffb4\021\uffb4\030\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\061" +
    "\uffb4\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\072\uffb4" +
    "\073\uffb4\076\uffb4\077\uffb4\100\uffb4\106\uffb4\110\uffb4\114" +
    "\uffb4\122\uffb4\130\uffb4\131\uffb4\132\uffb4\001\002\000\074" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072" +
    "\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc" +
    "\130\uffdc\131\uffdc\132\uffdc\001\002\000\074\004\037\005" +
    "\034\006\042\010\050\011\045\021\206\030\u01a9\036\046" +
    "\037\054\040\176\041\227\042\220\043\215\061\044\062" +
    "\231\064\047\065\035\066\033\067\040\072\213\076\201" +
    "\100\230\106\202\110\207\114\210\122\216\130\222\131" +
    "\221\132\203\001\002\000\102\004\uffb9\005\uffb9\006\uffb9" +
    "\010\uffb9\011\uffb9\021\uffb9\030\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\061\uffb9\062\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\072\uffb9\073\uffb9\076\uffb9\077" +
    "\uffb9\100\uffb9\102\u0180\106\uffb9\110\uffb9\114\uffb9\122\uffb9" +
    "\130\uffb9\131\uffb9\132\uffb9\001\002\000\100\004\uffba\005" +
    "\uffba\006\uffba\010\uffba\011\uffba\021\uffba\030\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\061\uffba\062" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\072\uffba\073\uffba" +
    "\076\uffba\077\uffba\100\uffba\106\uffba\110\uffba\114\uffba\122" +
    "\uffba\130\uffba\131\uffba\132\uffba\001\002\000\120\003\ufeee" +
    "\004\ufeee\005\ufeee\006\ufeee\007\ufeee\010\ufeee\011\ufeee\013" +
    "\062\015\ufeee\021\ufeee\024\ufeee\027\ufeee\030\ufeee\034\061" +
    "\035\057\036\ufeee\037\ufeee\040\ufeee\041\ufeee\042\ufeee\043" +
    "\ufeee\061\ufeee\062\ufeee\064\ufeee\065\ufeee\066\ufeee\067\ufeee" +
    "\072\ufeee\073\ufeee\076\ufeee\077\ufeee\100\ufeee\106\ufeee\110" +
    "\ufeee\114\ufeee\122\ufeee\130\ufeee\131\ufeee\132\ufeee\001\002" +
    "\000\100\004\uff5b\005\uff5b\006\uff5b\010\uff5b\011\uff5b\021" +
    "\uff5b\030\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b" +
    "\043\uff5b\061\uff5b\062\uff5b\064\uff5b\065\uff5b\066\uff5b\067" +
    "\uff5b\072\uff5b\073\uff5b\076\uff5b\077\uff5b\100\uff5b\106\uff5b" +
    "\110\uff5b\114\uff5b\122\uff5b\130\uff5b\131\uff5b\132\uff5b\001" +
    "\002\000\050\004\037\005\034\006\042\010\050\011\045" +
    "\015\u01b0\021\206\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\001\002\000\052\003\u01b1\004\037\005\034\006" +
    "\042\010\050\011\045\015\u01b0\021\206\036\046\037\054" +
    "\040\176\041\227\042\220\043\215\061\044\062\231\064" +
    "\047\065\035\066\033\067\040\001\002\000\010\003\u01b8" +
    "\007\u01b7\015\u01b6\001\002\000\046\004\037\005\034\006" +
    "\042\010\050\011\045\021\206\036\046\037\054\040\176" +
    "\041\227\042\220\043\215\061\044\062\231\064\047\065" +
    "\035\066\033\067\040\001\002\000\004\007\u01b3\001\002" +
    "\000\010\003\uff5a\007\uff5a\015\uff5a\001\002\000\004\024" +
    "\u01b4\001\002\000\100\004\uff5d\005\uff5d\006\uff5d\010\uff5d" +
    "\011\uff5d\021\uff5d\030\uff5d\036\uff5d\037\uff5d\040\uff5d\041" +
    "\uff5d\042\uff5d\043\uff5d\061\uff5d\062\uff5d\064\uff5d\065\uff5d" +
    "\066\uff5d\067\uff5d\072\uff5d\073\uff5d\076\uff5d\077\uff5d\100" +
    "\uff5d\106\uff5d\110\uff5d\114\uff5d\122\uff5d\130\uff5d\131\uff5d" +
    "\132\uff5d\001\002\000\010\003\uff57\007\uff57\015\uff57\001" +
    "\002\000\050\003\u01bb\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\001\002\000\102\004\uff5e\005\uff5e\006\uff5e\010" +
    "\uff5e\011\uff5e\021\uff5e\024\u01ba\030\uff5e\036\uff5e\037\uff5e" +
    "\040\uff5e\041\uff5e\042\uff5e\043\uff5e\061\uff5e\062\uff5e\064" +
    "\uff5e\065\uff5e\066\uff5e\067\uff5e\072\uff5e\073\uff5e\076\uff5e" +
    "\077\uff5e\100\uff5e\106\uff5e\110\uff5e\114\uff5e\122\uff5e\130" +
    "\uff5e\131\uff5e\132\uff5e\001\002\000\012\003\uff56\007\uff56" +
    "\015\uff56\024\u01b9\001\002\000\100\004\uff61\005\uff61\006" +
    "\uff61\010\uff61\011\uff61\021\uff61\030\uff61\036\uff61\037\uff61" +
    "\040\uff61\041\uff61\042\uff61\043\uff61\061\uff61\062\uff61\064" +
    "\uff61\065\uff61\066\uff61\067\uff61\072\uff61\073\uff61\076\uff61" +
    "\077\uff61\100\uff61\106\uff61\110\uff61\114\uff61\122\uff61\130" +
    "\uff61\131\uff61\132\uff61\001\002\000\100\004\uff68\005\uff68" +
    "\006\uff68\010\uff68\011\uff68\021\uff68\030\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\043\uff68\061\uff68\062\uff68" +
    "\064\uff68\065\uff68\066\uff68\067\uff68\072\uff68\073\uff68\076" +
    "\uff68\077\uff68\100\uff68\106\uff68\110\uff68\114\uff68\122\uff68" +
    "\130\uff68\131\uff68\132\uff68\001\002\000\010\003\uff58\007" +
    "\uff58\015\uff58\001\002\000\010\003\uff59\007\uff59\015\uff59" +
    "\001\002\000\010\003\u01bf\007\u01be\015\u01b6\001\002\000" +
    "\004\024\u01c0\001\002\000\010\003\uff56\007\uff56\015\uff56" +
    "\001\002\000\100\004\uff62\005\uff62\006\uff62\010\uff62\011" +
    "\uff62\021\uff62\030\uff62\036\uff62\037\uff62\040\uff62\041\uff62" +
    "\042\uff62\043\uff62\061\uff62\062\uff62\064\uff62\065\uff62\066" +
    "\uff62\067\uff62\072\uff62\073\uff62\076\uff62\077\uff62\100\uff62" +
    "\106\uff62\110\uff62\114\uff62\122\uff62\130\uff62\131\uff62\132" +
    "\uff62\001\002\000\006\007\u01e1\027\u01e2\001\002\000\070" +
    "\003\u01c4\004\037\005\034\006\042\010\050\011\045\021" +
    "\206\024\uff86\027\u01c5\036\046\037\054\040\176\041\227" +
    "\042\220\043\215\061\044\062\231\064\047\065\035\066" +
    "\033\067\040\074\022\075\021\111\005\112\006\115\020" +
    "\126\163\001\002\000\004\024\u01dd\001\002\000\010\007" +
    "\u01d9\024\uff84\062\025\001\002\000\074\004\uffdc\005\uffdc" +
    "\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100" +
    "\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc" +
    "\132\uffdc\001\002\000\006\007\u01cd\027\u01ce\001\002\000" +
    "\052\003\u01c9\004\037\005\034\006\042\010\050\011\045" +
    "\021\206\024\uff86\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\001\002\000\010\007\uff85\024\uff85\027\uff85\001" +
    "\002\000\010\007\uff84\024\uff84\027\uff84\001\002\000\004" +
    "\024\u01cb\001\002\000\054\003\u01c9\004\037\005\034\006" +
    "\042\007\uff86\010\050\011\045\021\206\027\uff86\036\046" +
    "\037\054\040\176\041\227\042\220\043\215\061\044\062" +
    "\231\064\047\065\035\066\033\067\040\001\002\000\006" +
    "\007\uff89\027\uff89\001\002\000\006\003\u01d1\027\u01d2\001" +
    "\002\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc" +
    "\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110\uffdc\114" +
    "\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\074" +
    "\004\037\005\034\006\042\010\050\011\045\021\206\030" +
    "\u01d0\036\046\037\054\040\176\041\227\042\220\043\215" +
    "\061\044\062\231\064\047\065\035\066\033\067\040\072" +
    "\213\076\201\100\230\106\202\110\207\114\210\122\216" +
    "\130\222\131\221\132\203\001\002\000\100\004\uff8d\005" +
    "\uff8d\006\uff8d\010\uff8d\011\uff8d\021\uff8d\030\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\061\uff8d\062" +
    "\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\072\uff8d\073\uff8d" +
    "\076\uff8d\077\uff8d\100\uff8d\106\uff8d\110\uff8d\114\uff8d\122" +
    "\uff8d\130\uff8d\131\uff8d\132\uff8d\001\002\000\074\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc" +
    "\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076" +
    "\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc" +
    "\131\uffdc\132\uffdc\001\002\000\074\004\uffdc\005\uffdc\006" +
    "\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc" +
    "\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132" +
    "\uffdc\001\002\000\074\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\030\u01d4\036\046\037\054\040\176\041" +
    "\227\042\220\043\215\061\044\062\231\064\047\065\035" +
    "\066\033\067\040\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\100\004\uff90\005\uff90\006\uff90\010\uff90\011\uff90\021" +
    "\uff90\030\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\072\uff90\073\uff90\076\uff90\077\uff90\100\uff90\106\uff90" +
    "\110\uff90\114\uff90\122\uff90\130\uff90\131\uff90\132\uff90\001" +
    "\002\000\074\004\037\005\034\006\042\010\050\011\045" +
    "\021\206\030\u01d6\036\046\037\054\040\176\041\227\042" +
    "\220\043\215\061\044\062\231\064\047\065\035\066\033" +
    "\067\040\072\213\076\201\100\230\106\202\110\207\114" +
    "\210\122\216\130\222\131\221\132\203\001\002\000\100" +
    "\004\uff8a\005\uff8a\006\uff8a\010\uff8a\011\uff8a\021\uff8a\030" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\072" +
    "\uff8a\073\uff8a\076\uff8a\077\uff8a\100\uff8a\106\uff8a\110\uff8a" +
    "\114\uff8a\122\uff8a\130\uff8a\131\uff8a\132\uff8a\001\002\000" +
    "\074\004\037\005\034\006\042\010\050\011\045\021\206" +
    "\030\u01d8\036\046\037\054\040\176\041\227\042\220\043" +
    "\215\061\044\062\231\064\047\065\035\066\033\067\040" +
    "\072\213\076\201\100\230\106\202\110\207\114\210\122" +
    "\216\130\222\131\221\132\203\001\002\000\100\004\uff8c" +
    "\005\uff8c\006\uff8c\010\uff8c\011\uff8c\021\uff8c\030\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\061\uff8c" +
    "\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\072\uff8c\073" +
    "\uff8c\076\uff8c\077\uff8c\100\uff8c\106\uff8c\110\uff8c\114\uff8c" +
    "\122\uff8c\130\uff8c\131\uff8c\132\uff8c\001\002\000\004\027" +
    "\u01da\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110" +
    "\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002" +
    "\000\074\004\037\005\034\006\042\010\050\011\045\021" +
    "\206\030\u01dc\036\046\037\054\040\176\041\227\042\220" +
    "\043\215\061\044\062\231\064\047\065\035\066\033\067" +
    "\040\072\213\076\201\100\230\106\202\110\207\114\210" +
    "\122\216\130\222\131\221\132\203\001\002\000\100\004" +
    "\uff8f\005\uff8f\006\uff8f\010\uff8f\011\uff8f\021\uff8f\030\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\061" +
    "\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\072\uff8f" +
    "\073\uff8f\076\uff8f\077\uff8f\100\uff8f\106\uff8f\110\uff8f\114" +
    "\uff8f\122\uff8f\130\uff8f\131\uff8f\132\uff8f\001\002\000\056" +
    "\003\u01c9\004\037\005\034\006\042\007\uff87\010\050\011" +
    "\045\021\206\024\uff86\027\uff87\036\046\037\054\040\176" +
    "\041\227\042\220\043\215\061\044\062\231\064\047\065" +
    "\035\066\033\067\040\001\002\000\004\024\u01df\001\002" +
    "\000\054\003\u01c9\004\037\005\034\006\042\007\uff86\010" +
    "\050\011\045\021\206\027\uff86\036\046\037\054\040\176" +
    "\041\227\042\220\043\215\061\044\062\231\064\047\065" +
    "\035\066\033\067\040\001\002\000\006\007\uff88\027\uff88" +
    "\001\002\000\004\027\u01e5\001\002\000\074\004\uffdc\005" +
    "\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\076\uffdc" +
    "\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131" +
    "\uffdc\132\uffdc\001\002\000\074\004\037\005\034\006\042" +
    "\010\050\011\045\021\206\030\u01e4\036\046\037\054\040" +
    "\176\041\227\042\220\043\215\061\044\062\231\064\047" +
    "\065\035\066\033\067\040\072\213\076\201\100\230\106" +
    "\202\110\207\114\210\122\216\130\222\131\221\132\203" +
    "\001\002\000\100\004\uff8b\005\uff8b\006\uff8b\010\uff8b\011" +
    "\uff8b\021\uff8b\030\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b\066" +
    "\uff8b\067\uff8b\072\uff8b\073\uff8b\076\uff8b\077\uff8b\100\uff8b" +
    "\106\uff8b\110\uff8b\114\uff8b\122\uff8b\130\uff8b\131\uff8b\132" +
    "\uff8b\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\076\uffdc\100\uffdc\106\uffdc\110" +
    "\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002" +
    "\000\074\004\037\005\034\006\042\010\050\011\045\021" +
    "\206\030\u01e7\036\046\037\054\040\176\041\227\042\220" +
    "\043\215\061\044\062\231\064\047\065\035\066\033\067" +
    "\040\072\213\076\201\100\230\106\202\110\207\114\210" +
    "\122\216\130\222\131\221\132\203\001\002\000\100\004" +
    "\uff8e\005\uff8e\006\uff8e\010\uff8e\011\uff8e\021\uff8e\030\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\061" +
    "\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\072\uff8e" +
    "\073\uff8e\076\uff8e\077\uff8e\100\uff8e\106\uff8e\110\uff8e\114" +
    "\uff8e\122\uff8e\130\uff8e\131\uff8e\132\uff8e\001\002\000\100" +
    "\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011\uffd1\021\uffd1\030" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\072" +
    "\uffd1\073\uffd1\076\uffd1\077\uffd1\100\uffd1\106\uffd1\110\uffd1" +
    "\114\uffd1\122\uffd1\130\uffd1\131\uffd1\132\uffd1\001\002\000" +
    "\120\003\ufef2\004\ufef2\005\ufef2\006\ufef2\007\ufef2\010\ufef2" +
    "\011\ufef2\013\062\015\ufef2\021\ufef2\024\ufef2\027\ufef2\030" +
    "\ufef2\034\061\035\057\036\ufef2\037\ufef2\040\ufef2\041\ufef2" +
    "\042\ufef2\043\ufef2\061\ufef2\062\ufef2\064\ufef2\065\ufef2\066" +
    "\ufef2\067\ufef2\072\ufef2\073\ufef2\076\ufef2\077\ufef2\100\ufef2" +
    "\106\ufef2\110\ufef2\114\ufef2\122\ufef2\130\ufef2\131\ufef2\132" +
    "\ufef2\001\002\000\074\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\030\u01ec\036\046\037\054\040\176\041" +
    "\227\042\220\043\215\061\044\062\231\064\047\065\035" +
    "\066\033\067\040\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\114\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\010" +
    "\ufff9\011\ufff9\021\ufff9\030\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\061\ufff9\062\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\072\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\100\ufff9\106\ufff9\110\ufff9\111\ufff9\112\ufff9\114\ufff9\115" +
    "\ufff9\122\ufff9\126\ufff9\130\ufff9\131\ufff9\132\ufff9\001\002" +
    "\000\020\002\uffed\062\uffed\074\uffed\111\uffed\112\uffed\115" +
    "\uffed\126\uffed\001\002\000\112\003\164\004\uffdc\005\uffdc" +
    "\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc\074\022\075" +
    "\021\076\uffdc\100\uffdc\106\uffdc\110\uffdc\111\005\112\006" +
    "\114\uffdc\115\020\122\uffdc\126\163\130\uffdc\131\uffdc\132" +
    "\uffdc\001\002\000\074\004\037\005\034\006\042\010\050" +
    "\011\045\021\206\030\u01ef\036\046\037\054\040\176\041" +
    "\227\042\220\043\215\061\044\062\231\064\047\065\035" +
    "\066\033\067\040\072\213\076\201\100\230\106\202\110" +
    "\207\114\210\122\216\130\222\131\221\132\203\001\002" +
    "\000\020\002\uffeb\062\uffeb\074\uffeb\111\uffeb\112\uffeb\115" +
    "\uffeb\126\uffeb\001\002\000\010\007\uffdf\015\uffdf\062\u01f2" +
    "\001\002\000\006\007\uffde\015\uffde\001\002\000\006\007" +
    "\uffe2\015\uffe2\001\002\000\006\007\uffe1\015\uffe1\001\002" +
    "\000\006\007\uffe3\015\uffe3\001\002\000\020\002\uffe4\062" +
    "\uffe4\074\uffe4\111\uffe4\112\uffe4\115\uffe4\126\uffe4\001\002" +
    "\000\016\003\u01f7\006\u01f9\015\uffc3\021\143\024\uffc3\062" +
    "\u01f8\001\002\000\006\003\155\027\156\001\002\000\006" +
    "\003\155\027\156\001\002\000\016\003\151\007\ufff2\074" +
    "\022\111\005\112\006\115\020\001\002\000\004\007\u01ff" +
    "\001\002\000\006\007\ufff0\015\153\001\002\000\004\007" +
    "\u01fd\001\002\000\006\003\155\027\156\001\002\000\020" +
    "\002\uffef\062\uffef\074\uffef\111\uffef\112\uffef\115\uffef\126" +
    "\uffef\001\002\000\006\003\155\027\156\001\002\000\020" +
    "\002\ufff1\062\ufff1\074\ufff1\111\ufff1\112\ufff1\115\ufff1\126" +
    "\ufff1\001\002\000\020\002\uffe6\062\uffe6\074\uffe6\111\uffe6" +
    "\112\uffe6\115\uffe6\126\uffe6\001\002\000\020\002\uffe8\062" +
    "\uffe8\074\uffe8\111\uffe8\112\uffe8\115\uffe8\126\uffe8\001\002" +
    "\000\004\002\001\001\002\000\016\003\u0205\006\u0207\015" +
    "\uffc3\021\143\024\uffc3\062\u0206\001\002\000\010\003\155" +
    "\024\u0210\027\156\001\002\000\006\003\155\027\156\001" +
    "\002\000\016\003\151\007\ufff4\074\022\111\005\112\006" +
    "\115\020\001\002\000\004\007\u020d\001\002\000\006\007" +
    "\ufff6\015\153\001\002\000\004\007\u020b\001\002\000\006" +
    "\003\155\027\156\001\002\000\020\002\ufff5\062\ufff5\074" +
    "\ufff5\111\ufff5\112\ufff5\115\ufff5\126\ufff5\001\002\000\006" +
    "\003\155\027\156\001\002\000\020\002\ufff3\062\ufff3\074" +
    "\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001\002\000\020" +
    "\002\uffe7\062\uffe7\074\uffe7\111\uffe7\112\uffe7\115\uffe7\126" +
    "\uffe7\001\002\000\020\002\uffe9\062\uffe9\074\uffe9\111\uffe9" +
    "\112\uffe9\115\uffe9\126\uffe9\001\002\000\020\002\uffea\062" +
    "\uffea\074\uffea\111\uffea\112\uffea\115\uffea\126\uffea\001\002" +
    "\000\004\062\u0216\001\002\000\004\062\u0215\001\002\000" +
    "\020\002\ufff7\062\ufff7\074\ufff7\111\ufff7\112\ufff7\115\ufff7" +
    "\126\ufff7\001\002\000\010\003\u01f7\006\u01f9\062\u01f8\001" +
    "\002\000\010\003\u0205\006\u0207\062\u0206\001\002\000\014" +
    "\003\uff4f\007\uff4f\015\uff4f\024\uff4f\062\uff4f\001\002\000" +
    "\014\003\uff50\007\uff50\015\uff50\024\uff50\062\uff50\001\002" +
    "\000\014\003\uff51\007\uff51\015\uff51\024\uff51\062\uff51\001" +
    "\002\000\020\002\000\062\016\074\022\111\005\112\006" +
    "\115\020\126\u0213\001\002\000\006\002\ufffb\062\025\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0219\000\020\002\011\004\006\014\010\024\016\027" +
    "\003\030\007\053\013\001\001\000\014\004\u01ea\014\010" +
    "\024\016\030\u0219\053\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\u0211\024\u0213" +
    "\053\013\001\001\000\004\023\172\001\001\000\002\001" +
    "\001\000\004\023\166\001\001\000\002\001\001\000\004" +
    "\023\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\022\001\001\000\002\001\001" +
    "\000\004\023\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\052\032\035\033\050\034" +
    "\042\036\051\001\001\000\002\001\001\000\010\022\052" +
    "\032\035\033\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\052\032\035\033\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\052\032\035\033" +
    "\050\034\042\036\117\001\001\000\004\015\071\001\001" +
    "\000\002\001\001\000\010\022\052\032\035\033\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\052" +
    "\032\035\033\112\001\001\000\002\001\001\000\004\016" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\052\032\035\033\050\034\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\052\032" +
    "\035\033\072\001\001\000\002\001\001\000\010\022\052" +
    "\032\035\033\110\001\001\000\010\022\052\032\035\033" +
    "\106\001\001\000\010\022\052\032\035\033\104\001\001" +
    "\000\010\022\052\032\035\033\102\001\001\000\010\022" +
    "\052\032\035\033\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\052\032\035\033\050\034\042\036\130\037\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\052" +
    "\032\035\033\050\034\042\036\131\001\001\000\004\016" +
    "\057\001\001\000\004\016\057\001\001\000\014\022\052" +
    "\032\035\033\050\034\042\036\137\001\001\000\002\001" +
    "\001\000\014\022\052\032\035\033\050\034\042\036\135" +
    "\001\001\000\004\016\057\001\001\000\002\001\001\000" +
    "\004\016\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\052\032\035\033\050\034\042\036\143\001" +
    "\001\000\004\016\057\001\001\000\002\001\001\000\006" +
    "\014\147\025\151\001\001\000\004\052\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u01ef\001\001\000\004\052\156\001\001\000\010\004" +
    "\006\014\161\027\u01ec\001\001\000\012\004\006\014\161" +
    "\027\157\035\160\001\001\000\002\001\001\000\010\004" +
    "\u01ea\014\161\035\u01e9\001\001\000\042\003\177\006\174" +
    "\010\223\011\204\012\224\021\225\022\052\026\210\031" +
    "\213\032\035\033\050\034\042\036\211\040\203\041\176" +
    "\050\222\001\001\000\004\023\172\001\001\000\004\023" +
    "\166\001\001\000\004\023\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\052\032\035\033" +
    "\050\034\042\036\u01e8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\052" +
    "\032\035\033\050\034\042\036\u01aa\001\001\000\002\001" +
    "\001\000\010\022\052\032\035\033\u0174\001\001\000\002" +
    "\001\001\000\004\016\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\052\032\035\033\050\034\042" +
    "\036\u0170\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\052\032\035\033\050\034\042\036\374\001\001" +
    "\000\002\001\001\000\004\054\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\052\032\035\033\050\034\042\036\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\052" +
    "\032\035\033\050\034\042\036\262\001\001\000\014\022" +
    "\052\032\035\033\050\034\042\036\260\001\001\000\014" +
    "\022\052\032\035\033\050\034\042\036\256\001\001\000" +
    "\014\022\052\032\035\033\050\034\042\036\254\001\001" +
    "\000\016\022\052\031\236\032\035\033\050\034\042\036" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\057\001\001\000\014\022\052\032\035\033\050\034" +
    "\042\036\252\001\001\000\014\022\052\032\035\033\050" +
    "\034\042\036\251\001\001\000\014\022\052\032\035\033" +
    "\050\034\042\036\250\001\001\000\014\022\052\032\035" +
    "\033\050\034\042\036\247\001\001\000\014\022\052\032" +
    "\035\033\050\034\042\036\246\001\001\000\004\016\057" +
    "\001\001\000\004\016\057\001\001\000\004\016\057\001" +
    "\001\000\004\016\057\001\001\000\004\016\057\001\001" +
    "\000\002\001\001\000\004\016\057\001\001\000\002\001" +
    "\001\000\004\016\057\001\001\000\002\001\001\000\004" +
    "\016\057\001\001\000\002\001\001\000\004\016\057\001" +
    "\001\000\004\035\332\001\001\000\004\035\265\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\225\022\052\026\210\031\213\032\035\033\050\034\042" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\004\054\271\001\001\000\002\001\001\000\020" +
    "\012\276\022\052\031\213\032\035\033\050\034\042\036" +
    "\211\001\001\000\020\012\273\022\052\031\213\032\035" +
    "\033\050\034\042\036\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\303\057" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\305\001\001\000\044\003\177\006\174\010\223\011" +
    "\204\012\224\021\225\022\052\026\210\031\213\032\035" +
    "\033\050\034\042\036\211\040\203\041\176\050\222\060" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\327\022\052\031\213\032\035\033\050\034\042\036" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\316\022\052\031\213\032\035\033\050\034\042\036" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\177\006\174" +
    "\010\223\011\204\012\224\021\225\022\052\026\210\031" +
    "\213\032\035\033\050\034\042\036\211\040\203\041\176" +
    "\050\222\001\001\000\002\001\001\000\004\054\271\001" +
    "\001\000\020\012\336\022\052\031\213\032\035\033\050" +
    "\034\042\036\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\343" +
    "\022\052\031\213\032\035\033\050\034\042\036\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\057\001\001\000\002\001\001\000\010\022\377" +
    "\032\u0102\046\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\377\032\u0102\046\u012c\001\001\000\004\042" +
    "\u0106\001\001\000\006\043\u0108\044\u0109\001\001\000\004" +
    "\022\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u010c\001\001\000\002\001\001\000\004\035\u010f" +
    "\001\001\000\004\035\u0114\001\001\000\004\035\u0111\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\225\022\052\026\210\031\213\032\035\033\050\034" +
    "\042\036\211\040\203\041\176\050\222\001\001\000\004" +
    "\035\u0112\001\001\000\042\003\177\006\174\010\223\011" +
    "\204\012\224\021\225\022\052\026\210\031\213\032\035" +
    "\033\050\034\042\036\211\040\203\041\176\050\222\001" +
    "\001\000\042\003\177\006\174\010\223\011\204\012\224" +
    "\021\225\022\052\026\210\031\213\032\035\033\050\034" +
    "\042\036\211\040\203\041\176\050\222\001\001\000\002" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\225\022\052\026\210\031\213\032\035\033\050" +
    "\034\042\036\211\040\203\041\176\050\222\001\001\000" +
    "\002\001\001\000\004\035\u0118\001\001\000\004\035\u0119" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\225\022\052\026\210\031\213\032\035\033\050" +
    "\034\042\036\211\040\203\041\176\050\222\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\225" +
    "\022\052\026\210\031\213\032\035\033\050\034\042\036" +
    "\211\040\203\041\176\050\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0127\001" +
    "\001\000\004\035\u0123\001\001\000\004\035\u0120\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\225\022\052\026\210\031\213\032\035\033\050\034\042" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\004\035\u0124\001\001\000\042\003\177\006\174" +
    "\010\223\011\204\012\224\021\225\022\052\026\210\031" +
    "\213\032\035\033\050\034\042\036\211\040\203\041\176" +
    "\050\222\001\001\000\042\003\177\006\174\010\223\011" +
    "\204\012\224\021\225\022\052\026\210\031\213\032\035" +
    "\033\050\034\042\036\211\040\203\041\176\050\222\001" +
    "\001\000\002\001\001\000\004\035\u0128\001\001\000\042" +
    "\003\177\006\174\010\223\011\204\012\224\021\225\022" +
    "\052\026\210\031\213\032\035\033\050\034\042\036\211" +
    "\040\203\041\176\050\222\001\001\000\042\003\177\006" +
    "\174\010\223\011\204\012\224\021\225\022\052\026\210" +
    "\031\213\032\035\033\050\034\042\036\211\040\203\041" +
    "\176\050\222\001\001\000\002\001\001\000\004\035\u012b" +
    "\001\001\000\042\003\177\006\174\010\223\011\204\012" +
    "\224\021\225\022\052\026\210\031\213\032\035\033\050" +
    "\034\042\036\211\040\203\041\176\050\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\377\032\u0102" +
    "\046\u0148\001\001\000\002\001\001\000\010\022\377\032" +
    "\u0102\046\u0147\001\001\000\010\022\377\032\u0102\046\u0146" +
    "\001\001\000\010\022\377\032\u0102\046\u0145\001\001\000" +
    "\010\022\377\032\u0102\046\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\377\032\u0102\046\u0143\001" +
    "\001\000\010\022\377\032\u0102\046\u0141\001\001\000\010" +
    "\022\377\032\u0102\046\u013f\001\001\000\010\022\377\032" +
    "\u0102\046\u013d\001\001\000\010\022\377\032\u0102\046\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\022" +
    "\052\032\035\033\050\034\042\036\130\037\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0150\001\001\000\006\043\u0151" +
    "\044\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0155\001\001\000\006\043\u0156" +
    "\044\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u0164\001\001\000\004\042\u015a\001\001\000\006" +
    "\043\u015b\044\u0109\001\001\000\004\042\u015d\001\001\000" +
    "\002\001\001\000\010\043\u015e\044\u0109\051\u015f\001\001" +
    "\000\006\043\u015e\051\u0163\001\001\000\004\042\u0161\001" +
    "\001\000\002\001\001\000\004\044\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\u0165\044\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0169\001\001\000\006\043\u016a\044\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u016d" +
    "\001\001\000\006\043\u016e\044\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\u017a" +
    "\022\052\031\213\032\035\033\050\034\042\036\211\001" +
    "\001\000\004\035\u019e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u017d\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\225" +
    "\022\052\026\210\031\213\032\035\033\050\034\042\036" +
    "\211\040\203\041\176\050\222\001\001\000\004\007\u0180" +
    "\001\001\000\004\050\u0182\001\001\000\002\001\001\000" +
    "\004\035\u0193\001\001\000\002\001\001\000\004\035\u0190" +
    "\001\001\000\002\001\001\000\020\012\u0186\022\052\031" +
    "\213\032\035\033\050\034\042\036\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u018d\001\001\000" +
    "\004\035\u018a\001\001\000\042\003\177\006\174\010\223" +
    "\011\204\012\224\021\225\022\052\026\210\031\213\032" +
    "\035\033\050\034\042\036\211\040\203\041\176\050\222" +
    "\001\001\000\004\007\u018c\001\001\000\002\001\001\000" +
    "\042\003\177\006\174\010\223\011\204\012\224\021\225" +
    "\022\052\026\210\031\213\032\035\033\050\034\042\036" +
    "\211\040\203\041\176\050\222\001\001\000\004\007\u018f" +
    "\001\001\000\002\001\001\000\042\003\177\006\174\010" +
    "\223\011\204\012\224\021\225\022\052\026\210\031\213" +
    "\032\035\033\050\034\042\036\211\040\203\041\176\050" +
    "\222\001\001\000\004\007\u0192\001\001\000\002\001\001" +
    "\000\042\003\177\006\174\010\223\011\204\012\224\021" +
    "\225\022\052\026\210\031\213\032\035\033\050\034\042" +
    "\036\211\040\203\041\176\050\222\001\001\000\002\001" +
    "\001\000\004\035\u0196\001\001\000\042\003\177\006\174" +
    "\010\223\011\204\012\224\021\225\022\052\026\210\031" +
    "\213\032\035\033\050\034\042\036\211\040\203\041\176" +
    "\050\222\001\001\000\004\007\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u019b\001\001\000\042" +
    "\003\177\006\174\010\223\011\204\012\224\021\225\022" +
    "\052\026\210\031\213\032\035\033\050\034\042\036\211" +
    "\040\203\041\176\050\222\001\001\000\004\007\u019d\001" +
    "\001\000\002\001\001\000\042\003\177\006\174\010\223" +
    "\011\204\012\224\021\225\022\052\026\210\031\213\032" +
    "\035\033\050\034\042\036\211\040\203\041\176\050\222" +
    "\001\001\000\004\007\u01a0\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u01a3\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\225\022\052\026" +
    "\210\031\213\032\035\033\050\034\042\036\211\040\203" +
    "\041\176\050\222\001\001\000\004\007\u01a5\001\001\000" +
    "\002\001\001\000\004\035\u01a7\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\225\022\052\026" +
    "\210\031\213\032\035\033\050\034\042\036\211\040\203" +
    "\041\176\050\222\001\001\000\004\007\u01a9\001\001\000" +
    "\002\001\001\000\004\016\057\001\001\000\002\001\001" +
    "\000\022\012\u01b1\022\052\031\213\032\035\033\050\034" +
    "\042\036\211\047\u01bc\001\001\000\022\012\u01b1\022\052" +
    "\031\213\032\035\033\050\034\042\036\211\047\u01ae\001" +
    "\001\000\002\001\001\000\020\012\u01b4\022\052\031\213" +
    "\032\035\033\050\034\042\036\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\u01bb\022\052\031\213\032" +
    "\035\033\050\034\042\036\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\u01c6\005\u01c2\012\u01c7\013\u01c5\014\161" +
    "\022\052\031\213\032\035\033\050\034\042\036\211\001" +
    "\001\000\002\001\001\000\004\023\164\001\001\000\004" +
    "\035\u01d6\001\001\000\002\001\001\000\022\005\u01c9\012" +
    "\u01c7\022\052\031\213\032\035\033\050\034\042\036\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\u01cb\012\u01c7\022\052\031\213\032\035" +
    "\033\050\034\042\036\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u01ce\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\225\022\052\026" +
    "\210\031\213\032\035\033\050\034\042\036\211\040\203" +
    "\041\176\050\222\001\001\000\002\001\001\000\004\035" +
    "\u01d4\001\001\000\004\035\u01d2\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\225\022\052\026" +
    "\210\031\213\032\035\033\050\034\042\036\211\040\203" +
    "\041\176\050\222\001\001\000\002\001\001\000\042\003" +
    "\177\006\174\010\223\011\204\012\224\021\225\022\052" +
    "\026\210\031\213\032\035\033\050\034\042\036\211\040" +
    "\203\041\176\050\222\001\001\000\002\001\001\000\042" +
    "\003\177\006\174\010\223\011\204\012\224\021\225\022" +
    "\052\026\210\031\213\032\035\033\050\034\042\036\211" +
    "\040\203\041\176\050\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u01da\001\001\000\042\003\177" +
    "\006\174\010\223\011\204\012\224\021\225\022\052\026" +
    "\210\031\213\032\035\033\050\034\042\036\211\040\203" +
    "\041\176\050\222\001\001\000\002\001\001\000\022\005" +
    "\u01dd\012\u01c7\022\052\031\213\032\035\033\050\034\042" +
    "\036\211\001\001\000\002\001\001\000\022\005\u01df\012" +
    "\u01c7\022\052\031\213\032\035\033\050\034\042\036\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u01e2\001\001\000\042\003\177\006\174\010\223\011\204" +
    "\012\224\021\225\022\052\026\210\031\213\032\035\033" +
    "\050\034\042\036\211\040\203\041\176\050\222\001\001" +
    "\000\002\001\001\000\004\035\u01e5\001\001\000\042\003" +
    "\177\006\174\010\223\011\204\012\224\021\225\022\052" +
    "\026\210\031\213\032\035\033\050\034\042\036\211\040" +
    "\203\041\176\050\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\057\001\001\000\042\003\177\006" +
    "\174\010\223\011\204\012\224\021\225\022\052\026\210" +
    "\031\213\032\035\033\050\034\042\036\211\040\203\041" +
    "\176\050\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\u01ea\014\161\035\u01ed\001\001\000\042\003" +
    "\177\006\174\010\223\011\204\012\224\021\225\022\052" +
    "\026\210\031\213\032\035\033\050\034\042\036\211\040" +
    "\203\041\176\050\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u0201\001\001\000\004\052\u0200\001\001\000" +
    "\010\014\147\025\u01fa\063\u01f9\001\001\000\002\001\001" +
    "\000\004\064\u01fb\001\001\000\002\001\001\000\004\052" +
    "\u01fd\001\001\000\002\001\001\000\004\052\u01ff\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u0210\001\001" +
    "\000\004\052\u020e\001\001\000\010\014\147\025\u0208\062" +
    "\u0207\001\001\000\002\001\001\000\004\061\u0209\001\001" +
    "\000\002\001\001\000\004\052\u020b\001\001\000\002\001" +
    "\001\000\004\052\u020d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\u0211\024\u0213\053\013\001\001" +
    "\000\004\023\164\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Tabla de símbolos
    //private HashMap<String, Object> symbolTable = new HashMap<>();
    private SymbolTable symbolTable = new SymbolTable();
    private LabelGenerator labelGenerator = new LabelGenerator();
    public String code = "";

    // Para saber si la variable es global o no
    private boolean isGlobal = true;
    private String currentFunction = null; 

    // Pila semántica
    private PilaS pilaSemantica = new PilaS();
    private PilaS pilaSemanticaVar = new PilaS();
    
    // Pila semántica para contextos (if, while, etc.)
    private Stack<Integer> contextStack = new Stack<>();
    private int nextLabel = 1;

    public SymbolTable getSymbolTable() {
        return symbolTable;
    }

    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String peek = (stack.elementAt(stack.size() - 3) != null) ? (((Symbol) stack.elementAt(stack.size() - 3)).value).toString() : "símbolo desconocido";
        Object left = (stack.elementAt(stack.size() - 3) != null) ? (((Symbol) stack.elementAt(stack.size() - 3)).left) : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado." + peek + " " + left;
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la estructura del programa."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= GLOBAL_DECLARACIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la estructura del programa."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

        isGlobal = false;
        currentFunction = (String) id;

        if (params instanceof List<?>) {
            String c= "parameter";
            try {
                for (List<String> param : (List<List<String>>) params) {
                    if (param.size() == 2) {
                        String type = param.get(0);
                        String identifier = param.get(1);

                        RS nuevoSimbolo = new RS((String) identifier, (String) type);
                        pilaSemanticaVar.push(nuevoSimbolo);

                        RS simbolo = pilaSemanticaVar.pop();
                        symbolTable.addVar(simbolo.getValue(), simbolo.getType(), c, ((Symbol) stack.peek()).left, "variable", currentFunction);
                    } else {
                        // Manejar el error de la lista de parámetros
                        System.err.println("Error: param no es una lista de dos elementos.");
                    }
                }
            } catch (ClassCastException e) {
                // Manejar el error de casting
                System.err.println("Error: params no es una lista de listas de cadenas.");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS NT$0 RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 
        isGlobal = false;
        currentFunction = (String) id;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN NT$1 RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 
        isGlobal = false;
        currentFunction = (String) id;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN NT$2 RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

        System.out.println("Parametros: " + params); 
        isGlobal = false;
        currentFunction = (String) id;
        if (params instanceof List<?>) {
            String context= "parameter";
            try {
                for (List<String> param : (List<List<String>>) params) {
                    if (param.size() == 2) {
                        String type = param.get(0);
                        String identifier = param.get(1);

                        RS nuevoSimbolo = new RS((String) identifier, (String) type);
                        pilaSemanticaVar.push(nuevoSimbolo);

                        RS simbolo = pilaSemanticaVar.pop();
                        symbolTable.addVar(simbolo.getValue(), simbolo.getType(), context, ((Symbol) stack.peek()).left, "variable", currentFunction);
                    } else {
                        // Manejar el error de la lista de parámetros
                        System.err.println("Error: param no es una lista de dos elementos.");
                    }
                }
            } catch (ClassCastException e) {
                // Manejar el error de casting
                System.err.println("Error: params no es una lista de listas de cadenas.");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS NT$3 RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= ERRORES_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_FUNCION ::= LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_FUNCION ::= LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_FUNCION ::= error GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en las llaves de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ERRORES_FUNCION ::= T_DATO IDENTIFIER error CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ERRORES_FUNCION ::= T_DATO IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error no se aceptan variables globales"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ERRORES_FUNCION ::= VOID IDENTIFIER error CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ERRORES_FUNCION ::= T_DATO IDENTIFIER IDENTIFIER CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ERRORES_FUNCION ::= VOID IDENTIFIER IDENTIFIER CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ERRORES_FUNCION ::= IDENTIFIER LPAREN PARAMETROS RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en la declaración de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ERRORES_FUNCION ::= IDENTIFIER LPAREN RPAREN CUERPO_FUNCION 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en la declaración de la función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_FUNCION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<List<String>> params = new ArrayList<>();
        List<String> param = new ArrayList<>();
        param.add((String) type);
        param.add((String) id);
        params.add(param);
        RESULT = params;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<String> param = new ArrayList<>();
        param.add((String) type);
        param.add((String) id);
        ((List<List<String>>) params).add(param);
        RESULT = params;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS ::= error IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS ::= T_DATO 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS ::= PARAMETROS COMMA T_DATO 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS ::= PARAMETROS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la coma de los parametros."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		
        RS rs_while = pilaSemantica.searchContext("while");
        if (rs_while == null) {
            System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": break fuera de una estructura iterativa.");
        } else {
            code += "JMP " + rs_while.getLabel(1) + "\n";
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		
        RS rs_while = pilaSemantica.searchContext("while");
        if (rs_while == null) {
            System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": continue fuera de una estructura iterativa.");
        } else {
            code += "JMP " + rs_while.getLabel(0) + "\n";
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTROL_STATEMENT ::= RETURN EXPRESION_ARITMETICA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTROL_STATEMENT ::= RETURN EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTROL_STATEMENT ::= RETURN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		int id_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        String context = isGlobal ? "global" : "local";
        if (id_list instanceof List<?>) {
            String categoria = "variable";
            try {
                for (String id : (List<String>) id_list) {
                    RS nuevoSimbolo = new RS((String) id, (String) id_type);
                    pilaSemanticaVar.push(nuevoSimbolo);

                    RS simbolo = pilaSemanticaVar.pop();
                    symbolTable.addVar(simbolo.getValue(), simbolo.getType(), context, ((Symbol) stack.peek()).left, categoria, currentFunction);
                }
                
            } catch (ClassCastException e) {
                // Manejar el error de casting
                System.err.println("Error: id_list no es una lista de cadenas.");
            }
        } else if (id_list instanceof String) {
            String categoria = "variable";
            for (String id : (List<String>) id_list) {
                    RS nuevoSimbolo = new RS((String) id, (String) id_type);
                    pilaSemanticaVar.push(nuevoSimbolo);
                    RS simbolo = pilaSemanticaVar.pop();
                    symbolTable.addVar(simbolo.getValue(), simbolo.getType(), context, ((Symbol) stack.peek()).left, categoria, currentFunction);
                }
                
        } else {
            // Manejar el caso donde id_list no es ni una lista ni una cadena
            System.err.println("Error: id_list no es una instancia de List ni de String.");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		int id_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String context = isGlobal ? "global" : "local";
        if (id_list instanceof List<?>) {
            String categoria = "constante";
            try {
                
                for (String id : (List<String>) id_list) {
                    RS nuevoSimbolo = new RS((String) id, (String) id_type);
                    pilaSemanticaVar.push(nuevoSimbolo);
                    

                    //symbolTable.addVar(id, (String) id_type, context, ((Symbol) stack.peek()).left, currentFunction);
                
                    RS simbolo = pilaSemanticaVar.pop();
                    symbolTable.addVar(simbolo.getValue(), simbolo.getType(), context, ((Symbol) stack.peek()).left, categoria, currentFunction);
                }
            } catch (ClassCastException e) {
                // Manejar el error de casting
                System.err.println("Error: id_list no es una lista de cadenas.");
            }
        } else if (id_list instanceof String) {
            String categoria = "constante";
            for (String id : (List<String>) id_list) {
                    RS nuevoSimbolo = new RS((String) id, (String) id_type);
                    pilaSemanticaVar.push(nuevoSimbolo);
                
                    RS simbolo = pilaSemanticaVar.pop();
                    symbolTable.addVar(simbolo.getValue(), simbolo.getType(), context, ((Symbol) stack.peek()).left, categoria, currentFunction);
                }
        } else {
            // Manejar el caso donde id_list no es ni una lista ni una cadena
            System.err.println("Error: id_list no es una instancia de List ni de String.");
        }
    
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_DATO SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador de la variable en la declaración."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= T_DATO error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= error ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en la declaración."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= CONST T_DATO SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador de la variable en la declaración."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<String> ids = new ArrayList<>();
                ids.add((String) id);
                RESULT = ids;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ((List<String>) id_list).add((String) id);
                RESULT = id_list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                ((List<String>) id_list).add((String) id);
                RESULT = id_list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                //System.out.println("Identificador: " + id);
                RESULT = id;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ESTRUCTURA_IF ::= ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (e1 != null && e2 != null) {
            String e1Code = "";
            if (((RS) e2).getType() == "register") {
                code += "POP EBX\n";
            }
            if (((RS) e1).getType() == "const") {
                e1Code = "MOV EAX, " + ((RS) e1).getValue();
            } else if (((RS) e1).getType() == "register") {
                e1Code = "POP EAX";
            } else {
                e1Code = "MOV EAX, [" + ((RS) e1).getValue() + "]";
            }
            String e2Code = "";
            if (((RS) e2).getType() == "const") {
                e2Code = ((RS) e2).getValue();
            } else if (((RS) e2).getType() == "register") {
                e2Code = "EBX";
            } else {
                e2Code = "[" + ((RS) e2).getValue() + "]";
            }
            code += e1Code + "\nCMP EAX, " + e2Code + "\n";
            RS res = new RS(String.valueOf(op), "op");
            pilaSemantica.push(res);
            RESULT = res;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Múltiples else en estructura if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ESTRUCTURA_ELSE ::= ELSE error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del else."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ESTRUCTURA_ELSE ::= ELSE ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ESTRUCTURA_WHILE ::= WHILE INICIO_WHILE EXPRESIONES FIN_CONDICION_WHILE CUERPO_WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INICIO_WHILE ::= LPAREN 
            {
              Object RESULT =null;
		
    String label = labelGenerator.generateLabel();
    code += label + ":\n";
    RS rs = new RS("while", "while");
    rs.addLabel(label);
    rs.addLabel(labelGenerator.generateLabel());
    pilaSemantica.push(rs);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INICIO_WHILE ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FIN_CONDICION_WHILE ::= RPAREN 
            {
              Object RESULT =null;
		
        RS rsD0 = pilaSemantica.pop();
        String exitLabel = pilaSemantica.peek().getLabel(1);
        String op = rsD0.getValue();
        if (op.equals("==")) {
                code += "JNE " + exitLabel + "\n";
            } else if (op.equals("!=")) {
                code += "JE " + exitLabel + "\n";
            } else if (op.equals("<")) {
                code += "JGE " + exitLabel + "\n";
            } else if (op.equals(">")) {
                code += "JLE " + exitLabel + "\n";
            }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIN_CONDICION_WHILE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FIN_CONDICION_WHILE ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de cierre en el while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIN_CONDICION_WHILE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO_WHILE ::= INICIO_SENTENCIA_WHILE SENTENCIAS CIERRE_SENTENCIA_WHILE 
            {
              Object RESULT =null;
		
    RS rs_while = pilaSemantica.pop();
    code += "JMP " + rs_while.getLabel(0) + "\n";
    code += rs_while.getLabel(1) + ":\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_WHILE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INICIO_SENTENCIA_WHILE ::= LCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_SENTENCIA_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INICIO_SENTENCIA_WHILE ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta llave de apertura en el while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_SENTENCIA_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CIERRE_SENTENCIA_WHILE ::= RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CIERRE_SENTENCIA_WHILE",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DO_WHILE ::= DO error SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DO_WHILE ::= DO LCURLY SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta palabra reservada while antes de la condición."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DO_WHILE ::= DO error SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan ambas llaves en el do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ESTRUCTURA_FOR ::= FOR LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la sentencia del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ESTRUCTURA_FOR ::= FOR error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ESTRUCTURA_FOR ::= FOR LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ESTRUCTURA_FOR ::= FOR error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "No puede haber una sola expresión."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_FOR ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SWITCHs ::= SWITCH LPAREN error RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN error CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SWITCHs ::= SWITCH error RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SWITCHs ::= SWITCH LPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SWITCHs ::= SWITCH error LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES LISTA_DEFAULT CASES RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Múltiples definiciones de default en un switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASE_STMT ::= CASE LITERALES COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CASE_STMT ::= CASE LITERALES COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CASE_STMT ::= CASE error COLON SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Error en la condición del case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CASE_STMT ::= CASE error COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CASE_STMT ::= CASE LITERALES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta dos puntos en el case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASE_STMT ::= CASE LITERALES SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Falta dos puntos en el case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DEFAULT_STMT ::= DEFAULT COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DEFAULT_STMT ::= DEFAULT LITERALES COLON SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Default no debe tener literal."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DEFAULT_STMT ::= DEFAULT LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta dos puntos en el default."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DEFAULT_STMT ::= DEFAULT error SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.elementAt(stack.size() - 2)), "Error en el default."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DEFAULT_STMT ::= DEFAULT error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el default."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LISTA_DEFAULT ::= DEFAULT_STMT LISTA_DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DEFAULT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LISTA_DEFAULT ::= DEFAULT_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DEFAULT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // READ_WRITE ::= READ error IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // READ_WRITE ::= READ LPAREN IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // READ_WRITE ::= READ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan los paréntesis para la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // READ_WRITE ::= READ error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // READ_WRITE ::= READ LPAREN error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // READ_WRITE ::= WRITE error LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // READ_WRITE ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // READ_WRITE ::= WRITE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta una expresión entre los paréntesis"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // READ_WRITE ::= READ SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en la llamada read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // READ_WRITE ::= WRITE SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en la llamada write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LISTA_EXPRESIONES ::= COMMA EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // T_DATO ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // T_DATO ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // T_DATO ::= LONG 
            {
              Object RESULT =null;
		 RESULT = "long"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // T_DATO ::= SHORT 
            {
              Object RESULT =null;
		 RESULT = "short"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;
		 RESULT = "int long"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;
		 RESULT = "int short"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;
		 RESULT = "long int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;
		 RESULT = "short int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e ;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ARGUMENTOS ::= ARGUMENTOS error EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ARGUMENTOS ::= ARGUMENTOS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ARGUMENTOS ::= COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) + Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e1).getType() == "register") {
                    newCode += "POP EAX\nMOV EBX, EAX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if (((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nADD EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if (((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode = "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) - Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e1).getType() == "register") {
                    newCode += "POP EAX\nMOV EBX, EAX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if (((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nSUB EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if (((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) * Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e1).getType() == "register") {
                    newCode += "POP EBX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if(((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nIMUL EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if(((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) / Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e1).getType() == "register") {
                    newCode += "POP EBX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if(((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nIDIV EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if(((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (l != null) {
            RESULT = new RS(String.valueOf(l), "const");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // EXPRESION_ARITMETICA ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // EXPRESION_ARITMETICA ::= TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // EXPRESION_ARITMETICA ::= DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // EXPRESION_ARITMETICA ::= PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // EXPRESION_ARITMETICA ::= MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // EXPRESION_ARITMETICA ::= LPAREN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en paréntesis de expresión."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) + Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e2).getType() == "register") {
                    newCode += "POP EBX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if(((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                code += "\nADD EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if(((RS) e2).getType() == "register") {
                    newCode += "EBX";
                }
                else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) - Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e2).getType() == "register") {
                    newCode += "POP EBX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if(((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nSUB EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if(((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) * Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e2).getType() == "register") {
                    newCode += "POP EBX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } else if (((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nIMUL EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if(((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(e1 != null && e2 != null) {
            if (((RS) e1).getType() == "const" && ((RS) e2).getType() == "const") {
                RESULT = new RS(String.valueOf(Integer.parseInt(((RS) e1).getValue()) / Integer.parseInt(((RS) e2).getValue())), "const");
            } else {
                String newCode = "";
                if (((RS) e2).getType() == "register") {
                    newCode += "POP EBX\n";
                }
                if (((RS) e1).getType() == "const") {
                    newCode += "MOV EAX, " + ((RS) e1).getValue();
                } if (((RS) e1).getType() == "register") {
                    newCode += "POP EAX";
                } else {
                    newCode += "MOV EAX, [" + ((RS) e1).getValue() + "]"; // e1 is a memory address 
                }
                newCode += "\nIDIV EAX, ";
                if (((RS) e2).getType() == "const") {
                    newCode += ((RS) e2).getValue();
                } else if(((RS) e2).getType() == "register") {
                    newCode += "EBX";
                } else {
                    newCode += "[" + ((RS) e2).getValue() + "]"; // e2 is a memory address
                }
                newCode += "\nPUSH EAX\n";
                code += newCode;
                RESULT = new RS("", "register");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(id != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (l != null) {
            RESULT = new RS(String.valueOf(l), "const");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // EXPRESIONES_NUMERICAS ::= error PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // EXPRESIONES_NUMERICAS ::= error MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // EXPRESIONES_NUMERICAS ::= error TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // EXPRESIONES_NUMERICAS ::= error DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // EXPRESIONES_NUMERICAS ::= error MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // EXPRESIONES_NUMERICAS ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if (id != null){
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                code += "INC [" + (String) id + "]\n";
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if (id != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                code += "DEC [" + (String) id + "]\n";
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                code += "INC [" + (String) id + "]\n";
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                code += "DEC [" + (String) id + "]\n";
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INCREMENTO_DECREMENTO ::= DEC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INCREMENTO_DECREMENTO ::= INC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null && e != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                String newCode = "ADD [" + (String) id + "]";
                if (((RS) e).getType() == "const") {
                    newCode += ", " + ((RS) e).getValue() + "\n";
                } else if (((RS) e).getType() == "register") {
                    newCode = "POP EAX\n" + newCode + ", EAX\n";
                } else {
                    newCode = "MOV EAX, [" + ((RS) e).getValue() + "]\n" + newCode + ", EAX\n";
                }
                code += newCode;
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null && e != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                String newCode = "SUB [" + (String) id + "]";
                if (((RS) e).getType() == "const") {
                    newCode += ", " + ((RS) e).getValue() + "\n";
                } else if (((RS) e).getType() == "register") {
                    newCode = "POP EAX\n" + newCode + ", EAX\n";
                } else {
                    newCode = "MOV EAX, [" + ((RS) e).getValue() + "]\n" + newCode + ", EAX\n";
                }
                code += newCode;
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null && e != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                String newCode = "IMUL [" + (String) id + "]";
                if (((RS) e).getType() == "const") {
                    newCode += ", " + ((RS) e).getValue() + "\n";
                } else if (((RS) e).getType() == "register") {
                    newCode = "POP EAX\n" + newCode + ", EAX\n";
                } else {
                    newCode = "MOV EAX, [" + ((RS) e).getValue() + "]\n" + newCode + ", EAX\n";
                }
                code += newCode;
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null && e != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                String newCode = "IDIV [" + (String) id + "]";
                if (((RS) e).getType() == "const") {
                    newCode += ", " + ((RS) e).getValue() + "\n";
                } else if (((RS) e).getType() == "register") {
                    newCode = "POP EAX\n" + newCode + ", EAX\n";
                } else {
                    newCode = "MOV EAX, [" + ((RS) e).getValue() + "]\n" + newCode + ", EAX\n";
                }
                code += newCode;
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null && e != null) {
            if (!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else{
                String newCode = "MOV [" + (String) id + "]";
                if (((RS) e).getType() == "const") {
                    newCode += ", " + ((RS) e).getValue() + "\n";
                } else if (((RS) e).getType() == "register") {
                    newCode = "POP EAX\n" + newCode + ", EAX\n";
                } else {
                    newCode = "MOV EAX, [" + ((RS) e).getValue() + "]\n" + newCode + ", EAX\n";
                }
                code += newCode;
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (id != null && e != null) {
            if(!symbolTable.varExists((String) id)) {
                System.out.println("Error semántico en la linea "+ ((Symbol) stack.peek()).left +": la variable '" + id + "' no ha sido declarada.");
            }
            else {
                String newCode = "MOV [" + (String) id + "]";
                if (((RS) e).getType() == "const") {
                    newCode += ", " + ((RS) e).getValue() + "\n";
                } else if (((RS) e).getType() == "register") {
                    newCode = "POP EAX\n" + newCode + ", EAX\n";
                } else {
                    newCode = "MOV EAX, [" + ((RS) e).getValue() + "]\n" + newCode + ", EAX\n";
                }
                code += newCode;
                RESULT = new RS((String) id, "memory");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // EXPRESION_ASIGNACION ::= PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // EXPRESION_ASIGNACION ::= MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // EXPRESION_ASIGNACION ::= TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // EXPRESION_ASIGNACION ::= DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // EXPRESION_ASIGNACION ::= ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '/=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '*=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '-=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // EXPRESION_ASIGNACION ::= EXPRESIONES_LOGICAS PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error antes de '+=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
