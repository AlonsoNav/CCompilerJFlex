
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\030\004\000\002\024\013\000\002\024\012\000" +
    "\002\024\012\000\002\024\013\000\002\024\012\000\002" +
    "\024\011\000\002\024\011\000\002\024\012\000\002\025" +
    "\004\000\002\025\006\000\002\036\003\000\002\036\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\026\004\000\002" +
    "\026\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\004\000\002\004\005\000\002\004\007\000\002\004\006" +
    "\000\002\004\010\000\002\023\003\000\002\023\005\000" +
    "\002\006\012\000\002\012\003\000\002\012\003\000\002" +
    "\037\005\000\002\037\003\000\002\035\005\000\002\035" +
    "\003\000\002\007\013\000\002\007\006\000\002\007\002" +
    "\000\002\010\011\000\002\011\011\000\002\013\012\000" +
    "\002\013\011\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\021\007\000\002\021\006\000\002\021\007\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\040\003\000\002\040\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\034\006\000\002\034\005\000\002\034\003\000\002\034" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\016\074\017\075\015\111\005\112\006\115" +
    "\016\126\013\001\002\000\016\074\017\075\015\111\005" +
    "\112\006\115\016\126\013\001\002\000\010\062\uffc4\112" +
    "\351\115\350\001\002\000\006\062\uffc2\111\347\001\002" +
    "\000\036\072\ufffe\074\ufffe\075\ufffe\076\ufffe\106\ufffe\110" +
    "\ufffe\111\ufffe\112\ufffe\114\ufffe\115\ufffe\126\ufffe\130\ufffe" +
    "\131\ufffe\132\ufffe\001\002\000\016\002\uffff\074\017\111" +
    "\005\112\006\115\016\126\013\001\002\000\004\062\323" +
    "\001\002\000\004\002\322\001\002\000\004\062\110\001" +
    "\002\000\016\002\ufffc\074\ufffc\111\ufffc\112\ufffc\115\ufffc" +
    "\126\ufffc\001\002\000\012\074\017\111\005\112\006\115" +
    "\016\001\002\000\006\062\uffc1\111\020\001\002\000\004" +
    "\062\uffc3\001\002\000\004\062\uffbd\001\002\000\004\062" +
    "\022\001\002\000\006\021\024\024\023\001\002\000\036" +
    "\072\uffe2\074\uffe2\075\uffe2\076\uffe2\106\uffe2\110\uffe2\111" +
    "\uffe2\112\uffe2\114\uffe2\115\uffe2\126\uffe2\130\uffe2\131\uffe2" +
    "\132\uffe2\001\002\000\024\006\037\036\041\037\040\061" +
    "\031\062\035\064\036\065\032\066\042\067\026\001\002" +
    "\000\012\013\052\024\107\034\051\035\046\001\002\000" +
    "\044\004\uffa4\005\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\015\uffa4\017\uffa4\020\uffa4\024\uffa4\034\uffa4\035" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001\002\000\044" +
    "\004\uff98\005\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\015\uff98\017\uff98\020\uff98\024\uff98\034\uff98\035\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\001\002\000\044\004" +
    "\065\005\070\007\uffd8\010\066\011\067\012\064\013\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\024\uffd8\034\uffd8\035\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002\000\044\004\uffa8" +
    "\005\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015" +
    "\uffa8\017\uffa8\020\uffa8\024\uffa8\034\uffa8\035\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\001\002\000\044\004\uffa6\005" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6" +
    "\017\uffa6\020\uffa6\024\uffa6\034\uffa6\035\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\001\002\000\032\007\uffda\013\uffda" +
    "\015\uffda\017\055\020\060\024\uffda\034\uffda\035\uffda\054" +
    "\057\055\054\056\056\057\061\001\002\000\044\004\uff97" +
    "\005\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\015" +
    "\uff97\017\uff97\020\uff97\024\uff97\034\uff97\035\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\001\002\000\052\004\uff9b\005" +
    "\uff9b\006\100\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\015\uff9b\017\uff9b\020\uff9b\024\uff9b\034\uff9b\035\uff9b\036" +
    "\076\037\077\054\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002" +
    "\000\044\004\uffa7\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\015\uffa7\017\uffa7\020\uffa7\024\uffa7\034\uffa7" +
    "\035\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000" +
    "\024\006\037\036\041\037\040\061\031\062\035\064\036" +
    "\065\032\066\042\067\026\001\002\000\004\062\044\001" +
    "\002\000\004\062\043\001\002\000\044\004\uffa5\005\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\017" +
    "\uffa5\020\uffa5\024\uffa5\034\uffa5\035\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\001\002\000\044\004\uff94\005\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\015\uff94\017\uff94" +
    "\020\uff94\024\uff94\034\uff94\035\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\001\002\000\044\004\uff93\005\uff93\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\013\uff93\015\uff93\017\uff93\020" +
    "\uff93\024\uff93\034\uff93\035\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\001\002\000\012\007\047\013\052\034\051\035" +
    "\046\001\002\000\024\006\uffb6\036\uffb6\037\uffb6\061\uffb6" +
    "\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002\000" +
    "\044\004\uff9c\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\015\uff9c\017\uff9c\020\uff9c\024\uff9c\034\uff9c\035" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\024" +
    "\006\037\036\041\037\040\061\031\062\035\064\036\065" +
    "\032\066\042\067\026\001\002\000\024\006\uffb5\036\uffb5" +
    "\037\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\001\002\000\024\006\uffb4\036\uffb4\037\uffb4\061\uffb4" +
    "\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002\000" +
    "\032\007\uffdb\013\uffdb\015\uffdb\017\055\020\060\024\uffdb" +
    "\034\uffdb\035\uffdb\054\057\055\054\056\056\057\061\001" +
    "\002\000\024\006\uffbc\036\uffbc\037\uffbc\061\uffbc\062\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002\000\024\006" +
    "\uffba\036\uffba\037\uffba\061\uffba\062\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\001\002\000\024\006\uffb8\036\uffb8\037" +
    "\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\001\002\000\024\006\uffbb\036\uffbb\037\uffbb\061\uffbb\062" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002\000\024" +
    "\006\uffb9\036\uffb9\037\uffb9\061\uffb9\062\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\001\002\000\024\006\uffb7\036\uffb7" +
    "\037\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\001\002\000\024\006\037\036\041\037\040\061\031" +
    "\062\035\064\036\065\032\066\042\067\026\001\002\000" +
    "\044\004\065\005\070\007\uffd9\010\066\011\067\012\064" +
    "\013\uffd9\015\uffd9\017\uffd9\020\uffd9\024\uffd9\034\uffd9\035" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000\024" +
    "\006\037\036\041\037\040\061\031\062\035\064\036\065" +
    "\032\066\042\067\026\001\002\000\024\006\037\036\041" +
    "\037\040\061\031\062\035\064\036\065\032\066\042\067" +
    "\026\001\002\000\024\006\037\036\041\037\040\061\031" +
    "\062\035\064\036\065\032\066\042\067\026\001\002\000" +
    "\024\006\037\036\041\037\040\061\031\062\035\064\036" +
    "\065\032\066\042\067\026\001\002\000\024\006\037\036" +
    "\041\037\040\061\031\062\035\064\036\065\032\066\042" +
    "\067\026\001\002\000\044\004\uff9f\005\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\015\uff9f\017\uff9f\020\uff9f" +
    "\024\uff9f\034\uff9f\035\uff9f\054\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\001\002\000\044\004\uff9e\005\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\015\uff9e\017\uff9e\020\uff9e\024" +
    "\uff9e\034\uff9e\035\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\001\002\000\044\004\uffa0\005\070\007\uffa0\010\uffa0\011" +
    "\067\012\064\013\uffa0\015\uffa0\017\uffa0\020\uffa0\024\uffa0" +
    "\034\uffa0\035\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001" +
    "\002\000\044\004\uffa1\005\070\007\uffa1\010\uffa1\011\067" +
    "\012\064\013\uffa1\015\uffa1\017\uffa1\020\uffa1\024\uffa1\034" +
    "\uffa1\035\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002" +
    "\000\044\004\uff9d\005\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\015\uff9d\017\uff9d\020\uff9d\024\uff9d\034\uff9d" +
    "\035\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000" +
    "\044\004\uff96\005\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\015\uff96\017\uff96\020\uff96\024\uff96\034\uff96\035" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\001\002\000\044" +
    "\004\uff95\005\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\015\uff95\017\uff95\020\uff95\024\uff95\034\uff95\035\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\001\002\000\026\006" +
    "\037\007\102\036\041\037\040\061\031\062\035\064\036" +
    "\065\032\066\042\067\026\001\002\000\014\007\uffa3\013" +
    "\052\015\uffa3\034\051\035\046\001\002\000\044\004\uff99" +
    "\005\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\015" +
    "\uff99\017\uff99\020\uff99\024\uff99\034\uff99\035\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\001\002\000\006\007\105\015" +
    "\104\001\002\000\024\006\037\036\041\037\040\061\031" +
    "\062\035\064\036\065\032\066\042\067\026\001\002\000" +
    "\044\004\uff9a\005\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\015\uff9a\017\uff9a\020\uff9a\024\uff9a\034\uff9a\035" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002\000\014" +
    "\007\uffa2\013\052\015\uffa2\034\051\035\046\001\002\000" +
    "\036\072\uffe1\074\uffe1\075\uffe1\076\uffe1\106\uffe1\110\uffe1" +
    "\111\uffe1\112\uffe1\114\uffe1\115\uffe1\126\uffe1\130\uffe1\131" +
    "\uffe1\132\uffe1\001\002\000\004\006\111\001\002\000\014" +
    "\007\113\074\017\111\005\112\006\115\016\001\002\000" +
    "\004\062\321\001\002\000\004\027\313\001\002\000\006" +
    "\007\116\015\115\001\002\000\012\074\017\111\005\112" +
    "\006\115\016\001\002\000\004\027\117\001\002\000\034" +
    "\072\134\074\017\075\015\076\121\106\137\110\127\111" +
    "\005\112\006\114\124\115\016\130\122\131\120\132\131" +
    "\001\002\000\004\006\303\001\002\000\004\024\302\001" +
    "\002\000\004\006\274\001\002\000\024\030\ufff0\072\ufff0" +
    "\076\ufff0\106\ufff0\110\ufff0\114\ufff0\130\ufff0\131\ufff0\132" +
    "\ufff0\001\002\000\020\024\267\061\031\062\271\064\036" +
    "\065\032\066\042\067\026\001\002\000\024\030\uffeb\072" +
    "\uffeb\076\uffeb\106\uffeb\110\uffeb\114\uffeb\130\uffeb\131\uffeb" +
    "\132\uffeb\001\002\000\024\030\266\072\134\076\121\106" +
    "\137\110\127\114\124\130\122\131\120\132\131\001\002" +
    "\000\004\006\243\001\002\000\024\030\uffec\072\uffec\076" +
    "\uffec\106\uffec\110\uffec\114\uffec\130\uffec\131\uffec\132\uffec" +
    "\001\002\000\004\006\237\001\002\000\024\030\uffea\072" +
    "\uffea\076\uffea\106\uffea\110\uffea\114\uffea\130\uffea\131\uffea" +
    "\132\uffea\001\002\000\034\072\134\074\017\075\015\076" +
    "\121\106\137\110\127\111\005\112\006\114\124\115\016" +
    "\130\122\131\120\132\131\001\002\000\004\024\233\001" +
    "\002\000\024\030\uffed\072\uffed\076\uffed\106\uffed\110\uffed" +
    "\114\uffed\130\uffed\131\uffed\132\uffed\001\002\000\004\062" +
    "\226\001\002\000\004\006\141\001\002\000\024\030\uffee" +
    "\072\uffee\076\uffee\106\uffee\110\uffee\114\uffee\130\uffee\131" +
    "\uffee\132\uffee\001\002\000\014\062\144\074\017\111\005" +
    "\112\006\115\016\001\002\000\004\007\221\001\002\000" +
    "\004\062\212\001\002\000\004\021\145\001\002\000\004" +
    "\061\146\001\002\000\004\024\147\001\002\000\024\006" +
    "\037\036\041\037\040\061\031\062\152\064\036\065\032" +
    "\066\042\067\026\001\002\000\014\007\uffdc\013\052\024" +
    "\uffdc\034\051\035\046\001\002\000\004\024\167\001\002" +
    "\000\062\004\uff9b\005\uff9b\006\100\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\017\uff9b\020\uff9b\021\160\024\uff9b" +
    "\034\uff9b\035\uff9b\036\076\037\077\040\156\041\154\042" +
    "\157\043\155\054\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002" +
    "\000\006\007\uffdd\024\uffdd\001\002\000\024\006\037\036" +
    "\041\037\040\061\031\062\035\064\036\065\032\066\042" +
    "\067\026\001\002\000\024\006\037\036\041\037\040\061" +
    "\031\062\035\064\036\065\032\066\042\067\026\001\002" +
    "\000\024\006\037\036\041\037\040\061\031\062\035\064" +
    "\036\065\032\066\042\067\026\001\002\000\024\006\037" +
    "\036\041\037\040\061\031\062\035\064\036\065\032\066" +
    "\042\067\026\001\002\000\024\006\037\036\041\037\040" +
    "\061\031\062\152\064\036\065\032\066\042\067\026\001" +
    "\002\000\014\007\uff8e\013\052\024\uff8e\034\051\035\046" +
    "\001\002\000\006\007\uff8d\024\uff8d\001\002\000\014\007" +
    "\uff90\013\052\024\uff90\034\051\035\046\001\002\000\014" +
    "\007\uff92\013\052\024\uff92\034\051\035\046\001\002\000" +
    "\014\007\uff8f\013\052\024\uff8f\034\051\035\046\001\002" +
    "\000\014\007\uff91\013\052\024\uff91\034\051\035\046\001" +
    "\002\000\010\036\170\037\173\062\172\001\002\000\004" +
    "\062\211\001\002\000\004\007\uffd1\001\002\000\020\036" +
    "\200\037\202\040\177\041\176\042\201\043\175\044\203" +
    "\001\002\000\004\062\174\001\002\000\004\007\uffc8\001" +
    "\002\000\004\061\210\001\002\000\004\061\207\001\002" +
    "\000\004\061\206\001\002\000\004\007\uffcb\001\002\000" +
    "\004\061\205\001\002\000\004\007\uffca\001\002\000\004" +
    "\061\204\001\002\000\004\007\uffcc\001\002\000\004\007" +
    "\uffce\001\002\000\004\007\uffd0\001\002\000\004\007\uffcf" +
    "\001\002\000\004\007\uffcd\001\002\000\004\007\uffc9\001" +
    "\002\000\004\021\213\001\002\000\004\061\214\001\002" +
    "\000\004\024\215\001\002\000\024\006\037\036\041\037" +
    "\040\061\031\062\152\064\036\065\032\066\042\067\026" +
    "\001\002\000\004\024\217\001\002\000\010\036\170\037" +
    "\173\062\172\001\002\000\004\007\uffd2\001\002\000\004" +
    "\027\222\001\002\000\022\072\134\076\121\106\137\110" +
    "\127\114\124\130\122\131\120\132\131\001\002\000\024" +
    "\030\225\072\134\076\121\106\137\110\127\114\124\130" +
    "\122\131\120\132\131\001\002\000\024\030\uffef\072\uffef" +
    "\076\uffef\106\uffef\110\uffef\114\uffef\130\uffef\131\uffef\132" +
    "\uffef\001\002\000\024\030\uffd3\072\uffd3\076\uffd3\106\uffd3" +
    "\110\uffd3\114\uffd3\130\uffd3\131\uffd3\132\uffd3\001\002\000" +
    "\006\021\230\024\227\001\002\000\036\072\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\106\uffe4\110\uffe4\111\uffe4\112\uffe4\114" +
    "\uffe4\115\uffe4\126\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002" +
    "\000\024\006\037\036\041\037\040\061\031\062\035\064" +
    "\036\065\032\066\042\067\026\001\002\000\012\013\052" +
    "\024\232\034\051\035\046\001\002\000\036\072\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\106\uffe3\110\uffe3\111\uffe3\112\uffe3" +
    "\114\uffe3\115\uffe3\126\uffe3\130\uffe3\131\uffe3\132\uffe3\001" +
    "\002\000\024\030\uffe9\072\uffe9\076\uffe9\106\uffe9\110\uffe9" +
    "\114\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002\000\036\072" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\106\ufffd\110\ufffd\111\ufffd" +
    "\112\ufffd\114\ufffd\115\ufffd\126\ufffd\130\ufffd\131\ufffd\132" +
    "\ufffd\001\002\000\024\030\236\072\134\076\121\106\137" +
    "\110\127\114\124\130\122\131\120\132\131\001\002\000" +
    "\016\002\ufff7\074\ufff7\111\ufff7\112\ufff7\115\ufff7\126\ufff7" +
    "\001\002\000\004\062\240\001\002\000\004\007\241\001" +
    "\002\000\004\024\242\001\002\000\024\030\uffc5\072\uffc5" +
    "\076\uffc5\106\uffc5\110\uffc5\114\uffc5\130\uffc5\131\uffc5\132" +
    "\uffc5\001\002\000\024\006\037\036\041\037\040\061\031" +
    "\062\152\064\036\065\032\066\042\067\026\001\002\000" +
    "\004\007\245\001\002\000\004\027\246\001\002\000\022" +
    "\072\134\076\121\106\137\110\127\114\124\130\122\131" +
    "\120\132\131\001\002\000\024\030\250\072\134\076\121" +
    "\106\137\110\127\114\124\130\122\131\120\132\131\001" +
    "\002\000\026\030\uffd5\072\uffd5\076\uffd5\102\251\106\uffd5" +
    "\110\uffd5\114\uffd5\130\uffd5\131\uffd5\132\uffd5\001\002\000" +
    "\006\027\253\110\254\001\002\000\024\030\uffde\072\uffde" +
    "\076\uffde\106\uffde\110\uffde\114\uffde\130\uffde\131\uffde\132" +
    "\uffde\001\002\000\022\072\134\076\121\106\137\110\127" +
    "\114\124\130\122\131\120\132\131\001\002\000\004\006" +
    "\255\001\002\000\024\006\037\036\041\037\040\061\031" +
    "\062\152\064\036\065\032\066\042\067\026\001\002\000" +
    "\004\007\257\001\002\000\004\027\260\001\002\000\022" +
    "\072\134\076\121\106\137\110\127\114\124\130\122\131" +
    "\120\132\131\001\002\000\024\030\262\072\134\076\121" +
    "\106\137\110\127\114\124\130\122\131\120\132\131\001" +
    "\002\000\026\030\uffd5\072\uffd5\076\uffd5\102\251\106\uffd5" +
    "\110\uffd5\114\uffd5\130\uffd5\131\uffd5\132\uffd5\001\002\000" +
    "\024\030\uffd7\072\uffd7\076\uffd7\106\uffd7\110\uffd7\114\uffd7" +
    "\130\uffd7\131\uffd7\132\uffd7\001\002\000\024\030\265\072" +
    "\134\076\121\106\137\110\127\114\124\130\122\131\120" +
    "\132\131\001\002\000\024\030\uffd6\072\uffd6\076\uffd6\106" +
    "\uffd6\110\uffd6\114\uffd6\130\uffd6\131\uffd6\132\uffd6\001\002" +
    "\000\016\002\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126" +
    "\ufff3\001\002\000\024\030\uffe5\072\uffe5\076\uffe5\106\uffe5" +
    "\110\uffe5\114\uffe5\130\uffe5\131\uffe5\132\uffe5\001\002\000" +
    "\004\024\273\001\002\000\004\024\272\001\002\000\024" +
    "\030\uffe6\072\uffe6\076\uffe6\106\uffe6\110\uffe6\114\uffe6\130" +
    "\uffe6\131\uffe6\132\uffe6\001\002\000\024\030\uffe7\072\uffe7" +
    "\076\uffe7\106\uffe7\110\uffe7\114\uffe7\130\uffe7\131\uffe7\132" +
    "\uffe7\001\002\000\024\006\037\036\041\037\040\061\031" +
    "\062\152\064\036\065\032\066\042\067\026\001\002\000" +
    "\004\007\276\001\002\000\004\027\277\001\002\000\022" +
    "\072\134\076\121\106\137\110\127\114\124\130\122\131" +
    "\120\132\131\001\002\000\024\030\301\072\134\076\121" +
    "\106\137\110\127\114\124\130\122\131\120\132\131\001" +
    "\002\000\024\030\uffd4\072\uffd4\076\uffd4\106\uffd4\110\uffd4" +
    "\114\uffd4\130\uffd4\131\uffd4\132\uffd4\001\002\000\024\030" +
    "\uffe8\072\uffe8\076\uffe8\106\uffe8\110\uffe8\114\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\006\007\304\062\305\001" +
    "\002\000\004\024\310\001\002\000\004\007\306\001\002" +
    "\000\004\024\307\001\002\000\024\030\uffc7\072\uffc7\076" +
    "\uffc7\106\uffc7\110\uffc7\114\uffc7\130\uffc7\131\uffc7\132\uffc7" +
    "\001\002\000\024\030\uffc6\072\uffc6\076\uffc6\106\uffc6\110" +
    "\uffc6\114\uffc6\130\uffc6\131\uffc6\132\uffc6\001\002\000\004" +
    "\062\312\001\002\000\006\007\ufff1\015\ufff1\001\002\000" +
    "\034\072\134\074\017\075\015\076\121\106\137\110\127" +
    "\111\005\112\006\114\124\115\016\130\122\131\120\132" +
    "\131\001\002\000\024\030\320\072\134\076\121\106\137" +
    "\110\127\114\124\130\122\131\120\132\131\001\002\000" +
    "\034\072\134\074\017\075\015\076\121\106\137\110\127" +
    "\111\005\112\006\114\124\115\016\130\122\131\120\132" +
    "\131\001\002\000\024\030\317\072\134\076\121\106\137" +
    "\110\127\114\124\130\122\131\120\132\131\001\002\000" +
    "\016\002\ufff8\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126\ufff8" +
    "\001\002\000\016\002\ufff4\074\ufff4\111\ufff4\112\ufff4\115" +
    "\ufff4\126\ufff4\001\002\000\006\007\ufff2\015\ufff2\001\002" +
    "\000\004\002\001\001\002\000\010\006\324\021\230\024" +
    "\227\001\002\000\014\007\325\074\017\111\005\112\006" +
    "\115\016\001\002\000\004\027\336\001\002\000\006\007" +
    "\327\015\115\001\002\000\004\027\330\001\002\000\034" +
    "\072\134\074\017\075\015\076\121\106\137\110\127\111" +
    "\005\112\006\114\124\115\016\130\122\131\120\132\131" +
    "\001\002\000\024\030\335\072\134\076\121\106\137\110" +
    "\127\114\124\130\122\131\120\132\131\001\002\000\034" +
    "\072\134\074\017\075\015\076\121\106\137\110\127\111" +
    "\005\112\006\114\124\115\016\130\122\131\120\132\131" +
    "\001\002\000\024\030\334\072\134\076\121\106\137\110" +
    "\127\114\124\130\122\131\120\132\131\001\002\000\016" +
    "\002\ufffa\074\ufffa\111\ufffa\112\ufffa\115\ufffa\126\ufffa\001" +
    "\002\000\016\002\ufff6\074\ufff6\111\ufff6\112\ufff6\115\ufff6" +
    "\126\ufff6\001\002\000\034\072\134\074\017\075\015\076" +
    "\121\106\137\110\127\111\005\112\006\114\124\115\016" +
    "\130\122\131\120\132\131\001\002\000\024\030\343\072" +
    "\134\076\121\106\137\110\127\114\124\130\122\131\120" +
    "\132\131\001\002\000\034\072\134\074\017\075\015\076" +
    "\121\106\137\110\127\111\005\112\006\114\124\115\016" +
    "\130\122\131\120\132\131\001\002\000\024\030\342\072" +
    "\134\076\121\106\137\110\127\114\124\130\122\131\120" +
    "\132\131\001\002\000\016\002\ufff9\074\ufff9\111\ufff9\112" +
    "\ufff9\115\ufff9\126\ufff9\001\002\000\016\002\ufff5\074\ufff5" +
    "\111\ufff5\112\ufff5\115\ufff5\126\ufff5\001\002\000\004\062" +
    "\346\001\002\000\016\002\ufffb\074\ufffb\111\ufffb\112\ufffb" +
    "\115\ufffb\126\ufffb\001\002\000\004\006\324\001\002\000" +
    "\004\062\uffbe\001\002\000\004\062\uffbf\001\002\000\004" +
    "\062\uffc0\001\002\000\016\002\000\074\017\111\005\112" +
    "\006\115\016\126\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\233\014\010\024\013" +
    "\030\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\343\024\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\026\033\033\034\027" +
    "\035\032\037\024\001\001\000\004\016\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\026\033\033\034\027\035\032\037\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\026\033\033" +
    "\034\027\035\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\026\033\033\034\062" +
    "\001\001\000\002\001\001\000\010\022\026\033\033\034" +
    "\074\001\001\000\010\022\026\033\033\034\073\001\001" +
    "\000\010\022\026\033\033\034\072\001\001\000\010\022" +
    "\026\033\033\034\071\001\001\000\010\022\026\033\033" +
    "\034\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\026\033\033\034" +
    "\027\035\032\037\100\040\102\001\001\000\004\016\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\026\033\033\034\027\035\032\037\105\001\001\000\002" +
    "\001\001\000\004\016\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\111\025\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\310\001\001\000\002\001\001\000\026\003\122\004\006" +
    "\006\137\010\134\011\127\014\135\021\124\026\131\027" +
    "\132\036\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\267\001" +
    "\001\000\002\001\001\000\016\003\223\006\137\010\134" +
    "\011\127\021\124\026\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\122\004\233\006\137\010\134\011\127\014\135\021" +
    "\124\026\131\036\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\141\014\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\150\022\026\032\152\033\033" +
    "\034\027\035\032\037\147\001\001\000\004\016\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\026\033\033\034\027\035\032\037\165\001" +
    "\001\000\014\022\026\033\033\034\027\035\032\037\164" +
    "\001\001\000\014\022\026\033\033\034\027\035\032\037" +
    "\163\001\001\000\014\022\026\033\033\034\027\035\032" +
    "\037\162\001\001\000\016\022\026\032\161\033\033\034" +
    "\027\035\032\037\160\001\001\000\004\016\047\001\001" +
    "\000\002\001\001\000\004\016\047\001\001\000\004\016" +
    "\047\001\001\000\004\016\047\001\001\000\004\016\047" +
    "\001\001\000\004\005\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\215\022\026\032\152\033\033\034\027" +
    "\035\032\037\147\001\001\000\002\001\001\000\004\005" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\122\006\137\010\134\011\127\021\124\026\131\036" +
    "\222\001\001\000\016\003\223\006\137\010\134\011\127" +
    "\021\124\026\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\026" +
    "\033\033\034\027\035\032\037\230\001\001\000\004\016" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\223\006\137\010\134\011\127\021" +
    "\124\026\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\243\022\026\032\152\033\033\034\027\035\032" +
    "\037\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\122\006\137\010\134\011\127\021\124\026\131" +
    "\036\246\001\001\000\016\003\223\006\137\010\134\011" +
    "\127\021\124\026\131\001\001\000\004\007\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\122\006" +
    "\137\010\134\011\127\021\124\026\131\036\263\001\001" +
    "\000\002\001\001\000\020\012\255\022\026\032\152\033" +
    "\033\034\027\035\032\037\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\122\006\137\010\134\011" +
    "\127\021\124\026\131\036\260\001\001\000\016\003\223" +
    "\006\137\010\134\011\127\021\124\026\131\001\001\000" +
    "\004\007\262\001\001\000\002\001\001\000\016\003\223" +
    "\006\137\010\134\011\127\021\124\026\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\274\022\026\032\152\033\033\034\027" +
    "\035\032\037\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\122\006\137\010\134\011\127\021\124" +
    "\026\131\036\277\001\001\000\016\003\223\006\137\010" +
    "\134\011\127\021\124\026\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\122\004\006\006\137\010\134\011\127\014\135\021\124" +
    "\026\131\027\314\036\313\001\001\000\016\003\223\006" +
    "\137\010\134\011\127\021\124\026\131\001\001\000\024" +
    "\003\122\004\233\006\137\010\134\011\127\014\135\021" +
    "\124\026\131\036\315\001\001\000\016\003\223\006\137" +
    "\010\134\011\127\021\124\026\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\111\025\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\122\004\006\006\137\010\134\011\127\014\135\021" +
    "\124\026\131\027\331\036\330\001\001\000\016\003\223" +
    "\006\137\010\134\011\127\021\124\026\131\001\001\000" +
    "\024\003\122\004\233\006\137\010\134\011\127\014\135" +
    "\021\124\026\131\036\332\001\001\000\016\003\223\006" +
    "\137\010\134\011\127\021\124\026\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\122\004\006\006" +
    "\137\010\134\011\127\014\135\021\124\026\131\027\337" +
    "\036\336\001\001\000\016\003\223\006\137\010\134\011" +
    "\127\021\124\026\131\001\001\000\024\003\122\004\233" +
    "\006\137\010\134\011\127\014\135\021\124\026\131\036" +
    "\340\001\001\000\016\003\223\006\137\010\134\011\127" +
    "\021\124\026\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\343\024\344\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_DATO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_DATO IDENTIFIER ASSIGN EXPRESIONES_LOGICAS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= CONST T_DATO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= CONST T_DATO IDENTIFIER ASSIGN EXPRESIONES_LOGICAS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ID_LIST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ID_LIST ::= ID_LIST COMMA DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= T_DATO IDENTIFIER ASSIGN NUMBER SEMICOLON EXPRESIONES SEMICOLON DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= IDENTIFIER ASSIGN NUMBER SEMICOLON EXPRESIONES SEMICOLON DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= IDENTIFIER PLUS_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= IDENTIFIER MINUS_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= IDENTIFIER TIMES_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= IDENTIFIER DIV_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= IDENTIFIER MOD_ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // READ_WRITE ::= WRITE LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
