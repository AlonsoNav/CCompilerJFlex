
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\370\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\027\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\004\000" +
    "\002\024\013\000\002\024\012\000\002\024\012\000\002" +
    "\024\013\000\002\024\012\000\002\024\011\000\002\024" +
    "\011\000\002\024\012\000\002\025\004\000\002\025\006" +
    "\000\002\025\004\000\002\025\004\000\002\025\006\000" +
    "\002\025\006\000\002\025\005\000\002\035\004\000\002" +
    "\035\002\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\026\004\000\002\026\004\000\002\026\005\000\002" +
    "\026\005\000\002\026\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\004\005\000\002\004\006\000\002\004\005\000" +
    "\002\023\005\000\002\023\007\000\002\023\005\000\002" +
    "\023\003\000\002\006\012\000\002\006\011\000\002\006" +
    "\003\000\002\050\012\000\002\050\011\000\002\050\011" +
    "\000\002\050\010\000\002\050\011\000\002\050\010\000" +
    "\002\050\010\000\002\050\007\000\002\050\010\000\002" +
    "\050\007\000\002\050\012\000\002\050\011\000\002\012" +
    "\003\000\002\012\003\000\002\036\005\000\002\036\003" +
    "\000\002\034\005\000\002\034\003\000\002\007\013\000" +
    "\002\007\012\000\002\007\006\000\002\007\006\000\002" +
    "\007\004\000\002\010\011\000\002\010\011\000\002\010" +
    "\010\000\002\010\010\000\002\010\007\000\002\010\007" +
    "\000\002\010\011\000\002\040\013\000\002\040\013\000" +
    "\002\040\012\000\002\040\012\000\002\040\011\000\002" +
    "\040\011\000\002\040\012\000\002\040\013\000\002\040" +
    "\012\000\002\040\012\000\002\040\012\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\011\010\000" +
    "\002\011\007\000\002\011\007\000\002\011\011\000\002" +
    "\013\006\000\002\013\007\000\002\005\002\000\002\005" +
    "\003\000\002\005\003\000\002\041\013\000\002\041\011" +
    "\000\002\041\012\000\002\041\011\000\002\041\012\000" +
    "\002\041\011\000\002\041\010\000\002\041\010\000\002" +
    "\041\015\000\002\042\004\000\002\042\002\000\002\044" +
    "\006\000\002\044\010\000\002\044\006\000\002\044\005" +
    "\000\002\043\005\000\002\051\004\000\002\051\003\000" +
    "\002\021\007\000\002\021\006\000\002\021\007\000\002" +
    "\021\007\000\002\021\007\000\002\021\005\000\002\021" +
    "\006\000\002\021\006\000\002\021\007\000\002\021\007" +
    "\000\002\021\006\000\002\021\005\000\002\021\006\000" +
    "\002\021\007\000\002\047\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\004\000\002\047\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\037\003\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\004\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\033\006\000" +
    "\002\033\005\000\002\033\003\000\002\033\003\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\004\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\003\000\002\046\006\000\002\046\005\000\002\046\003" +
    "\000\002\046\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\020\002\ufffd\074\017\075\015\111\005\112" +
    "\006\115\016\126\013\001\002\000\020\002\ufffe\074\017" +
    "\075\015\111\005\112\006\115\016\126\013\001\002\000" +
    "\012\003\uff70\062\uff70\112\u01fc\115\u01fb\001\002\000\010" +
    "\003\uff6e\062\uff6e\111\u01fa\001\002\000\104\002\ufffc\003" +
    "\ufffc\006\ufffc\021\ufffc\030\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\061\ufffc\062\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\067\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\100\ufffc\106\ufffc\110\ufffc\111\ufffc\112\ufffc\114\ufffc\115" +
    "\ufffc\122\ufffc\126\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002" +
    "\000\016\002\uffff\074\017\111\005\112\006\115\016\126" +
    "\u01f7\001\002\000\004\062\u01e4\001\002\000\004\002\u01e3" +
    "\001\002\000\004\062\142\001\002\000\016\002\ufffa\074" +
    "\ufffa\111\ufffa\112\ufffa\115\ufffa\126\ufffa\001\002\000\012" +
    "\074\017\111\005\112\006\115\016\001\002\000\010\003" +
    "\uff6d\062\uff6d\111\020\001\002\000\006\003\uff6f\062\uff6f" +
    "\001\002\000\006\003\uff69\062\uff69\001\002\000\004\062" +
    "\022\001\002\000\010\015\uffce\021\140\024\uffce\001\002" +
    "\000\006\015\024\024\025\001\002\000\004\062\026\001" +
    "\002\000\106\002\uffd3\003\uffd3\006\uffd3\021\uffd3\024\uffd3" +
    "\030\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\061\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\072\uffd3\074\uffd3\075\uffd3\076\uffd3\100\uffd3\106\uffd3\110" +
    "\uffd3\111\uffd3\112\uffd3\114\uffd3\115\uffd3\122\uffd3\126\uffd3" +
    "\130\uffd3\131\uffd3\132\uffd3\001\002\000\010\015\uffd1\021" +
    "\027\024\uffd1\001\002\000\026\003\037\006\044\036\045" +
    "\037\043\061\034\062\041\064\042\065\035\066\046\067" +
    "\031\001\002\000\014\013\106\015\uffd0\024\uffd0\034\105" +
    "\035\103\001\002\000\140\003\uff50\004\uff50\005\uff50\006" +
    "\uff50\007\uff50\010\uff50\011\uff50\012\uff50\013\uff50\015\uff50" +
    "\017\uff50\020\uff50\021\uff50\023\uff50\024\uff50\027\uff50\030" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\054\uff50\055\uff50\056\uff50\057\uff50\061" +
    "\uff50\062\uff50\064\uff50\065\uff50\066\uff50\067\uff50\072\uff50" +
    "\073\uff50\076\uff50\077\uff50\100\uff50\106\uff50\110\uff50\114" +
    "\uff50\122\uff50\130\uff50\131\uff50\132\uff50\001\002\000\136" +
    "\003\uff41\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41\011" +
    "\uff41\012\uff41\013\uff41\015\uff41\017\uff41\020\uff41\021\uff41" +
    "\024\uff41\027\uff41\030\uff41\034\uff41\035\uff41\036\uff41\037" +
    "\uff41\040\uff41\041\uff41\042\uff41\043\uff41\054\uff41\055\uff41" +
    "\056\uff41\057\uff41\061\uff41\062\uff41\064\uff41\065\uff41\066" +
    "\uff41\067\uff41\072\uff41\073\uff41\076\uff41\077\uff41\100\uff41" +
    "\106\uff41\110\uff41\114\uff41\122\uff41\130\uff41\131\uff41\132" +
    "\uff41\001\002\000\136\003\uffb9\004\062\005\065\006\uffb9" +
    "\007\uffb9\010\063\011\064\012\061\013\uffb9\015\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\024\uffb9\027\uffb9\030\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072\uffb9\073\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\106\uffb9\110\uffb9\114\uffb9\122\uffb9" +
    "\130\uffb9\131\uffb9\132\uffb9\001\002\000\140\003\uff54\004" +
    "\uff54\005\uff54\006\uff54\007\uff54\010\uff54\011\uff54\012\uff54" +
    "\013\uff54\015\uff54\017\uff54\020\uff54\021\uff54\023\uff54\024" +
    "\uff54\027\uff54\030\uff54\034\uff54\035\uff54\036\uff54\037\uff54" +
    "\040\uff54\041\uff54\042\uff54\043\uff54\054\uff54\055\uff54\056" +
    "\uff54\057\uff54\061\uff54\062\uff54\064\uff54\065\uff54\066\uff54" +
    "\067\uff54\072\uff54\073\uff54\076\uff54\077\uff54\100\uff54\106" +
    "\uff54\110\uff54\114\uff54\122\uff54\130\uff54\131\uff54\132\uff54" +
    "\001\002\000\140\003\uff52\004\uff52\005\uff52\006\uff52\007" +
    "\uff52\010\uff52\011\uff52\012\uff52\013\uff52\015\uff52\017\uff52" +
    "\020\uff52\021\uff52\023\uff52\024\uff52\027\uff52\030\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\054\uff52\055\uff52\056\uff52\057\uff52\061\uff52\062" +
    "\uff52\064\uff52\065\uff52\066\uff52\067\uff52\072\uff52\073\uff52" +
    "\076\uff52\077\uff52\100\uff52\106\uff52\110\uff52\114\uff52\122" +
    "\uff52\130\uff52\131\uff52\132\uff52\001\002\000\124\003\uffbb" +
    "\006\uffbb\007\uffbb\013\uffbb\015\uffbb\017\110\020\114\021" +
    "\uffbb\024\uffbb\027\uffbb\030\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\054\113\055" +
    "\111\056\112\057\115\061\uffbb\062\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\072\uffbb\073\uffbb\076\uffbb\077\uffbb\100" +
    "\uffbb\106\uffbb\110\uffbb\114\uffbb\122\uffbb\130\uffbb\131\uffbb" +
    "\132\uffbb\001\002\000\012\004\054\005\057\010\055\011" +
    "\056\001\002\000\136\003\uff40\004\uff40\005\uff40\006\uff40" +
    "\007\uff40\010\uff40\011\uff40\012\uff40\013\uff40\015\uff40\017" +
    "\uff40\020\uff40\021\uff40\024\uff40\027\uff40\030\uff40\034\uff40" +
    "\035\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043" +
    "\uff40\054\uff40\055\uff40\056\uff40\057\uff40\061\uff40\062\uff40" +
    "\064\uff40\065\uff40\066\uff40\067\uff40\072\uff40\073\uff40\076" +
    "\uff40\077\uff40\100\uff40\106\uff40\110\uff40\114\uff40\122\uff40" +
    "\130\uff40\131\uff40\132\uff40\001\002\000\136\003\uff44\004" +
    "\uff44\005\uff44\006\124\007\uff44\010\uff44\011\uff44\012\uff44" +
    "\013\uff44\015\uff44\017\uff44\020\uff44\021\uff44\024\uff44\027" +
    "\uff44\030\uff44\034\uff44\035\uff44\036\122\037\123\040\uff44" +
    "\041\uff44\042\uff44\043\uff44\054\uff44\055\uff44\056\uff44\057" +
    "\uff44\061\uff44\062\uff44\064\uff44\065\uff44\066\uff44\067\uff44" +
    "\072\uff44\073\uff44\076\uff44\077\uff44\100\uff44\106\uff44\110" +
    "\uff44\114\uff44\122\uff44\130\uff44\131\uff44\132\uff44\001\002" +
    "\000\140\003\uff53\004\uff53\005\uff53\006\uff53\007\uff53\010" +
    "\uff53\011\uff53\012\uff53\013\uff53\015\uff53\017\uff53\020\uff53" +
    "\021\uff53\023\uff53\024\uff53\027\uff53\030\uff53\034\uff53\035" +
    "\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53" +
    "\054\uff53\055\uff53\056\uff53\057\uff53\061\uff53\062\uff53\064" +
    "\uff53\065\uff53\066\uff53\067\uff53\072\uff53\073\uff53\076\uff53" +
    "\077\uff53\100\uff53\106\uff53\110\uff53\114\uff53\122\uff53\130" +
    "\uff53\131\uff53\132\uff53\001\002\000\006\003\120\062\121" +
    "\001\002\000\026\003\052\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\031\001\002" +
    "\000\006\003\047\062\050\001\002\000\140\003\uff51\004" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\015\uff51\017\uff51\020\uff51\021\uff51\023\uff51\024" +
    "\uff51\027\uff51\030\uff51\034\uff51\035\uff51\036\uff51\037\uff51" +
    "\040\uff51\041\uff51\042\uff51\043\uff51\054\uff51\055\uff51\056" +
    "\uff51\057\uff51\061\uff51\062\uff51\064\uff51\065\uff51\066\uff51" +
    "\067\uff51\072\uff51\073\uff51\076\uff51\077\uff51\100\uff51\106" +
    "\uff51\110\uff51\114\uff51\122\uff51\130\uff51\131\uff51\132\uff51" +
    "\001\002\000\136\003\uff1a\004\uff1a\005\uff1a\006\uff1a\007" +
    "\uff1a\010\uff1a\011\uff1a\012\uff1a\013\uff1a\015\uff1a\017\uff1a" +
    "\020\uff1a\021\uff1a\024\uff1a\027\uff1a\030\uff1a\034\uff1a\035" +
    "\uff1a\036\uff1a\037\uff1a\040\uff1a\041\uff1a\042\uff1a\043\uff1a" +
    "\054\uff1a\055\uff1a\056\uff1a\057\uff1a\061\uff1a\062\uff1a\064" +
    "\uff1a\065\uff1a\066\uff1a\067\uff1a\072\uff1a\073\uff1a\076\uff1a" +
    "\077\uff1a\100\uff1a\106\uff1a\110\uff1a\114\uff1a\122\uff1a\130" +
    "\uff1a\131\uff1a\132\uff1a\001\002\000\136\003\uff1d\004\uff1d" +
    "\005\uff1d\006\uff1d\007\uff1d\010\uff1d\011\uff1d\012\uff1d\013" +
    "\uff1d\015\uff1d\017\uff1d\020\uff1d\021\uff1d\024\uff1d\027\uff1d" +
    "\030\uff1d\034\uff1d\035\uff1d\036\uff1d\037\uff1d\040\uff1d\041" +
    "\uff1d\042\uff1d\043\uff1d\054\uff1d\055\uff1d\056\uff1d\057\uff1d" +
    "\061\uff1d\062\uff1d\064\uff1d\065\uff1d\066\uff1d\067\uff1d\072" +
    "\uff1d\073\uff1d\076\uff1d\077\uff1d\100\uff1d\106\uff1d\110\uff1d" +
    "\114\uff1d\122\uff1d\130\uff1d\131\uff1d\132\uff1d\001\002\000" +
    "\012\007\102\013\106\034\105\035\103\001\002\000\014" +
    "\004\054\005\057\007\053\010\055\011\056\001\002\000" +
    "\136\003\uff3a\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010\uff3a" +
    "\011\uff3a\012\uff3a\013\uff3a\015\uff3a\017\uff3a\020\uff3a\021" +
    "\uff3a\024\uff3a\027\uff3a\030\uff3a\034\uff3a\035\uff3a\036\uff3a" +
    "\037\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\054\uff3a\055" +
    "\uff3a\056\uff3a\057\uff3a\061\uff3a\062\uff3a\064\uff3a\065\uff3a" +
    "\066\uff3a\067\uff3a\072\uff3a\073\uff3a\076\uff3a\077\uff3a\100" +
    "\uff3a\106\uff3a\110\uff3a\114\uff3a\122\uff3a\130\uff3a\131\uff3a" +
    "\132\uff3a\001\002\000\026\003\037\006\044\036\045\037" +
    "\043\061\034\062\041\064\042\065\035\066\046\067\031" +
    "\001\002\000\026\003\037\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\031\001\002" +
    "\000\026\003\037\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\031\001\002\000\026" +
    "\003\037\006\044\036\045\037\043\061\034\062\041\064" +
    "\042\065\035\066\046\067\031\001\002\000\136\003\uff39" +
    "\004\uff39\005\uff39\006\uff39\007\uff39\010\uff39\011\uff39\012" +
    "\uff39\013\uff39\015\uff39\017\uff39\020\uff39\021\uff39\024\uff39" +
    "\027\uff39\030\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040" +
    "\uff39\041\uff39\042\uff39\043\uff39\054\uff39\055\uff39\056\uff39" +
    "\057\uff39\061\uff39\062\uff39\064\uff39\065\uff39\066\uff39\067" +
    "\uff39\072\uff39\073\uff39\076\uff39\077\uff39\100\uff39\106\uff39" +
    "\110\uff39\114\uff39\122\uff39\130\uff39\131\uff39\132\uff39\001" +
    "\002\000\136\003\uff3b\004\uff3b\005\uff3b\006\044\007\uff3b" +
    "\010\uff3b\011\uff3b\012\uff3b\013\uff3b\015\uff3b\017\uff3b\020" +
    "\uff3b\021\uff3b\024\uff3b\027\uff3b\030\uff3b\034\uff3b\035\uff3b" +
    "\036\045\037\043\040\uff3b\041\uff3b\042\uff3b\043\uff3b\054" +
    "\uff3b\055\uff3b\056\uff3b\057\uff3b\061\uff3b\062\uff3b\064\uff3b" +
    "\065\uff3b\066\uff3b\067\uff3b\072\uff3b\073\uff3b\076\uff3b\077" +
    "\uff3b\100\uff3b\106\uff3b\110\uff3b\114\uff3b\122\uff3b\130\uff3b" +
    "\131\uff3b\132\uff3b\001\002\000\026\003\075\006\044\036" +
    "\045\037\043\061\034\062\041\064\042\065\035\066\046" +
    "\067\031\001\002\000\026\003\073\006\044\036\045\037" +
    "\043\061\034\062\041\064\042\065\035\066\046\067\031" +
    "\001\002\000\026\003\071\006\044\036\045\037\043\061" +
    "\034\062\041\064\042\065\035\066\046\067\031\001\002" +
    "\000\026\003\067\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\031\001\002\000\136" +
    "\003\uff48\004\uff48\005\uff48\006\uff48\007\uff48\010\uff48\011" +
    "\uff48\012\uff48\013\uff48\015\uff48\017\uff48\020\uff48\021\uff48" +
    "\024\uff48\027\uff48\030\uff48\034\uff48\035\uff48\036\uff48\037" +
    "\uff48\040\uff48\041\uff48\042\uff48\043\uff48\054\uff48\055\uff48" +
    "\056\uff48\057\uff48\061\uff48\062\uff48\064\uff48\065\uff48\066" +
    "\uff48\067\uff48\072\uff48\073\uff48\076\uff48\077\uff48\100\uff48" +
    "\106\uff48\110\uff48\114\uff48\122\uff48\130\uff48\131\uff48\132" +
    "\uff48\001\002\000\136\003\uff3d\004\054\005\057\006\uff3d" +
    "\007\uff3d\010\055\011\056\012\uff3d\013\uff3d\015\uff3d\017" +
    "\uff3d\020\uff3d\021\uff3d\024\uff3d\027\uff3d\030\uff3d\034\uff3d" +
    "\035\uff3d\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043" +
    "\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\061\uff3d\062\uff3d" +
    "\064\uff3d\065\uff3d\066\uff3d\067\uff3d\072\uff3d\073\uff3d\076" +
    "\uff3d\077\uff3d\100\uff3d\106\uff3d\110\uff3d\114\uff3d\122\uff3d" +
    "\130\uff3d\131\uff3d\132\uff3d\001\002\000\136\003\uff47\004" +
    "\uff47\005\uff47\006\uff47\007\uff47\010\uff47\011\uff47\012\uff47" +
    "\013\uff47\015\uff47\017\uff47\020\uff47\021\uff47\024\uff47\027" +
    "\uff47\030\uff47\034\uff47\035\uff47\036\uff47\037\uff47\040\uff47" +
    "\041\uff47\042\uff47\043\uff47\054\uff47\055\uff47\056\uff47\057" +
    "\uff47\061\uff47\062\uff47\064\uff47\065\uff47\066\uff47\067\uff47" +
    "\072\uff47\073\uff47\076\uff47\077\uff47\100\uff47\106\uff47\110" +
    "\uff47\114\uff47\122\uff47\130\uff47\131\uff47\132\uff47\001\002" +
    "\000\136\003\uff3c\004\054\005\057\006\uff3c\007\uff3c\010" +
    "\055\011\056\012\uff3c\013\uff3c\015\uff3c\017\uff3c\020\uff3c" +
    "\021\uff3c\024\uff3c\027\uff3c\030\uff3c\034\uff3c\035\uff3c\036" +
    "\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\054\uff3c" +
    "\055\uff3c\056\uff3c\057\uff3c\061\uff3c\062\uff3c\064\uff3c\065" +
    "\uff3c\066\uff3c\067\uff3c\072\uff3c\073\uff3c\076\uff3c\077\uff3c" +
    "\100\uff3c\106\uff3c\110\uff3c\114\uff3c\122\uff3c\130\uff3c\131" +
    "\uff3c\132\uff3c\001\002\000\136\003\uff49\004\uff49\005\065" +
    "\006\uff49\007\uff49\010\uff49\011\064\012\061\013\uff49\015" +
    "\uff49\017\uff49\020\uff49\021\uff49\024\uff49\027\uff49\030\uff49" +
    "\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042" +
    "\uff49\043\uff49\054\uff49\055\uff49\056\uff49\057\uff49\061\uff49" +
    "\062\uff49\064\uff49\065\uff49\066\uff49\067\uff49\072\uff49\073" +
    "\uff49\076\uff49\077\uff49\100\uff49\106\uff49\110\uff49\114\uff49" +
    "\122\uff49\130\uff49\131\uff49\132\uff49\001\002\000\136\003" +
    "\uff3e\004\054\005\057\006\uff3e\007\uff3e\010\055\011\056" +
    "\012\uff3e\013\uff3e\015\uff3e\017\uff3e\020\uff3e\021\uff3e\024" +
    "\uff3e\027\uff3e\030\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e" +
    "\040\uff3e\041\uff3e\042\uff3e\043\uff3e\054\uff3e\055\uff3e\056" +
    "\uff3e\057\uff3e\061\uff3e\062\uff3e\064\uff3e\065\uff3e\066\uff3e" +
    "\067\uff3e\072\uff3e\073\uff3e\076\uff3e\077\uff3e\100\uff3e\106" +
    "\uff3e\110\uff3e\114\uff3e\122\uff3e\130\uff3e\131\uff3e\132\uff3e" +
    "\001\002\000\136\003\uff4a\004\uff4a\005\065\006\uff4a\007" +
    "\uff4a\010\uff4a\011\064\012\061\013\uff4a\015\uff4a\017\uff4a" +
    "\020\uff4a\021\uff4a\024\uff4a\027\uff4a\030\uff4a\034\uff4a\035" +
    "\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\054\uff4a\055\uff4a\056\uff4a\057\uff4a\061\uff4a\062\uff4a\064" +
    "\uff4a\065\uff4a\066\uff4a\067\uff4a\072\uff4a\073\uff4a\076\uff4a" +
    "\077\uff4a\100\uff4a\106\uff4a\110\uff4a\114\uff4a\122\uff4a\130" +
    "\uff4a\131\uff4a\132\uff4a\001\002\000\136\003\uff3f\004\054" +
    "\005\057\006\uff3f\007\uff3f\010\055\011\056\012\uff3f\013" +
    "\uff3f\015\uff3f\017\uff3f\020\uff3f\021\uff3f\024\uff3f\027\uff3f" +
    "\030\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041" +
    "\uff3f\042\uff3f\043\uff3f\054\uff3f\055\uff3f\056\uff3f\057\uff3f" +
    "\061\uff3f\062\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f\072" +
    "\uff3f\073\uff3f\076\uff3f\077\uff3f\100\uff3f\106\uff3f\110\uff3f" +
    "\114\uff3f\122\uff3f\130\uff3f\131\uff3f\132\uff3f\001\002\000" +
    "\136\003\uff46\004\uff46\005\uff46\006\uff46\007\uff46\010\uff46" +
    "\011\uff46\012\uff46\013\uff46\015\uff46\017\uff46\020\uff46\021" +
    "\uff46\024\uff46\027\uff46\030\uff46\034\uff46\035\uff46\036\uff46" +
    "\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46\054\uff46\055" +
    "\uff46\056\uff46\057\uff46\061\uff46\062\uff46\064\uff46\065\uff46" +
    "\066\uff46\067\uff46\072\uff46\073\uff46\076\uff46\077\uff46\100" +
    "\uff46\106\uff46\110\uff46\114\uff46\122\uff46\130\uff46\131\uff46" +
    "\132\uff46\001\002\000\136\003\uff38\004\uff38\005\uff38\006" +
    "\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013\uff38\015\uff38" +
    "\017\uff38\020\uff38\021\uff38\024\uff38\027\uff38\030\uff38\034" +
    "\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38" +
    "\043\uff38\054\uff38\055\uff38\056\uff38\057\uff38\061\uff38\062" +
    "\uff38\064\uff38\065\uff38\066\uff38\067\uff38\072\uff38\073\uff38" +
    "\076\uff38\077\uff38\100\uff38\106\uff38\110\uff38\114\uff38\122" +
    "\uff38\130\uff38\131\uff38\132\uff38\001\002\000\136\003\uff36" +
    "\004\uff36\005\065\006\uff36\007\uff36\010\uff36\011\064\012" +
    "\061\013\uff36\015\uff36\017\uff36\020\uff36\021\uff36\024\uff36" +
    "\027\uff36\030\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040" +
    "\uff36\041\uff36\042\uff36\043\uff36\054\uff36\055\uff36\056\uff36" +
    "\057\uff36\061\uff36\062\uff36\064\uff36\065\uff36\066\uff36\067" +
    "\uff36\072\uff36\073\uff36\076\uff36\077\uff36\100\uff36\106\uff36" +
    "\110\uff36\114\uff36\122\uff36\130\uff36\131\uff36\132\uff36\001" +
    "\002\000\136\003\uff37\004\uff37\005\065\006\uff37\007\uff37" +
    "\010\uff37\011\064\012\061\013\uff37\015\uff37\017\uff37\020" +
    "\uff37\021\uff37\024\uff37\027\uff37\030\uff37\034\uff37\035\uff37" +
    "\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37\054" +
    "\uff37\055\uff37\056\uff37\057\uff37\061\uff37\062\uff37\064\uff37" +
    "\065\uff37\066\uff37\067\uff37\072\uff37\073\uff37\076\uff37\077" +
    "\uff37\100\uff37\106\uff37\110\uff37\114\uff37\122\uff37\130\uff37" +
    "\131\uff37\132\uff37\001\002\000\136\003\uff45\004\uff45\005" +
    "\uff45\006\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013\uff45" +
    "\015\uff45\017\uff45\020\uff45\021\uff45\024\uff45\027\uff45\030" +
    "\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040\uff45\041\uff45" +
    "\042\uff45\043\uff45\054\uff45\055\uff45\056\uff45\057\uff45\061" +
    "\uff45\062\uff45\064\uff45\065\uff45\066\uff45\067\uff45\072\uff45" +
    "\073\uff45\076\uff45\077\uff45\100\uff45\106\uff45\110\uff45\114" +
    "\uff45\122\uff45\130\uff45\131\uff45\132\uff45\001\002\000\026" +
    "\003\uff62\006\uff62\036\uff62\037\uff62\061\uff62\062\uff62\064" +
    "\uff62\065\uff62\066\uff62\067\uff62\001\002\000\026\003\037" +
    "\006\044\036\045\037\043\061\034\062\041\064\042\065" +
    "\035\066\046\067\031\001\002\000\026\003\uff61\006\uff61" +
    "\036\uff61\037\uff61\061\uff61\062\uff61\064\uff61\065\uff61\066" +
    "\uff61\067\uff61\001\002\000\026\003\uff60\006\uff60\036\uff60" +
    "\037\uff60\061\uff60\062\uff60\064\uff60\065\uff60\066\uff60\067" +
    "\uff60\001\002\000\124\003\uffbc\006\uffbc\007\uffbc\013\uffbc" +
    "\015\uffbc\017\110\020\114\021\uffbc\024\uffbc\027\uffbc\030" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\054\113\055\111\056\112\057\115\061" +
    "\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\072\uffbc" +
    "\073\uffbc\076\uffbc\077\uffbc\100\uffbc\106\uffbc\110\uffbc\114" +
    "\uffbc\122\uffbc\130\uffbc\131\uffbc\132\uffbc\001\002\000\026" +
    "\003\uff66\006\uff66\036\uff66\037\uff66\061\uff66\062\uff66\064" +
    "\uff66\065\uff66\066\uff66\067\uff66\001\002\000\026\003\uff68" +
    "\006\uff68\036\uff68\037\uff68\061\uff68\062\uff68\064\uff68\065" +
    "\uff68\066\uff68\067\uff68\001\002\000\026\003\uff64\006\uff64" +
    "\036\uff64\037\uff64\061\uff64\062\uff64\064\uff64\065\uff64\066" +
    "\uff64\067\uff64\001\002\000\026\003\uff67\006\uff67\036\uff67" +
    "\037\uff67\061\uff67\062\uff67\064\uff67\065\uff67\066\uff67\067" +
    "\uff67\001\002\000\026\003\uff65\006\uff65\036\uff65\037\uff65" +
    "\061\uff65\062\uff65\064\uff65\065\uff65\066\uff65\067\uff65\001" +
    "\002\000\026\003\uff63\006\uff63\036\uff63\037\uff63\061\uff63" +
    "\062\uff63\064\uff63\065\uff63\066\uff63\067\uff63\001\002\000" +
    "\026\003\037\006\044\036\045\037\043\061\034\062\041" +
    "\064\042\065\035\066\046\067\031\001\002\000\136\003" +
    "\uffba\004\062\005\065\006\uffba\007\uffba\010\063\011\064" +
    "\012\061\013\uffba\015\uffba\017\uffba\020\uffba\021\uffba\024" +
    "\uffba\027\uffba\030\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\061\uffba\062\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\072\uffba\073\uffba\076\uffba\077\uffba\100\uffba\106" +
    "\uffba\110\uffba\114\uffba\122\uffba\130\uffba\131\uffba\132\uffba" +
    "\001\002\000\136\003\uff1b\004\uff1b\005\uff1b\006\uff1b\007" +
    "\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\015\uff1b\017\uff1b" +
    "\020\uff1b\021\uff1b\024\uff1b\027\uff1b\030\uff1b\034\uff1b\035" +
    "\uff1b\036\uff1b\037\uff1b\040\uff1b\041\uff1b\042\uff1b\043\uff1b" +
    "\054\uff1b\055\uff1b\056\uff1b\057\uff1b\061\uff1b\062\uff1b\064" +
    "\uff1b\065\uff1b\066\uff1b\067\uff1b\072\uff1b\073\uff1b\076\uff1b" +
    "\077\uff1b\100\uff1b\106\uff1b\110\uff1b\114\uff1b\122\uff1b\130" +
    "\uff1b\131\uff1b\132\uff1b\001\002\000\136\003\uff1c\004\uff1c" +
    "\005\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013" +
    "\uff1c\015\uff1c\017\uff1c\020\uff1c\021\uff1c\024\uff1c\027\uff1c" +
    "\030\uff1c\034\uff1c\035\uff1c\036\uff1c\037\uff1c\040\uff1c\041" +
    "\uff1c\042\uff1c\043\uff1c\054\uff1c\055\uff1c\056\uff1c\057\uff1c" +
    "\061\uff1c\062\uff1c\064\uff1c\065\uff1c\066\uff1c\067\uff1c\072" +
    "\uff1c\073\uff1c\076\uff1c\077\uff1c\100\uff1c\106\uff1c\110\uff1c" +
    "\114\uff1c\122\uff1c\130\uff1c\131\uff1c\132\uff1c\001\002\000" +
    "\136\003\uff1f\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010\uff1f" +
    "\011\uff1f\012\uff1f\013\uff1f\015\uff1f\017\uff1f\020\uff1f\021" +
    "\uff1f\024\uff1f\027\uff1f\030\uff1f\034\uff1f\035\uff1f\036\uff1f" +
    "\037\uff1f\040\uff1f\041\uff1f\042\uff1f\043\uff1f\054\uff1f\055" +
    "\uff1f\056\uff1f\057\uff1f\061\uff1f\062\uff1f\064\uff1f\065\uff1f" +
    "\066\uff1f\067\uff1f\072\uff1f\073\uff1f\076\uff1f\077\uff1f\100" +
    "\uff1f\106\uff1f\110\uff1f\114\uff1f\122\uff1f\130\uff1f\131\uff1f" +
    "\132\uff1f\001\002\000\136\003\uff1e\004\uff1e\005\uff1e\006" +
    "\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e\015\uff1e" +
    "\017\uff1e\020\uff1e\021\uff1e\024\uff1e\027\uff1e\030\uff1e\034" +
    "\uff1e\035\uff1e\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e" +
    "\043\uff1e\054\uff1e\055\uff1e\056\uff1e\057\uff1e\061\uff1e\062" +
    "\uff1e\064\uff1e\065\uff1e\066\uff1e\067\uff1e\072\uff1e\073\uff1e" +
    "\076\uff1e\077\uff1e\100\uff1e\106\uff1e\110\uff1e\114\uff1e\122" +
    "\uff1e\130\uff1e\131\uff1e\132\uff1e\001\002\000\032\003\037" +
    "\006\044\007\126\015\127\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\031\001\002\000\010" +
    "\003\134\007\133\015\132\001\002\000\136\003\uff42\004" +
    "\uff42\005\uff42\006\uff42\007\uff42\010\uff42\011\uff42\012\uff42" +
    "\013\uff42\015\uff42\017\uff42\020\uff42\021\uff42\024\uff42\027" +
    "\uff42\030\uff42\034\uff42\035\uff42\036\uff42\037\uff42\040\uff42" +
    "\041\uff42\042\uff42\043\uff42\054\uff42\055\uff42\056\uff42\057" +
    "\uff42\061\uff42\062\uff42\064\uff42\065\uff42\066\uff42\067\uff42" +
    "\072\uff42\073\uff42\076\uff42\077\uff42\100\uff42\106\uff42\110" +
    "\uff42\114\uff42\122\uff42\130\uff42\131\uff42\132\uff42\001\002" +
    "\000\026\003\037\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\031\001\002\000\016" +
    "\003\uff4f\007\uff4f\013\106\015\uff4f\034\105\035\103\001" +
    "\002\000\016\003\uff4b\007\uff4b\013\106\015\uff4b\034\105" +
    "\035\103\001\002\000\026\003\137\006\044\036\045\037" +
    "\043\061\034\062\041\064\042\065\035\066\046\067\031" +
    "\001\002\000\136\003\uff43\004\uff43\005\uff43\006\uff43\007" +
    "\uff43\010\uff43\011\uff43\012\uff43\013\uff43\015\uff43\017\uff43" +
    "\020\uff43\021\uff43\024\uff43\027\uff43\030\uff43\034\uff43\035" +
    "\uff43\036\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43" +
    "\054\uff43\055\uff43\056\uff43\057\uff43\061\uff43\062\uff43\064" +
    "\uff43\065\uff43\066\uff43\067\uff43\072\uff43\073\uff43\076\uff43" +
    "\077\uff43\100\uff43\106\uff43\110\uff43\114\uff43\122\uff43\130" +
    "\uff43\131\uff43\132\uff43\001\002\000\026\003\037\006\044" +
    "\036\045\037\043\061\034\062\041\064\042\065\035\066" +
    "\046\067\031\001\002\000\016\003\uff4d\007\uff4d\013\106" +
    "\015\uff4d\034\105\035\103\001\002\000\016\003\uff4e\007" +
    "\uff4e\013\106\015\uff4e\034\105\035\103\001\002\000\020" +
    "\003\uff4c\004\054\005\057\007\uff4c\010\055\011\056\015" +
    "\uff4c\001\002\000\026\003\037\006\044\036\045\037\043" +
    "\061\034\062\041\064\042\065\035\066\046\067\031\001" +
    "\002\000\014\013\106\015\uffcf\024\uffcf\034\105\035\103" +
    "\001\002\000\012\006\145\015\uffce\021\140\024\uffce\001" +
    "\002\000\006\015\024\024\144\001\002\000\106\002\uffd2" +
    "\003\uffd2\006\uffd2\021\uffd2\024\uffd2\030\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\061\uffd2\062\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\100\uffd2\106\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\114\uffd2\115\uffd2\122\uffd2\126\uffd2\130\uffd2\131\uffd2\132" +
    "\uffd2\001\002\000\016\003\150\007\146\074\017\111\005" +
    "\112\006\115\016\001\002\000\004\027\u01dd\001\002\000" +
    "\006\003\u01db\062\u01dc\001\002\000\004\062\u01da\001\002" +
    "\000\016\007\154\015\152\074\017\111\005\112\006\115" +
    "\016\001\002\000\014\003\u01d6\074\017\111\005\112\006" +
    "\115\016\001\002\000\004\062\u01d4\001\002\000\004\027" +
    "\155\001\002\000\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\074\017\075\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111" +
    "\005\112\006\114\uffe8\115\016\122\uffe8\126\161\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\102\003\uffe8\006\uffe8\021" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\072\uffe8\074\017\075\015\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\111\005\112\006\114\uffe8\115\016\122\uffe8\126" +
    "\161\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037" +
    "\006\044\021\175\030\204\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\031\072\202\076\170\100\217\106\171\110" +
    "\176\114\177\122\206\130\211\131\210\132\172\001\002" +
    "\000\004\062\022\001\002\000\004\062\022\001\002\000" +
    "\006\015\024\024\163\001\002\000\106\002\uffd4\003\uffd4" +
    "\006\uffd4\021\uffd4\024\uffd4\030\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\061\uffd4\062\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\072\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\100\uffd4\106\uffd4\110\uffd4\111\uffd4\112\uffd4\114\uffd4" +
    "\115\uffd4\122\uffd4\126\uffd4\130\uffd4\131\uffd4\132\uffd4\001" +
    "\002\000\072\003\uffe7\006\uffe7\021\uffe7\030\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\061\uffe7\062" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\072\uffe7\073\uffe7" +
    "\076\uffe7\077\uffe7\100\uffe7\106\uffe7\110\uffe7\114\uffe7\122" +
    "\uffe7\130\uffe7\131\uffe7\132\uffe7\001\002\000\026\003\037" +
    "\006\044\036\045\037\043\061\034\062\041\064\042\065" +
    "\035\066\046\067\031\001\002\000\072\003\uffe1\006\uffe1" +
    "\021\uffe1\030\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\072\uffe1\073\uffe1\076\uffe1\077\uffe1\100\uffe1\106" +
    "\uffe1\110\uffe1\114\uffe1\122\uffe1\130\uffe1\131\uffe1\132\uffe1" +
    "\001\002\000\072\003\uffe9\006\uffe9\021\uffe9\030\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\061\uffe9" +
    "\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072\uffe9\073" +
    "\uffe9\076\uffe9\077\uffe9\100\uffe9\106\uffe9\110\uffe9\114\uffe9" +
    "\122\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002\000\074\003" +
    "\uffd8\006\uffd8\021\uffd8\024\u01cf\030\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\061\uffd8\062\uffd8\064" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\072\uffd8\073\uffd8\076\uffd8" +
    "\077\uffd8\100\uffd8\106\uffd8\110\uffd8\114\uffd8\122\uffd8\130" +
    "\uffd8\131\uffd8\132\uffd8\001\002\000\006\003\u01a8\006\u01a9" +
    "\001\002\000\006\003\u0194\006\u0195\001\002\000\072\003" +
    "\uffe6\006\uffe6\021\uffe6\030\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\061\uffe6\062\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\076\uffe6\077\uffe6" +
    "\100\uffe6\106\uffe6\110\uffe6\114\uffe6\122\uffe6\130\uffe6\131" +
    "\uffe6\132\uffe6\001\002\000\072\003\uffe4\006\uffe4\021\uffe4" +
    "\030\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\061\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\072\uffe4\073\uffe4\076\uffe4\077\uffe4\100\uffe4\106\uffe4\110" +
    "\uffe4\114\uffe4\122\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002" +
    "\000\026\003\037\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\031\001\002\000\006" +
    "\003\u0160\006\u0161\001\002\000\022\003\u015b\024\u015c\061" +
    "\034\062\u015d\064\042\065\035\066\046\067\031\001\002" +
    "\000\110\003\uffbd\006\uffbd\007\uffbd\013\106\015\uffbd\021" +
    "\uffbd\024\uffbd\027\uffbd\030\uffbd\034\105\035\103\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\061\uffbd\062" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd\073\uffbd" +
    "\076\uffbd\077\uffbd\100\uffbd\106\uffbd\110\uffbd\114\uffbd\122" +
    "\uffbd\130\uffbd\131\uffbd\132\uffbd\001\002\000\072\003\uffe2" +
    "\006\uffe2\021\uffe2\030\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\061\uffe2\062\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\072\uffe2\073\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\106\uffe2\110\uffe2\114\uffe2\122\uffe2\130\uffe2\131\uffe2" +
    "\132\uffe2\001\002\000\074\003\uffd9\006\uffd9\021\uffd9\024" +
    "\u0159\030\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\072\uffd9\073\uffd9\076\uffd9\077\uffd9\100\uffd9\106\uffd9" +
    "\110\uffd9\114\uffd9\122\uffd9\130\uffd9\131\uffd9\132\uffd9\001" +
    "\002\000\102\003\uffbe\006\uffbe\007\uffbe\015\uffbe\021\uffbe" +
    "\024\uffbe\027\uffbe\030\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\072\uffbe\073\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\106\uffbe\110\uffbe\114\uffbe\122\uffbe\130\uffbe\131\uffbe" +
    "\132\uffbe\001\002\000\016\002\ufff1\074\ufff1\111\ufff1\112" +
    "\ufff1\115\ufff1\126\ufff1\001\002\000\026\003\037\006\044" +
    "\036\045\037\043\061\034\062\041\064\042\065\035\066" +
    "\046\067\031\001\002\000\006\003\371\006\372\001\002" +
    "\000\026\003\037\006\044\036\045\037\043\061\034\062" +
    "\041\064\042\065\035\066\046\067\031\001\002\000\010" +
    "\003\346\006\350\062\347\001\002\000\006\003\246\006" +
    "\343\001\002\000\072\003\uffcb\006\uffcb\021\uffcb\030\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\061" +
    "\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb" +
    "\073\uffcb\076\uffcb\077\uffcb\100\uffcb\106\uffcb\110\uffcb\114" +
    "\uffcb\122\uffcb\130\uffcb\131\uffcb\132\uffcb\001\002\000\072" +
    "\003\uffe5\006\uffe5\021\uffe5\030\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\061\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\072\uffe5\073\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\106\uffe5\110\uffe5\114\uffe5\122\uffe5\130\uffe5" +
    "\131\uffe5\132\uffe5\001\002\000\074\003\uffdf\006\uffdf\021" +
    "\uffdf\024\342\030\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\072\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf" +
    "\106\uffdf\110\uffdf\114\uffdf\122\uffdf\130\uffdf\131\uffdf\132" +
    "\uffdf\001\002\000\026\003\037\006\044\036\045\037\043" +
    "\061\034\062\041\064\042\065\035\066\046\067\031\001" +
    "\002\000\072\003\uffe3\006\uffe3\021\uffe3\030\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\061\uffe3\062" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\106\uffe3\110\uffe3\114\uffe3\122" +
    "\uffe3\130\uffe3\131\uffe3\132\uffe3\001\002\000\006\003\241" +
    "\027\242\001\002\000\136\003\uff44\004\uff44\005\uff44\006" +
    "\124\007\uff44\010\uff44\011\uff44\012\uff44\013\uff44\015\uff44" +
    "\017\uff44\020\uff44\021\225\024\uff44\027\uff44\030\uff44\034" +
    "\uff44\035\uff44\036\122\037\123\040\223\041\221\042\224" +
    "\043\222\054\uff44\055\uff44\056\uff44\057\uff44\061\uff44\062" +
    "\uff44\064\uff44\065\uff44\066\uff44\067\uff44\072\uff44\073\uff44" +
    "\076\uff44\077\uff44\100\uff44\106\uff44\110\uff44\114\uff44\122" +
    "\uff44\130\uff44\131\uff44\132\uff44\001\002\000\026\003\240" +
    "\006\044\036\045\037\043\061\034\062\041\064\042\065" +
    "\035\066\046\067\031\001\002\000\026\003\236\006\044" +
    "\036\045\037\043\061\034\062\041\064\042\065\035\066" +
    "\046\067\031\001\002\000\026\003\234\006\044\036\045" +
    "\037\043\061\034\062\041\064\042\065\035\066\046\067" +
    "\031\001\002\000\026\003\232\006\044\036\045\037\043" +
    "\061\034\062\041\064\042\065\035\066\046\067\031\001" +
    "\002\000\040\003\227\006\044\021\175\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\031\001\002\000\102\003\uff14" +
    "\006\uff14\007\uff14\015\uff14\021\uff14\024\uff14\027\uff14\030" +
    "\uff14\036\uff14\037\uff14\040\uff14\041\uff14\042\uff14\043\uff14" +
    "\061\uff14\062\uff14\064\uff14\065\uff14\066\uff14\067\uff14\072" +
    "\uff14\073\uff14\076\uff14\077\uff14\100\uff14\106\uff14\110\uff14" +
    "\114\uff14\122\uff14\130\uff14\131\uff14\132\uff14\001\002\000" +
    "\112\003\uff0f\004\054\005\057\006\uff0f\007\uff0f\010\055" +
    "\011\056\015\uff0f\021\uff0f\024\uff0f\027\uff0f\030\uff0f\036" +
    "\uff0f\037\uff0f\040\uff0f\041\uff0f\042\uff0f\043\uff0f\061\uff0f" +
    "\062\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\072\uff0f\073" +
    "\uff0f\076\uff0f\077\uff0f\100\uff0f\106\uff0f\110\uff0f\114\uff0f" +
    "\122\uff0f\130\uff0f\131\uff0f\132\uff0f\001\002\000\110\003" +
    "\uff15\006\uff15\007\uff15\013\106\015\uff15\021\uff15\024\uff15" +
    "\027\uff15\030\uff15\034\105\035\103\036\uff15\037\uff15\040" +
    "\uff15\041\uff15\042\uff15\043\uff15\061\uff15\062\uff15\064\uff15" +
    "\065\uff15\066\uff15\067\uff15\072\uff15\073\uff15\076\uff15\077" +
    "\uff15\100\uff15\106\uff15\110\uff15\114\uff15\122\uff15\130\uff15" +
    "\131\uff15\132\uff15\001\002\000\110\003\uff17\006\uff17\007" +
    "\uff17\013\106\015\uff17\021\uff17\024\uff17\027\uff17\030\uff17" +
    "\034\105\035\103\036\uff17\037\uff17\040\uff17\041\uff17\042" +
    "\uff17\043\uff17\061\uff17\062\uff17\064\uff17\065\uff17\066\uff17" +
    "\067\uff17\072\uff17\073\uff17\076\uff17\077\uff17\100\uff17\106" +
    "\uff17\110\uff17\114\uff17\122\uff17\130\uff17\131\uff17\132\uff17" +
    "\001\002\000\112\003\uff11\004\054\005\057\006\uff11\007" +
    "\uff11\010\055\011\056\015\uff11\021\uff11\024\uff11\027\uff11" +
    "\030\uff11\036\uff11\037\uff11\040\uff11\041\uff11\042\uff11\043" +
    "\uff11\061\uff11\062\uff11\064\uff11\065\uff11\066\uff11\067\uff11" +
    "\072\uff11\073\uff11\076\uff11\077\uff11\100\uff11\106\uff11\110" +
    "\uff11\114\uff11\122\uff11\130\uff11\131\uff11\132\uff11\001\002" +
    "\000\110\003\uff19\006\uff19\007\uff19\013\106\015\uff19\021" +
    "\uff19\024\uff19\027\uff19\030\uff19\034\105\035\103\036\uff19" +
    "\037\uff19\040\uff19\041\uff19\042\uff19\043\uff19\061\uff19\062" +
    "\uff19\064\uff19\065\uff19\066\uff19\067\uff19\072\uff19\073\uff19" +
    "\076\uff19\077\uff19\100\uff19\106\uff19\110\uff19\114\uff19\122" +
    "\uff19\130\uff19\131\uff19\132\uff19\001\002\000\112\003\uff13" +
    "\004\054\005\057\006\uff13\007\uff13\010\055\011\056\015" +
    "\uff13\021\uff13\024\uff13\027\uff13\030\uff13\036\uff13\037\uff13" +
    "\040\uff13\041\uff13\042\uff13\043\uff13\061\uff13\062\uff13\064" +
    "\uff13\065\uff13\066\uff13\067\uff13\072\uff13\073\uff13\076\uff13" +
    "\077\uff13\100\uff13\106\uff13\110\uff13\114\uff13\122\uff13\130" +
    "\uff13\131\uff13\132\uff13\001\002\000\110\003\uff16\006\uff16" +
    "\007\uff16\013\106\015\uff16\021\uff16\024\uff16\027\uff16\030" +
    "\uff16\034\105\035\103\036\uff16\037\uff16\040\uff16\041\uff16" +
    "\042\uff16\043\uff16\061\uff16\062\uff16\064\uff16\065\uff16\066" +
    "\uff16\067\uff16\072\uff16\073\uff16\076\uff16\077\uff16\100\uff16" +
    "\106\uff16\110\uff16\114\uff16\122\uff16\130\uff16\131\uff16\132" +
    "\uff16\001\002\000\112\003\uff10\004\054\005\057\006\uff10" +
    "\007\uff10\010\055\011\056\015\uff10\021\uff10\024\uff10\027" +
    "\uff10\030\uff10\036\uff10\037\uff10\040\uff10\041\uff10\042\uff10" +
    "\043\uff10\061\uff10\062\uff10\064\uff10\065\uff10\066\uff10\067" +
    "\uff10\072\uff10\073\uff10\076\uff10\077\uff10\100\uff10\106\uff10" +
    "\110\uff10\114\uff10\122\uff10\130\uff10\131\uff10\132\uff10\001" +
    "\002\000\110\003\uff18\006\uff18\007\uff18\013\106\015\uff18" +
    "\021\uff18\024\uff18\027\uff18\030\uff18\034\105\035\103\036" +
    "\uff18\037\uff18\040\uff18\041\uff18\042\uff18\043\uff18\061\uff18" +
    "\062\uff18\064\uff18\065\uff18\066\uff18\067\uff18\072\uff18\073" +
    "\uff18\076\uff18\077\uff18\100\uff18\106\uff18\110\uff18\114\uff18" +
    "\122\uff18\130\uff18\131\uff18\132\uff18\001\002\000\112\003" +
    "\uff12\004\054\005\057\006\uff12\007\uff12\010\055\011\056" +
    "\015\uff12\021\uff12\024\uff12\027\uff12\030\uff12\036\uff12\037" +
    "\uff12\040\uff12\041\uff12\042\uff12\043\uff12\061\uff12\062\uff12" +
    "\064\uff12\065\uff12\066\uff12\067\uff12\072\uff12\073\uff12\076" +
    "\uff12\077\uff12\100\uff12\106\uff12\110\uff12\114\uff12\122\uff12" +
    "\130\uff12\131\uff12\132\uff12\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8" +
    "\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132" +
    "\uffe8\001\002\000\066\003\037\006\044\021\175\030\244" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\031\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\245\131\210\132\172\001\002\000\006\006\303\130\304" +
    "\001\002\000\006\003\246\006\247\001\002\000\006\007" +
    "\274\027\275\001\002\000\042\003\251\006\044\021\175" +
    "\027\250\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\031" +
    "\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\014\004\054\005\057\007" +
    "\266\010\055\011\056\001\002\000\006\007\253\027\254" +
    "\001\002\000\010\003\260\024\257\027\261\001\002\000" +
    "\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8" +
    "\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132" +
    "\uffe8\001\002\000\066\003\037\006\044\021\175\030\256" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\031\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\072\003\uffb0\006\uffb0" +
    "\021\uffb0\030\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\072\uffb0\073\uffb0\076\uffb0\077\uffb0\100\uffb0\106" +
    "\uffb0\110\uffb0\114\uffb0\122\uffb0\130\uffb0\131\uffb0\132\uffb0" +
    "\001\002\000\072\003\uffa4\006\uffa4\021\uffa4\030\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\061\uffa4" +
    "\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\072\uffa4\073" +
    "\uffa4\076\uffa4\077\uffa4\100\uffa4\106\uffa4\110\uffa4\114\uffa4" +
    "\122\uffa4\130\uffa4\131\uffa4\132\uffa4\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8" +
    "\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021\175" +
    "\030\263\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\031" +
    "\072\202\076\170\100\217\106\171\110\176\114\177\122" +
    "\206\130\211\131\210\132\172\001\002\000\072\003\uffb3" +
    "\006\uffb3\021\uffb3\030\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\072\uffb3\073\uffb3\076\uffb3\077\uffb3\100" +
    "\uffb3\106\uffb3\110\uffb3\114\uffb3\122\uffb3\130\uffb3\131\uffb3" +
    "\132\uffb3\001\002\000\066\003\037\006\044\021\175\030" +
    "\265\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\072\003\uffad\006" +
    "\uffad\021\uffad\030\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\061\uffad\062\uffad\064\uffad\065\uffad\066" +
    "\uffad\067\uffad\072\uffad\073\uffad\076\uffad\077\uffad\100\uffad" +
    "\106\uffad\110\uffad\114\uffad\122\uffad\130\uffad\131\uffad\132" +
    "\uffad\001\002\000\004\027\267\001\002\000\066\003\uffe8" +
    "\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110" +
    "\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002" +
    "\000\066\003\037\006\044\021\175\030\271\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\031\072\202\076\170\100" +
    "\217\106\171\110\176\114\177\122\206\130\211\131\210" +
    "\132\172\001\002\000\072\003\uffb2\006\uffb2\021\uffb2\030" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\072" +
    "\uffb2\073\uffb2\076\uffb2\077\uffb2\100\uffb2\106\uffb2\110\uffb2" +
    "\114\uffb2\122\uffb2\130\uffb2\131\uffb2\132\uffb2\001\002\000" +
    "\066\003\037\006\044\021\175\030\273\036\045\037\043" +
    "\040\165\041\215\042\207\043\205\061\034\062\220\064" +
    "\042\065\035\066\046\067\031\072\202\076\170\100\217" +
    "\106\171\110\176\114\177\122\206\130\211\131\210\132" +
    "\172\001\002\000\072\003\uffaf\006\uffaf\021\uffaf\030\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\061" +
    "\uffaf\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\072\uffaf" +
    "\073\uffaf\076\uffaf\077\uffaf\100\uffaf\106\uffaf\110\uffaf\114" +
    "\uffaf\122\uffaf\130\uffaf\131\uffaf\132\uffaf\001\002\000\004" +
    "\027\300\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072" +
    "\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8" +
    "\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006" +
    "\044\021\175\030\277\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\072\003\uffae\006\uffae\021\uffae\030\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\061\uffae\062\uffae\064" +
    "\uffae\065\uffae\066\uffae\067\uffae\072\uffae\073\uffae\076\uffae" +
    "\077\uffae\100\uffae\106\uffae\110\uffae\114\uffae\122\uffae\130" +
    "\uffae\131\uffae\132\uffae\001\002\000\066\003\uffe8\006\uffe8" +
    "\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114" +
    "\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066" +
    "\003\037\006\044\021\175\030\302\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\031\072\202\076\170\100\217\106" +
    "\171\110\176\114\177\122\206\130\211\131\210\132\172" +
    "\001\002\000\072\003\uffb1\006\uffb1\021\uffb1\030\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\061\uffb1" +
    "\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\072\uffb1\073" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\106\uffb1\110\uffb1\114\uffb1" +
    "\122\uffb1\130\uffb1\131\uffb1\132\uffb1\001\002\000\040\003" +
    "\037\006\044\021\175\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\001\002\000\006\003\305\006\306\001\002" +
    "\000\006\007\317\024\320\001\002\000\042\003\310\006" +
    "\044\021\175\024\307\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\001\002\000\072\003\uffa8\006\uffa8\021\uffa8" +
    "\030\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\072\uffa8\073\uffa8\076\uffa8\077\uffa8\100\uffa8\106\uffa8\110" +
    "\uffa8\114\uffa8\122\uffa8\130\uffa8\131\uffa8\132\uffa8\001\002" +
    "\000\014\004\054\005\057\007\315\010\055\011\056\001" +
    "\002\000\006\007\313\024\312\001\002\000\072\003\uffa9" +
    "\006\uffa9\021\uffa9\030\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\067\uffa9\072\uffa9\073\uffa9\076\uffa9\077\uffa9\100" +
    "\uffa9\106\uffa9\110\uffa9\114\uffa9\122\uffa9\130\uffa9\131\uffa9" +
    "\132\uffa9\001\002\000\074\003\uffa6\006\uffa6\021\uffa6\024" +
    "\314\030\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\061\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\072\uffa6\073\uffa6\076\uffa6\077\uffa6\100\uffa6\106\uffa6" +
    "\110\uffa6\114\uffa6\122\uffa6\130\uffa6\131\uffa6\132\uffa6\001" +
    "\002\000\072\003\uffac\006\uffac\021\uffac\030\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\061\uffac\062" +
    "\uffac\064\uffac\065\uffac\066\uffac\067\uffac\072\uffac\073\uffac" +
    "\076\uffac\077\uffac\100\uffac\106\uffac\110\uffac\114\uffac\122" +
    "\uffac\130\uffac\131\uffac\132\uffac\001\002\000\004\024\316" +
    "\001\002\000\072\003\uffab\006\uffab\021\uffab\030\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\061\uffab" +
    "\062\uffab\064\uffab\065\uffab\066\uffab\067\uffab\072\uffab\073" +
    "\uffab\076\uffab\077\uffab\100\uffab\106\uffab\110\uffab\114\uffab" +
    "\122\uffab\130\uffab\131\uffab\132\uffab\001\002\000\004\024" +
    "\321\001\002\000\072\003\uffa7\006\uffa7\021\uffa7\030\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\061" +
    "\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\072\uffa7" +
    "\073\uffa7\076\uffa7\077\uffa7\100\uffa7\106\uffa7\110\uffa7\114" +
    "\uffa7\122\uffa7\130\uffa7\131\uffa7\132\uffa7\001\002\000\072" +
    "\003\uffaa\006\uffaa\021\uffaa\030\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\061\uffaa\062\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\072\uffaa\073\uffaa\076\uffaa\077" +
    "\uffaa\100\uffaa\106\uffaa\110\uffaa\114\uffaa\122\uffaa\130\uffaa" +
    "\131\uffaa\132\uffaa\001\002\000\004\007\323\001\002\000" +
    "\004\024\324\001\002\000\072\003\uffa3\006\uffa3\021\uffa3" +
    "\030\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\072\uffa3\073\uffa3\076\uffa3\077\uffa3\100\uffa3\106\uffa3\110" +
    "\uffa3\114\uffa3\122\uffa3\130\uffa3\131\uffa3\132\uffa3\001\002" +
    "\000\066\003\037\006\044\021\175\030\326\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\031\072\202\076\170\100" +
    "\217\106\171\110\176\114\177\122\206\130\327\131\210" +
    "\132\172\001\002\000\004\130\334\001\002\000\006\003" +
    "\246\006\330\001\002\000\042\003\251\006\044\021\175" +
    "\027\250\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\031" +
    "\001\002\000\006\007\332\027\254\001\002\000\010\003" +
    "\260\024\333\027\261\001\002\000\072\003\uffa2\006\uffa2" +
    "\021\uffa2\030\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\072\uffa2\073\uffa2\076\uffa2\077\uffa2\100\uffa2\106" +
    "\uffa2\110\uffa2\114\uffa2\122\uffa2\130\uffa2\131\uffa2\132\uffa2" +
    "\001\002\000\004\006\335\001\002\000\040\003\037\006" +
    "\044\021\175\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\031\001\002\000\004\007\337\001\002\000\004\024\340" +
    "\001\002\000\072\003\uffa5\006\uffa5\021\uffa5\030\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\061\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\072\uffa5\073" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\106\uffa5\110\uffa5\114\uffa5" +
    "\122\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002\000\110\003" +
    "\uff0d\006\uff0d\007\uff0d\013\106\015\uff0d\021\uff0d\024\uff0d" +
    "\027\uff0d\030\uff0d\034\105\035\103\036\uff0d\037\uff0d\040" +
    "\uff0d\041\uff0d\042\uff0d\043\uff0d\061\uff0d\062\uff0d\064\uff0d" +
    "\065\uff0d\066\uff0d\067\uff0d\072\uff0d\073\uff0d\076\uff0d\077" +
    "\uff0d\100\uff0d\106\uff0d\110\uff0d\114\uff0d\122\uff0d\130\uff0d" +
    "\131\uff0d\132\uff0d\001\002\000\072\003\uffe0\006\uffe0\021" +
    "\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\072\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0" +
    "\110\uffe0\114\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001" +
    "\002\000\042\003\251\006\044\021\175\027\250\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\031\001\002\000\006" +
    "\007\345\027\254\001\002\000\006\003\260\027\261\001" +
    "\002\000\006\007\363\062\364\001\002\000\004\024\362" +
    "\001\002\000\010\003\352\007\351\062\353\001\002\000" +
    "\074\003\uff78\006\uff78\021\uff78\024\361\030\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\061\uff78\062" +
    "\uff78\064\uff78\065\uff78\066\uff78\067\uff78\072\uff78\073\uff78" +
    "\076\uff78\077\uff78\100\uff78\106\uff78\110\uff78\114\uff78\122" +
    "\uff78\130\uff78\131\uff78\132\uff78\001\002\000\004\024\360" +
    "\001\002\000\006\003\355\007\354\001\002\000\074\003" +
    "\uff79\006\uff79\021\uff79\024\357\030\uff79\036\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\061\uff79\062\uff79\064" +
    "\uff79\065\uff79\066\uff79\067\uff79\072\uff79\073\uff79\076\uff79" +
    "\077\uff79\100\uff79\106\uff79\110\uff79\114\uff79\122\uff79\130" +
    "\uff79\131\uff79\132\uff79\001\002\000\004\024\356\001\002" +
    "\000\072\003\uff7f\006\uff7f\021\uff7f\030\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\061\uff7f\062\uff7f" +
    "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\072\uff7f\073\uff7f\076" +
    "\uff7f\077\uff7f\100\uff7f\106\uff7f\110\uff7f\114\uff7f\122\uff7f" +
    "\130\uff7f\131\uff7f\132\uff7f\001\002\000\072\003\uff83\006" +
    "\uff83\021\uff83\030\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\061\uff83\062\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\072\uff83\073\uff83\076\uff83\077\uff83\100\uff83" +
    "\106\uff83\110\uff83\114\uff83\122\uff83\130\uff83\131\uff83\132" +
    "\uff83\001\002\000\072\003\uff7c\006\uff7c\021\uff7c\030\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\061" +
    "\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\072\uff7c" +
    "\073\uff7c\076\uff7c\077\uff7c\100\uff7c\106\uff7c\110\uff7c\114" +
    "\uff7c\122\uff7c\130\uff7c\131\uff7c\132\uff7c\001\002\000\072" +
    "\003\uff82\006\uff82\021\uff82\030\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\061\uff82\062\uff82\064\uff82" +
    "\065\uff82\066\uff82\067\uff82\072\uff82\073\uff82\076\uff82\077" +
    "\uff82\100\uff82\106\uff82\110\uff82\114\uff82\122\uff82\130\uff82" +
    "\131\uff82\132\uff82\001\002\000\072\003\uff7e\006\uff7e\021" +
    "\uff7e\030\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\061\uff7e\062\uff7e\064\uff7e\065\uff7e\066\uff7e\067" +
    "\uff7e\072\uff7e\073\uff7e\076\uff7e\077\uff7e\100\uff7e\106\uff7e" +
    "\110\uff7e\114\uff7e\122\uff7e\130\uff7e\131\uff7e\132\uff7e\001" +
    "\002\000\004\024\367\001\002\000\004\007\365\001\002" +
    "\000\004\024\366\001\002\000\072\003\uff80\006\uff80\021" +
    "\uff80\030\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\061\uff80\062\uff80\064\uff80\065\uff80\066\uff80\067" +
    "\uff80\072\uff80\073\uff80\076\uff80\077\uff80\100\uff80\106\uff80" +
    "\110\uff80\114\uff80\122\uff80\130\uff80\131\uff80\132\uff80\001" +
    "\002\000\072\003\uff7d\006\uff7d\021\uff7d\030\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\061\uff7d\062" +
    "\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\072\uff7d\073\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\106\uff7d\110\uff7d\114\uff7d\122" +
    "\uff7d\130\uff7d\131\uff7d\132\uff7d\001\002\000\110\003\uff0c" +
    "\006\uff0c\007\uff0c\013\106\015\uff0c\021\uff0c\024\uff0c\027" +
    "\uff0c\030\uff0c\034\105\035\103\036\uff0c\037\uff0c\040\uff0c" +
    "\041\uff0c\042\uff0c\043\uff0c\061\uff0c\062\uff0c\064\uff0c\065" +
    "\uff0c\066\uff0c\067\uff0c\072\uff0c\073\uff0c\076\uff0c\077\uff0c" +
    "\100\uff0c\106\uff0c\110\uff0c\114\uff0c\122\uff0c\130\uff0c\131" +
    "\uff0c\132\uff0c\001\002\000\006\007\u014f\027\u0150\001\002" +
    "\000\030\003\375\006\u0100\027\u0101\036\045\037\043\061" +
    "\034\062\377\064\042\065\035\066\046\067\031\001\002" +
    "\000\020\004\uff2c\005\uff2c\007\uff2c\010\uff2c\011\uff2c\012" +
    "\uff2c\027\uff2c\001\002\000\020\004\u011f\005\u0122\007\u013b" +
    "\010\u0120\011\u0121\012\u011e\027\u013c\001\002\000\016\004" +
    "\u0118\005\u011b\007\u0136\010\u0119\011\u011a\012\u0116\001\002" +
    "\000\020\004\uff2b\005\uff2b\007\uff2b\010\uff2b\011\uff2b\012" +
    "\uff2b\027\uff2b\001\002\000\026\004\uff2f\005\uff2f\006\u0132" +
    "\007\uff2f\010\uff2f\011\uff2f\012\uff2f\027\uff2f\036\122\037" +
    "\123\001\002\000\026\003\u0115\006\u0100\036\045\037\043" +
    "\061\034\062\377\064\042\065\035\066\046\067\031\001" +
    "\002\000\006\073\uff8b\077\uff8b\001\002\000\006\073\u0106" +
    "\077\u0103\001\002\000\004\023\u0112\001\002\000\004\030" +
    "\u0111\001\002\000\010\030\uff8c\073\uff8c\077\uff8c\001\002" +
    "\000\016\003\u0107\061\034\064\042\065\035\066\046\067" +
    "\031\001\002\000\004\023\u010f\001\002\000\074\003\uffe8" +
    "\006\uffe8\021\uffe8\023\u010a\030\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\072\003\037\006\044\021" +
    "\175\030\uff87\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\031\072\202\073\uff87\076\170\077\uff87\100\217\106\171" +
    "\110\176\114\177\122\206\130\211\131\210\132\172\001" +
    "\002\000\074\003\uffe8\006\uffe8\021\uffe8\027\u010b\030\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8" +
    "\073\uffe8\076\uffe8\077\uffe8\100\uffe8\106\uffe8\110\uffe8\114" +
    "\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066" +
    "\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106" +
    "\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8" +
    "\001\002\000\072\003\037\006\044\021\175\030\uff8a\036" +
    "\045\037\043\040\165\041\215\042\207\043\205\061\034" +
    "\062\220\064\042\065\035\066\046\067\031\072\202\073" +
    "\uff8a\076\170\077\uff8a\100\217\106\171\110\176\114\177" +
    "\122\206\130\211\131\210\132\172\001\002\000\066\003" +
    "\037\006\044\021\175\030\u010e\036\045\037\043\040\165" +
    "\041\215\042\207\043\205\061\034\062\220\064\042\065" +
    "\035\066\046\067\031\072\202\076\170\100\217\106\171" +
    "\110\176\114\177\122\206\130\211\131\210\132\172\001" +
    "\002\000\010\030\uff89\073\uff89\077\uff89\001\002\000\072" +
    "\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\072\003\037\006\044\021" +
    "\175\030\uff88\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\031\072\202\073\uff88\076\170\077\uff88\100\217\106\171" +
    "\110\176\114\177\122\206\130\211\131\210\132\172\001" +
    "\002\000\072\003\uff8f\006\uff8f\021\uff8f\030\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\061\uff8f\062" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\072\uff8f\073\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\106\uff8f\110\uff8f\114\uff8f\122" +
    "\uff8f\130\uff8f\131\uff8f\132\uff8f\001\002\000\072\003\uffe8" +
    "\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\072\003\037\006\044\021\175\030" +
    "\uff86\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\072" +
    "\202\073\uff86\076\170\077\uff86\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\016\004\u011f\005\u0122\007\u0131\010\u0120\011\u0121\012\u011e" +
    "\001\002\000\016\004\u0118\005\u011b\007\u0117\010\u0119\011" +
    "\u011a\012\u0116\001\002\000\026\003\u011d\006\u0100\036\045" +
    "\037\043\061\034\062\377\064\042\065\035\066\046\067" +
    "\031\001\002\000\020\004\uff20\005\uff20\007\uff20\010\uff20" +
    "\011\uff20\012\uff20\027\uff20\001\002\000\026\003\u011d\006" +
    "\u0100\036\045\037\043\061\034\062\377\064\042\065\035" +
    "\066\046\067\031\001\002\000\026\003\u011d\006\u0100\036" +
    "\045\037\043\061\034\062\377\064\042\065\035\066\046" +
    "\067\031\001\002\000\026\003\u011d\006\u0100\036\045\037" +
    "\043\061\034\062\377\064\042\065\035\066\046\067\031" +
    "\001\002\000\026\003\u011d\006\u0100\036\045\037\043\061" +
    "\034\062\377\064\042\065\035\066\046\067\031\001\002" +
    "\000\020\004\uff23\005\uff23\007\uff23\010\uff23\011\uff23\012" +
    "\uff23\027\uff23\001\002\000\014\004\u0118\005\u011b\010\u0119" +
    "\011\u011a\012\u0116\001\002\000\026\003\u012c\006\u0100\036" +
    "\045\037\043\061\034\062\377\064\042\065\035\066\046" +
    "\067\031\001\002\000\026\003\u012a\006\u0100\036\045\037" +
    "\043\061\034\062\377\064\042\065\035\066\046\067\031" +
    "\001\002\000\026\003\u0128\006\u0100\036\045\037\043\061" +
    "\034\062\377\064\042\065\035\066\046\067\031\001\002" +
    "\000\026\003\u0126\006\u0100\036\045\037\043\061\034\062" +
    "\377\064\042\065\035\066\046\067\031\001\002\000\026" +
    "\003\u0124\006\u0100\036\045\037\043\061\034\062\377\064" +
    "\042\065\035\066\046\067\031\001\002\000\020\004\uff33" +
    "\005\uff33\007\uff33\010\uff33\011\uff33\012\uff33\027\uff33\001" +
    "\002\000\020\004\u0118\005\u011b\007\uff28\010\u0119\011\u011a" +
    "\012\u0116\027\uff28\001\002\000\020\004\uff32\005\uff32\007" +
    "\uff32\010\uff32\011\uff32\012\uff32\027\uff32\001\002\000\020" +
    "\004\u0118\005\u011b\007\uff27\010\u0119\011\u011a\012\u0116\027" +
    "\uff27\001\002\000\020\004\uff34\005\u0122\007\uff34\010\uff34" +
    "\011\u0121\012\u011e\027\uff34\001\002\000\020\004\u0118\005" +
    "\u011b\007\uff29\010\u0119\011\u011a\012\u0116\027\uff29\001\002" +
    "\000\020\004\uff35\005\u0122\007\uff35\010\uff35\011\u0121\012" +
    "\u011e\027\uff35\001\002\000\020\004\u0118\005\u011b\007\uff2a" +
    "\010\u0119\011\u011a\012\u0116\027\uff2a\001\002\000\020\004" +
    "\uff31\005\uff31\007\uff31\010\uff31\011\uff31\012\uff31\027\uff31" +
    "\001\002\000\020\004\u0118\005\u011b\007\uff26\010\u0119\011" +
    "\u011a\012\u0116\027\uff26\001\002\000\020\004\uff22\005\uff22" +
    "\007\uff22\010\uff22\011\uff22\012\uff22\027\uff22\001\002\000" +
    "\020\004\uff24\005\u0122\007\uff24\010\uff24\011\u0121\012\u011e" +
    "\027\uff24\001\002\000\020\004\uff25\005\u0122\007\uff25\010" +
    "\uff25\011\u0121\012\u011e\027\uff25\001\002\000\020\004\uff21" +
    "\005\uff21\007\uff21\010\uff21\011\uff21\012\uff21\027\uff21\001" +
    "\002\000\020\004\uff30\005\uff30\007\uff30\010\uff30\011\uff30" +
    "\012\uff30\027\uff30\001\002\000\032\003\037\006\044\007" +
    "\u0134\015\127\036\045\037\043\061\034\062\041\064\042" +
    "\065\035\066\046\067\031\001\002\000\010\003\134\007" +
    "\u0135\015\132\001\002\000\020\004\uff2d\005\uff2d\007\uff2d" +
    "\010\uff2d\011\uff2d\012\uff2d\027\uff2d\001\002\000\020\004" +
    "\uff2e\005\uff2e\007\uff2e\010\uff2e\011\uff2e\012\uff2e\027\uff2e" +
    "\001\002\000\004\027\u0137\001\002\000\006\073\uff8b\077" +
    "\uff8b\001\002\000\006\073\u0106\077\u0103\001\002\000\004" +
    "\030\u013a\001\002\000\072\003\uff93\006\uff93\021\uff93\030" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\061\uff93\062\uff93\064\uff93\065\uff93\066\uff93\067\uff93\072" +
    "\uff93\073\uff93\076\uff93\077\uff93\100\uff93\106\uff93\110\uff93" +
    "\114\uff93\122\uff93\130\uff93\131\uff93\132\uff93\001\002\000" +
    "\006\003\u0140\027\u0141\001\002\000\006\073\uff8b\077\uff8b" +
    "\001\002\000\006\073\u0106\077\u0103\001\002\000\004\030" +
    "\u013f\001\002\000\072\003\uff92\006\uff92\021\uff92\030\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\061" +
    "\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067\uff92\072\uff92" +
    "\073\uff92\076\uff92\077\uff92\100\uff92\106\uff92\110\uff92\114" +
    "\uff92\122\uff92\130\uff92\131\uff92\132\uff92\001\002\000\006" +
    "\073\uff8b\077\uff8b\001\002\000\010\030\uff8b\073\uff8b\077" +
    "\uff8b\001\002\000\010\030\u0144\073\u0106\077\u0103\001\002" +
    "\000\010\030\uff8b\073\uff8b\077\uff8b\001\002\000\072\003" +
    "\uff94\006\uff94\021\uff94\030\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\061\uff94\062\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\072\uff94\073\uff94\076\uff94\077\uff94" +
    "\100\uff94\106\uff94\110\uff94\114\uff94\122\uff94\130\uff94\131" +
    "\uff94\132\uff94\001\002\000\010\030\u0148\073\u0106\077\u0103" +
    "\001\002\000\010\030\uff84\073\uff84\077\u0103\001\002\000" +
    "\006\030\uff8b\073\uff8b\001\002\000\072\003\uff95\006\uff95" +
    "\021\uff95\030\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\072\uff95\073\uff95\076\uff95\077\uff95\100\uff95\106" +
    "\uff95\110\uff95\114\uff95\122\uff95\130\uff95\131\uff95\132\uff95" +
    "\001\002\000\006\030\u014a\073\u0106\001\002\000\072\003" +
    "\uff8d\006\uff8d\021\uff8d\030\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\061\uff8d\062\uff8d\064\uff8d\065" +
    "\uff8d\066\uff8d\067\uff8d\072\uff8d\073\uff8d\076\uff8d\077\uff8d" +
    "\100\uff8d\106\uff8d\110\uff8d\114\uff8d\122\uff8d\130\uff8d\131" +
    "\uff8d\132\uff8d\001\002\000\006\030\uff85\073\uff85\001\002" +
    "\000\006\073\u0106\077\u0103\001\002\000\004\030\u014e\001" +
    "\002\000\072\003\uff91\006\uff91\021\uff91\030\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\061\uff91\062" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\072\uff91\073\uff91" +
    "\076\uff91\077\uff91\100\uff91\106\uff91\110\uff91\114\uff91\122" +
    "\uff91\130\uff91\131\uff91\132\uff91\001\002\000\004\027\u0154" +
    "\001\002\000\006\073\uff8b\077\uff8b\001\002\000\006\073" +
    "\u0106\077\u0103\001\002\000\004\030\u0153\001\002\000\072" +
    "\003\uff8e\006\uff8e\021\uff8e\030\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\061\uff8e\062\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\067\uff8e\072\uff8e\073\uff8e\076\uff8e\077" +
    "\uff8e\100\uff8e\106\uff8e\110\uff8e\114\uff8e\122\uff8e\130\uff8e" +
    "\131\uff8e\132\uff8e\001\002\000\006\073\uff8b\077\uff8b\001" +
    "\002\000\006\073\u0106\077\u0103\001\002\000\004\030\u0157" +
    "\001\002\000\072\003\uff90\006\uff90\021\uff90\030\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\061\uff90" +
    "\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90\072\uff90\073" +
    "\uff90\076\uff90\077\uff90\100\uff90\106\uff90\110\uff90\114\uff90" +
    "\122\uff90\130\uff90\131\uff90\132\uff90\001\002\000\110\003" +
    "\uff0b\006\uff0b\007\uff0b\013\106\015\uff0b\021\uff0b\024\uff0b" +
    "\027\uff0b\030\uff0b\034\105\035\103\036\uff0b\037\uff0b\040" +
    "\uff0b\041\uff0b\042\uff0b\043\uff0b\061\uff0b\062\uff0b\064\uff0b" +
    "\065\uff0b\066\uff0b\067\uff0b\072\uff0b\073\uff0b\076\uff0b\077" +
    "\uff0b\100\uff0b\106\uff0b\110\uff0b\114\uff0b\122\uff0b\130\uff0b" +
    "\131\uff0b\132\uff0b\001\002\000\072\003\uffde\006\uffde\021" +
    "\uffde\030\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\072\uffde\073\uffde\076\uffde\077\uffde\100\uffde\106\uffde" +
    "\110\uffde\114\uffde\122\uffde\130\uffde\131\uffde\132\uffde\001" +
    "\002\000\074\003\uffd7\006\uffd7\021\uffd7\024\u015f\030\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\061" +
    "\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072\uffd7" +
    "\073\uffd7\076\uffd7\077\uffd7\100\uffd7\106\uffd7\110\uffd7\114" +
    "\uffd7\122\uffd7\130\uffd7\131\uffd7\132\uffd7\001\002\000\072" +
    "\003\uffd5\006\uffd5\021\uffd5\030\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\061\uffd5\062\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\072\uffd5\073\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\106\uffd5\110\uffd5\114\uffd5\122\uffd5\130\uffd5" +
    "\131\uffd5\132\uffd5\001\002\000\072\003\uffda\006\uffda\021" +
    "\uffda\030\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066\uffda\067" +
    "\uffda\072\uffda\073\uffda\076\uffda\077\uffda\100\uffda\106\uffda" +
    "\110\uffda\114\uffda\122\uffda\130\uffda\131\uffda\132\uffda\001" +
    "\002\000\074\003\uffd6\006\uffd6\021\uffd6\024\u015e\030\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\061" +
    "\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\072\uffd6" +
    "\073\uffd6\076\uffd6\077\uffd6\100\uffd6\106\uffd6\110\uffd6\114" +
    "\uffd6\122\uffd6\130\uffd6\131\uffd6\132\uffd6\001\002\000\072" +
    "\003\uffdb\006\uffdb\021\uffdb\030\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\061\uffdb\062\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\072\uffdb\073\uffdb\076\uffdb\077" +
    "\uffdb\100\uffdb\106\uffdb\110\uffdb\114\uffdb\122\uffdb\130\uffdb" +
    "\131\uffdb\132\uffdb\001\002\000\072\003\uffdc\006\uffdc\021" +
    "\uffdc\030\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\106\uffdc" +
    "\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc\001" +
    "\002\000\006\007\u018a\027\u018b\001\002\000\042\003\u0163" +
    "\006\044\021\175\027\u0162\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\031\001\002\000\066\003\uffe8\006\uffe8\021" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8" +
    "\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\014\004" +
    "\054\005\057\007\u0182\010\055\011\056\001\002\000\006" +
    "\007\u0165\027\u0166\001\002\000\006\003\u0172\027\u017e\001" +
    "\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8" +
    "\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021\175" +
    "\030\u0168\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\031" +
    "\072\202\076\170\100\217\106\171\110\176\114\177\122" +
    "\206\130\211\131\210\132\172\001\002\000\074\003\uffc5" +
    "\006\uffc5\021\uffc5\030\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\072\uffc5\073\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\102\u0169\106\uffc5\110\uffc5\114\uffc5\122\uffc5\130\uffc5" +
    "\131\uffc5\132\uffc5\001\002\000\010\003\u016b\027\u016d\110" +
    "\u016e\001\002\000\072\003\uffc6\006\uffc6\021\uffc6\030\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\061" +
    "\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6" +
    "\073\uffc6\076\uffc6\077\uffc6\100\uffc6\106\uffc6\110\uffc6\114" +
    "\uffc6\122\uffc6\130\uffc6\131\uffc6\132\uffc6\001\002\000\066" +
    "\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106" +
    "\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8" +
    "\001\002\000\072\003\uffb4\006\uffb4\021\uffb4\030\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\061\uffb4" +
    "\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\072\uffb4\073" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\106\uffb4\110\uffb4\114\uffb4" +
    "\122\uffb4\130\uffb4\131\uffb4\132\uffb4\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\006\003\u0160\006\u016f\001\002\000\042\003\u0163" +
    "\006\044\021\175\027\u0162\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\031\001\002\000\006\007\u0171\027\u0166\001" +
    "\002\000\006\003\u0172\027\u0173\001\002\000\066\003\uffe8" +
    "\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110" +
    "\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002" +
    "\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\066\003\037\006\044\021\175\030" +
    "\u0175\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\074\003\uffb7\006" +
    "\uffb7\021\uffb7\030\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\067\uffb7\072\uffb7\073\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\102\u0169\106\uffb7\110\uffb7\114\uffb7\122\uffb7\130\uffb7\131" +
    "\uffb7\132\uffb7\001\002\000\072\003\uffb8\006\uffb8\021\uffb8" +
    "\030\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\072\uffb8\073\uffb8\076\uffb8\077\uffb8\100\uffb8\106\uffb8\110" +
    "\uffb8\114\uffb8\122\uffb8\130\uffb8\131\uffb8\132\uffb8\001\002" +
    "\000\066\003\037\006\044\021\175\030\u0178\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\031\072\202\076\170\100" +
    "\217\106\171\110\176\114\177\122\206\130\211\131\210" +
    "\132\172\001\002\000\074\003\uffbf\006\uffbf\021\uffbf\030" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\072" +
    "\uffbf\073\uffbf\076\uffbf\077\uffbf\100\uffbf\102\u0169\106\uffbf" +
    "\110\uffbf\114\uffbf\122\uffbf\130\uffbf\131\uffbf\132\uffbf\001" +
    "\002\000\072\003\uffc0\006\uffc0\021\uffc0\030\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\061\uffc0\062" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\072\uffc0\073\uffc0" +
    "\076\uffc0\077\uffc0\100\uffc0\106\uffc0\110\uffc0\114\uffc0\122" +
    "\uffc0\130\uffc0\131\uffc0\132\uffc0\001\002\000\066\003\037" +
    "\006\044\021\175\030\u017b\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\031\072\202\076\170\100\217\106\171\110" +
    "\176\114\177\122\206\130\211\131\210\132\172\001\002" +
    "\000\072\003\uffb6\006\uffb6\021\uffb6\030\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\061\uffb6\062\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\067\uffb6\072\uffb6\073\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\106\uffb6\110\uffb6\114\uffb6\122\uffb6" +
    "\130\uffb6\131\uffb6\132\uffb6\001\002\000\066\003\037\006" +
    "\044\021\175\030\u017d\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\072\003\uffb5\006\uffb5\021\uffb5\030\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\061\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\072\uffb5\073\uffb5\076\uffb5" +
    "\077\uffb5\100\uffb5\106\uffb5\110\uffb5\114\uffb5\122\uffb5\130" +
    "\uffb5\131\uffb5\132\uffb5\001\002\000\066\003\uffe8\006\uffe8" +
    "\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114" +
    "\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000\066" +
    "\003\037\006\044\021\175\030\u0180\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\031\072\202\076\170\100\217\106" +
    "\171\110\176\114\177\122\206\130\211\131\210\132\172" +
    "\001\002\000\074\003\uffcc\006\uffcc\021\uffcc\030\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\061\uffcc" +
    "\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\072\uffcc\073" +
    "\uffcc\076\uffcc\077\uffcc\100\uffcc\102\u0169\106\uffcc\110\uffcc" +
    "\114\uffcc\122\uffcc\130\uffcc\131\uffcc\132\uffcc\001\002\000" +
    "\072\003\uffcd\006\uffcd\021\uffcd\030\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\061\uffcd\062\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\072\uffcd\073\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\106\uffcd\110\uffcd\114\uffcd\122\uffcd\130" +
    "\uffcd\131\uffcd\132\uffcd\001\002\000\004\027\u0183\001\002" +
    "\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\066\003\037\006\044\021\175\030" +
    "\u0185\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\074\003\uffc9\006" +
    "\uffc9\021\uffc9\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\072\uffc9\073\uffc9\076\uffc9\077\uffc9\100\uffc9" +
    "\102\u0169\106\uffc9\110\uffc9\114\uffc9\122\uffc9\130\uffc9\131" +
    "\uffc9\132\uffc9\001\002\000\072\003\uffca\006\uffca\021\uffca" +
    "\030\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\061\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\072\uffca\073\uffca\076\uffca\077\uffca\100\uffca\106\uffca\110" +
    "\uffca\114\uffca\122\uffca\130\uffca\131\uffca\132\uffca\001\002" +
    "\000\066\003\037\006\044\021\175\030\u0188\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\031\072\202\076\170\100" +
    "\217\106\171\110\176\114\177\122\206\130\211\131\210" +
    "\132\172\001\002\000\074\003\uffc3\006\uffc3\021\uffc3\030" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\072" +
    "\uffc3\073\uffc3\076\uffc3\077\uffc3\100\uffc3\102\u0169\106\uffc3" +
    "\110\uffc3\114\uffc3\122\uffc3\130\uffc3\131\uffc3\132\uffc3\001" +
    "\002\000\072\003\uffc4\006\uffc4\021\uffc4\030\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\061\uffc4\062" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\072\uffc4\073\uffc4" +
    "\076\uffc4\077\uffc4\100\uffc4\106\uffc4\110\uffc4\114\uffc4\122" +
    "\uffc4\130\uffc4\131\uffc4\132\uffc4\001\002\000\004\027\u018f" +
    "\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021" +
    "\175\030\u018d\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\031\072\202\076\170\100\217\106\171\110\176\114\177" +
    "\122\206\130\211\131\210\132\172\001\002\000\074\003" +
    "\uffc1\006\uffc1\021\uffc1\030\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\061\uffc1\062\uffc1\064\uffc1\065" +
    "\uffc1\066\uffc1\067\uffc1\072\uffc1\073\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\102\u0169\106\uffc1\110\uffc1\114\uffc1\122\uffc1\130" +
    "\uffc1\131\uffc1\132\uffc1\001\002\000\072\003\uffc2\006\uffc2" +
    "\021\uffc2\030\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\072\uffc2\073\uffc2\076\uffc2\077\uffc2\100\uffc2\106" +
    "\uffc2\110\uffc2\114\uffc2\122\uffc2\130\uffc2\131\uffc2\132\uffc2" +
    "\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021" +
    "\175\030\u0191\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\031\072\202\076\170\100\217\106\171\110\176\114\177" +
    "\122\206\130\211\131\210\132\172\001\002\000\074\003" +
    "\uffc7\006\uffc7\021\uffc7\030\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\061\uffc7\062\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\072\uffc7\073\uffc7\076\uffc7\077\uffc7" +
    "\100\uffc7\102\u0169\106\uffc7\110\uffc7\114\uffc7\122\uffc7\130" +
    "\uffc7\131\uffc7\132\uffc7\001\002\000\072\003\uffc8\006\uffc8" +
    "\021\uffc8\030\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\072\uffc8\073\uffc8\076\uffc8\077\uffc8\100\uffc8\106" +
    "\uffc8\110\uffc8\114\uffc8\122\uffc8\130\uffc8\131\uffc8\132\uffc8" +
    "\001\002\000\110\003\uff0a\006\uff0a\007\uff0a\013\106\015" +
    "\uff0a\021\uff0a\024\uff0a\027\uff0a\030\uff0a\034\105\035\103" +
    "\036\uff0a\037\uff0a\040\uff0a\041\uff0a\042\uff0a\043\uff0a\061" +
    "\uff0a\062\uff0a\064\uff0a\065\uff0a\066\uff0a\067\uff0a\072\uff0a" +
    "\073\uff0a\076\uff0a\077\uff0a\100\uff0a\106\uff0a\110\uff0a\114" +
    "\uff0a\122\uff0a\130\uff0a\131\uff0a\132\uff0a\001\002\000\042" +
    "\003\037\006\044\015\u0197\021\175\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\031\001\002\000\042\003\u0198\006" +
    "\044\015\u0197\021\175\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\001\002\000\010\003\u019f\007\u019e\015\u019d" +
    "\001\002\000\040\003\037\006\044\021\175\036\045\037" +
    "\043\040\165\041\215\042\207\043\205\061\034\062\220" +
    "\064\042\065\035\066\046\067\031\001\002\000\014\004" +
    "\054\005\057\007\u019a\010\055\011\056\001\002\000\010" +
    "\003\uff75\007\uff75\015\uff75\001\002\000\004\024\u019b\001" +
    "\002\000\072\003\uff76\006\uff76\021\uff76\030\uff76\036\uff76" +
    "\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\061\uff76\062" +
    "\uff76\064\uff76\065\uff76\066\uff76\067\uff76\072\uff76\073\uff76" +
    "\076\uff76\077\uff76\100\uff76\106\uff76\110\uff76\114\uff76\122" +
    "\uff76\130\uff76\131\uff76\132\uff76\001\002\000\010\003\uff72" +
    "\007\uff72\015\uff72\001\002\000\040\003\u01a2\006\044\021" +
    "\175\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\001" +
    "\002\000\074\003\uff77\006\uff77\021\uff77\024\u01a1\030\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\061" +
    "\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77\072\uff77" +
    "\073\uff77\076\uff77\077\uff77\100\uff77\106\uff77\110\uff77\114" +
    "\uff77\122\uff77\130\uff77\131\uff77\132\uff77\001\002\000\012" +
    "\003\uff71\007\uff71\015\uff71\024\u01a0\001\002\000\072\003" +
    "\uff7a\006\uff7a\021\uff7a\030\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\061\uff7a\062\uff7a\064\uff7a\065" +
    "\uff7a\066\uff7a\067\uff7a\072\uff7a\073\uff7a\076\uff7a\077\uff7a" +
    "\100\uff7a\106\uff7a\110\uff7a\114\uff7a\122\uff7a\130\uff7a\131" +
    "\uff7a\132\uff7a\001\002\000\072\003\uff81\006\uff81\021\uff81" +
    "\030\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\061\uff81\062\uff81\064\uff81\065\uff81\066\uff81\067\uff81" +
    "\072\uff81\073\uff81\076\uff81\077\uff81\100\uff81\106\uff81\110" +
    "\uff81\114\uff81\122\uff81\130\uff81\131\uff81\132\uff81\001\002" +
    "\000\020\003\uff73\004\054\005\057\007\uff73\010\055\011" +
    "\056\015\uff73\001\002\000\010\003\uff74\007\uff74\015\uff74" +
    "\001\002\000\010\003\u01a6\007\u01a5\015\u019d\001\002\000" +
    "\004\024\u01a7\001\002\000\010\003\uff71\007\uff71\015\uff71" +
    "\001\002\000\072\003\uff7b\006\uff7b\021\uff7b\030\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\061\uff7b" +
    "\062\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\072\uff7b\073" +
    "\uff7b\076\uff7b\077\uff7b\100\uff7b\106\uff7b\110\uff7b\114\uff7b" +
    "\122\uff7b\130\uff7b\131\uff7b\132\uff7b\001\002\000\006\007" +
    "\u01c8\027\u01c9\001\002\000\060\003\u01ad\006\044\021\175" +
    "\024\uff98\027\u01ac\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\031\074\017\075\015\111\005\112\006\115\016\126" +
    "\161\001\002\000\006\007\u01be\027\u01bf\001\002\000\042" +
    "\003\u01b1\006\044\021\175\024\uff98\036\045\037\043\040" +
    "\165\041\215\042\207\043\205\061\034\062\220\064\042" +
    "\065\035\066\046\067\031\001\002\000\066\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001\002\000" +
    "\016\004\054\005\057\007\u01b5\010\055\011\056\024\uff96" +
    "\001\002\000\004\024\u01b0\001\002\000\010\007\uff97\024" +
    "\uff97\027\uff97\001\002\000\042\003\u01b1\006\044\021\175" +
    "\024\uff98\036\045\037\043\040\165\041\215\042\207\043" +
    "\205\061\034\062\220\064\042\065\035\066\046\067\031" +
    "\001\002\000\020\004\054\005\057\007\uff96\010\055\011" +
    "\056\024\uff96\027\uff96\001\002\000\004\024\u01b3\001\002" +
    "\000\044\003\u01b1\006\044\007\uff98\021\175\027\uff98\036" +
    "\045\037\043\040\165\041\215\042\207\043\205\061\034" +
    "\062\220\064\042\065\035\066\046\067\031\001\002\000" +
    "\006\007\uff99\027\uff99\001\002\000\004\027\u01b6\001\002" +
    "\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\066\003\037\006\044\021\175\030" +
    "\u01b8\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\072\003\uffa0\006" +
    "\uffa0\021\uffa0\030\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\061\uffa0\062\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\072\uffa0\073\uffa0\076\uffa0\077\uffa0\100\uffa0" +
    "\106\uffa0\110\uffa0\114\uffa0\122\uffa0\130\uffa0\131\uffa0\132" +
    "\uffa0\001\002\000\066\003\037\006\044\021\175\030\u01ba" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\031\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\072\003\uff9d\006\uff9d" +
    "\021\uff9d\030\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\072\uff9d\073\uff9d\076\uff9d\077\uff9d\100\uff9d\106" +
    "\uff9d\110\uff9d\114\uff9d\122\uff9d\130\uff9d\131\uff9d\132\uff9d" +
    "\001\002\000\004\024\u01bc\001\002\000\044\003\u01b1\006" +
    "\044\007\uff98\021\175\027\uff98\036\045\037\043\040\165" +
    "\041\215\042\207\043\205\061\034\062\220\064\042\065" +
    "\035\066\046\067\031\001\002\000\006\007\uff9a\027\uff9a" +
    "\001\002\000\006\003\u01c2\027\u01c3\001\002\000\066\003" +
    "\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8\106\uffe8" +
    "\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\u01c1\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\031\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\072\003\uff9e\006\uff9e\021\uff9e" +
    "\030\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\072\uff9e\073\uff9e\076\uff9e\077\uff9e\100\uff9e\106\uff9e\110" +
    "\uff9e\114\uff9e\122\uff9e\130\uff9e\131\uff9e\132\uff9e\001\002" +
    "\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100" +
    "\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072" +
    "\uffe8\076\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8" +
    "\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006" +
    "\044\021\175\030\u01c5\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\072\003\uffa1\006\uffa1\021\uffa1\030\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\061\uffa1\062\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\067\uffa1\072\uffa1\073\uffa1\076\uffa1" +
    "\077\uffa1\100\uffa1\106\uffa1\110\uffa1\114\uffa1\122\uffa1\130" +
    "\uffa1\131\uffa1\132\uffa1\001\002\000\066\003\037\006\044" +
    "\021\175\030\u01c7\036\045\037\043\040\165\041\215\042" +
    "\207\043\205\061\034\062\220\064\042\065\035\066\046" +
    "\067\031\072\202\076\170\100\217\106\171\110\176\114" +
    "\177\122\206\130\211\131\210\132\172\001\002\000\072" +
    "\003\uff9b\006\uff9b\021\uff9b\030\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\061\uff9b\062\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\067\uff9b\072\uff9b\073\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\106\uff9b\110\uff9b\114\uff9b\122\uff9b\130\uff9b" +
    "\131\uff9b\132\uff9b\001\002\000\004\027\u01cc\001\002\000" +
    "\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076\uffe8\100\uffe8" +
    "\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8\131\uffe8\132" +
    "\uffe8\001\002\000\066\003\037\006\044\021\175\030\u01cb" +
    "\036\045\037\043\040\165\041\215\042\207\043\205\061" +
    "\034\062\220\064\042\065\035\066\046\067\031\072\202" +
    "\076\170\100\217\106\171\110\176\114\177\122\206\130" +
    "\211\131\210\132\172\001\002\000\072\003\uff9c\006\uff9c" +
    "\021\uff9c\030\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\uff9c\072\uff9c\073\uff9c\076\uff9c\077\uff9c\100\uff9c\106" +
    "\uff9c\110\uff9c\114\uff9c\122\uff9c\130\uff9c\131\uff9c\132\uff9c" +
    "\001\002\000\066\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\076" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\066\003\037\006\044\021" +
    "\175\030\u01ce\036\045\037\043\040\165\041\215\042\207" +
    "\043\205\061\034\062\220\064\042\065\035\066\046\067" +
    "\031\072\202\076\170\100\217\106\171\110\176\114\177" +
    "\122\206\130\211\131\210\132\172\001\002\000\072\003" +
    "\uff9f\006\uff9f\021\uff9f\030\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\061\uff9f\062\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\072\uff9f\073\uff9f\076\uff9f\077\uff9f" +
    "\100\uff9f\106\uff9f\110\uff9f\114\uff9f\122\uff9f\130\uff9f\131" +
    "\uff9f\132\uff9f\001\002\000\072\003\uffdd\006\uffdd\021\uffdd" +
    "\030\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\061\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\072\uffdd\073\uffdd\076\uffdd\077\uffdd\100\uffdd\106\uffdd\110" +
    "\uffdd\114\uffdd\122\uffdd\130\uffdd\131\uffdd\132\uffdd\001\002" +
    "\000\110\003\uff0e\006\uff0e\007\uff0e\013\106\015\uff0e\021" +
    "\uff0e\024\uff0e\027\uff0e\030\uff0e\034\105\035\103\036\uff0e" +
    "\037\uff0e\040\uff0e\041\uff0e\042\uff0e\043\uff0e\061\uff0e\062" +
    "\uff0e\064\uff0e\065\uff0e\066\uff0e\067\uff0e\072\uff0e\073\uff0e" +
    "\076\uff0e\077\uff0e\100\uff0e\106\uff0e\110\uff0e\114\uff0e\122" +
    "\uff0e\130\uff0e\131\uff0e\132\uff0e\001\002\000\066\003\037" +
    "\006\044\021\175\030\u01d3\036\045\037\043\040\165\041" +
    "\215\042\207\043\205\061\034\062\220\064\042\065\035" +
    "\066\046\067\031\072\202\076\170\100\217\106\171\110" +
    "\176\114\177\122\206\130\211\131\210\132\172\001\002" +
    "\000\104\002\ufffb\003\ufffb\006\ufffb\021\ufffb\030\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\061\ufffb" +
    "\062\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\072\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\100\ufffb\106\ufffb\110\ufffb\111\ufffb" +
    "\112\ufffb\114\ufffb\115\ufffb\122\ufffb\126\ufffb\130\ufffb\131" +
    "\ufffb\132\ufffb\001\002\000\016\002\ufff5\074\ufff5\111\ufff5" +
    "\112\ufff5\115\ufff5\126\ufff5\001\002\000\016\007\uffea\015" +
    "\uffea\074\uffea\111\uffea\112\uffea\115\uffea\001\002\000\006" +
    "\003\u01d8\062\u01d9\001\002\000\004\062\u01d7\001\002\000" +
    "\016\007\uffec\015\uffec\074\uffec\111\uffec\112\uffec\115\uffec" +
    "\001\002\000\016\007\uffeb\015\uffeb\074\uffeb\111\uffeb\112" +
    "\uffeb\115\uffeb\001\002\000\016\007\uffef\015\uffef\074\uffef" +
    "\111\uffef\112\uffef\115\uffef\001\002\000\016\007\uffee\015" +
    "\uffee\074\uffee\111\uffee\112\uffee\115\uffee\001\002\000\016" +
    "\007\uffed\015\uffed\074\uffed\111\uffed\112\uffed\115\uffed\001" +
    "\002\000\016\007\ufff0\015\ufff0\074\ufff0\111\ufff0\112\ufff0" +
    "\115\ufff0\001\002\000\102\003\uffe8\006\uffe8\021\uffe8\030" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072" +
    "\uffe8\074\017\075\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8" +
    "\111\005\112\006\114\uffe8\115\016\122\uffe8\126\161\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\102\003\uffe8\006\uffe8" +
    "\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\072\uffe8\074\017\075\015\076\uffe8\100\uffe8\106" +
    "\uffe8\110\uffe8\111\005\112\006\114\uffe8\115\016\122\uffe8" +
    "\126\161\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003" +
    "\037\006\044\021\175\030\u01e0\036\045\037\043\040\165" +
    "\041\215\042\207\043\205\061\034\062\220\064\042\065" +
    "\035\066\046\067\031\072\202\076\170\100\217\106\171" +
    "\110\176\114\177\122\206\130\211\131\210\132\172\001" +
    "\002\000\016\002\ufff2\074\ufff2\111\ufff2\112\ufff2\115\ufff2" +
    "\126\ufff2\001\002\000\066\003\037\006\044\021\175\030" +
    "\u01e2\036\045\037\043\040\165\041\215\042\207\043\205" +
    "\061\034\062\220\064\042\065\035\066\046\067\031\072" +
    "\202\076\170\100\217\106\171\110\176\114\177\122\206" +
    "\130\211\131\210\132\172\001\002\000\016\002\ufff6\074" +
    "\ufff6\111\ufff6\112\ufff6\115\ufff6\126\ufff6\001\002\000\004" +
    "\002\001\001\002\000\012\006\u01e5\015\uffce\021\140\024" +
    "\uffce\001\002\000\016\003\150\007\u01e6\074\017\111\005" +
    "\112\006\115\016\001\002\000\004\027\u01ef\001\002\000" +
    "\016\007\u01e8\015\152\074\017\111\005\112\006\115\016" +
    "\001\002\000\004\027\u01e9\001\002\000\102\003\uffe8\006" +
    "\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\072\uffe8\074\017\075\015\076\uffe8\100\uffe8" +
    "\106\uffe8\110\uffe8\111\005\112\006\114\uffe8\115\016\122" +
    "\uffe8\126\161\130\uffe8\131\uffe8\132\uffe8\001\002\000\102" +
    "\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\074\017\075\015\076" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\111\005\112\006\114\uffe8" +
    "\115\016\122\uffe8\126\161\130\uffe8\131\uffe8\132\uffe8\001" +
    "\002\000\066\003\037\006\044\021\175\030\u01ec\036\045" +
    "\037\043\040\165\041\215\042\207\043\205\061\034\062" +
    "\220\064\042\065\035\066\046\067\031\072\202\076\170" +
    "\100\217\106\171\110\176\114\177\122\206\130\211\131" +
    "\210\132\172\001\002\000\016\002\ufff4\074\ufff4\111\ufff4" +
    "\112\ufff4\115\ufff4\126\ufff4\001\002\000\066\003\037\006" +
    "\044\021\175\030\u01ee\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\016\002\ufff8\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126\ufff8" +
    "\001\002\000\102\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\074" +
    "\017\075\015\076\uffe8\100\uffe8\106\uffe8\110\uffe8\111\005" +
    "\112\006\114\uffe8\115\016\122\uffe8\126\161\130\uffe8\131" +
    "\uffe8\132\uffe8\001\002\000\102\003\uffe8\006\uffe8\021\uffe8" +
    "\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\074\017\075\015\076\uffe8\100\uffe8\106\uffe8\110" +
    "\uffe8\111\005\112\006\114\uffe8\115\016\122\uffe8\126\161" +
    "\130\uffe8\131\uffe8\132\uffe8\001\002\000\066\003\037\006" +
    "\044\021\175\030\u01f2\036\045\037\043\040\165\041\215" +
    "\042\207\043\205\061\034\062\220\064\042\065\035\066" +
    "\046\067\031\072\202\076\170\100\217\106\171\110\176" +
    "\114\177\122\206\130\211\131\210\132\172\001\002\000" +
    "\016\002\ufff3\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3" +
    "\001\002\000\066\003\037\006\044\021\175\030\u01f4\036" +
    "\045\037\043\040\165\041\215\042\207\043\205\061\034" +
    "\062\220\064\042\065\035\066\046\067\031\072\202\076" +
    "\170\100\217\106\171\110\176\114\177\122\206\130\211" +
    "\131\210\132\172\001\002\000\016\002\ufff7\074\ufff7\111" +
    "\ufff7\112\ufff7\115\ufff7\126\ufff7\001\002\000\004\062\u01f9" +
    "\001\002\000\016\002\ufff9\074\ufff9\111\ufff9\112\ufff9\115" +
    "\ufff9\126\ufff9\001\002\000\004\062\u01f8\001\002\000\004" +
    "\006\145\001\002\000\004\006\u01e5\001\002\000\006\003" +
    "\uff6a\062\uff6a\001\002\000\006\003\uff6b\062\uff6b\001\002" +
    "\000\006\003\uff6c\062\uff6c\001\002\000\016\002\000\074" +
    "\017\111\005\112\006\115\016\126\u01f7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\u01d1\014\010\024\013" +
    "\030\u01fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u01f4\024\u01f5\001\001\000\004" +
    "\023\161\001\001\000\002\001\001\000\004\023\142\001" +
    "\001\000\002\001\001\000\004\014\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\031\032\037\033\032\034\035\036\027\001\001\000\004" +
    "\016\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\031\032\037\033\032\034\035\036\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\031\032\037\033\100\001\001" +
    "\000\010\022\031\032\037\033\077\001\001\000\010\022" +
    "\031\032\037\033\076\001\001\000\010\022\031\032\037" +
    "\033\057\001\001\000\002\001\001\000\010\022\031\032" +
    "\037\033\075\001\001\000\010\022\031\032\037\033\073" +
    "\001\001\000\010\022\031\032\037\033\071\001\001\000" +
    "\010\022\031\032\037\033\067\001\001\000\010\022\031" +
    "\032\037\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\031\032\037\033\032\034\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\031\032" +
    "\037\033\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\031\032\037\033\032\034\035\036\127\037\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\031\032\037\033\032\034\035\036\130\001\001\000\004" +
    "\016\103\001\001\000\004\016\103\001\001\000\014\022" +
    "\031\032\037\033\032\034\035\036\135\001\001\000\002" +
    "\001\001\000\014\022\031\032\037\033\032\034\035\036" +
    "\134\001\001\000\004\016\103\001\001\000\004\016\103" +
    "\001\001\000\002\001\001\000\014\022\031\032\037\033" +
    "\032\034\035\036\140\001\001\000\004\016\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\146\025\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\152\001\001\000" +
    "\004\014\u01d4\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\006\014\157\027\155\035\156\001\001\000" +
    "\010\004\u01d1\014\157\035\u01d0\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\031\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\041\165\050\211\001\001\000\004\023\161\001\001\000" +
    "\004\023\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\031\032\037\033\032\034" +
    "\035\036\u01cf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\031\032\037" +
    "\033\032\034\035\036\u0192\001\001\000\002\001\001\000" +
    "\004\022\u0159\001\001\000\004\016\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\031\032\037\033\032\034\035\036\u0157" +
    "\001\001\000\002\001\001\000\014\022\031\032\037\033" +
    "\032\034\035\036\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\031\032\037\033\032\034\035\036\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\031\032\037\033\032\034\035\036\236" +
    "\001\001\000\014\022\031\032\037\033\032\034\035\036" +
    "\234\001\001\000\014\022\031\032\037\033\032\034\035" +
    "\036\232\001\001\000\014\022\031\032\037\033\032\034" +
    "\035\036\230\001\001\000\016\022\031\031\225\032\037" +
    "\033\032\034\035\036\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\103\001\001\000\004\016\103" +
    "\001\001\000\002\001\001\000\004\016\103\001\001\000" +
    "\002\001\001\000\004\016\103\001\001\000\002\001\001" +
    "\000\004\016\103\001\001\000\002\001\001\000\004\035" +
    "\324\001\001\000\004\035\242\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\031\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\041\165\050\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\251\022\031\031\202" +
    "\032\037\033\032\034\035\036\177\001\001\000\004\035" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\254\001\001\000\042\003\166\006" +
    "\163\010\212\011\173\012\213\021\215\022\031\026\200" +
    "\031\202\032\037\033\032\034\035\036\177\040\172\041" +
    "\165\050\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\263\001\001\000\004\035\261\001\001\000" +
    "\042\003\166\006\163\010\212\011\173\012\213\021\215" +
    "\022\031\026\200\031\202\032\037\033\032\034\035\036" +
    "\177\040\172\041\165\050\211\001\001\000\002\001\001" +
    "\000\042\003\166\006\163\010\212\011\173\012\213\021" +
    "\215\022\031\026\200\031\202\032\037\033\032\034\035" +
    "\036\177\040\172\041\165\050\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\267\001\001\000\042" +
    "\003\166\006\163\010\212\011\173\012\213\021\215\022" +
    "\031\026\200\031\202\032\037\033\032\034\035\036\177" +
    "\040\172\041\165\050\211\001\001\000\002\001\001\000" +
    "\042\003\166\006\163\010\212\011\173\012\213\021\215" +
    "\022\031\026\200\031\202\032\037\033\032\034\035\036" +
    "\177\040\172\041\165\050\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\275\001\001\000\042\003" +
    "\166\006\163\010\212\011\173\012\213\021\215\022\031" +
    "\026\200\031\202\032\037\033\032\034\035\036\177\040" +
    "\172\041\165\050\211\001\001\000\002\001\001\000\004" +
    "\035\300\001\001\000\042\003\166\006\163\010\212\011" +
    "\173\012\213\021\215\022\031\026\200\031\202\032\037" +
    "\033\032\034\035\036\177\040\172\041\165\050\211\001" +
    "\001\000\002\001\001\000\020\012\321\022\031\031\202" +
    "\032\037\033\032\034\035\036\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\310\022\031\031\202" +
    "\032\037\033\032\034\035\036\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\031\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\041\165\050\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\330\022\031\031" +
    "\202\032\037\033\032\034\035\036\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\335\022\031\031\202\032\037\033\032" +
    "\034\035\036\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\103\001\001\000\002" +
    "\001\001\000\020\012\343\022\031\031\202\032\037\033" +
    "\032\034\035\036\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\103" +
    "\001\001\000\002\001\001\000\010\022\372\032\375\046" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\372\032\375\046\u0113\001\001\000\004\042\u0101\001\001" +
    "\000\006\043\u0103\044\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0107\001\001" +
    "\000\002\001\001\000\004\035\u0108\001\001\000\042\003" +
    "\166\006\163\010\212\011\173\012\213\021\215\022\031" +
    "\026\200\031\202\032\037\033\032\034\035\036\177\040" +
    "\172\041\165\050\211\001\001\000\004\035\u010b\001\001" +
    "\000\004\035\u010c\001\001\000\042\003\166\006\163\010" +
    "\212\011\173\012\213\021\215\022\031\026\200\031\202" +
    "\032\037\033\032\034\035\036\177\040\172\041\165\050" +
    "\211\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\031\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\041\165\050\211\001\001" +
    "\000\002\001\001\000\004\035\u010f\001\001\000\042\003" +
    "\166\006\163\010\212\011\173\012\213\021\215\022\031" +
    "\026\200\031\202\032\037\033\032\034\035\036\177\040" +
    "\172\041\165\050\211\001\001\000\002\001\001\000\004" +
    "\035\u0112\001\001\000\042\003\166\006\163\010\212\011" +
    "\173\012\213\021\215\022\031\026\200\031\202\032\037" +
    "\033\032\034\035\036\177\040\172\041\165\050\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\372" +
    "\032\375\046\u012f\001\001\000\002\001\001\000\010\022" +
    "\372\032\375\046\u012e\001\001\000\010\022\372\032\375" +
    "\046\u012d\001\001\000\010\022\372\032\375\046\u012c\001" +
    "\001\000\010\022\372\032\375\046\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\372\032\375\046" +
    "\u012a\001\001\000\010\022\372\032\375\046\u0128\001\001" +
    "\000\010\022\372\032\375\046\u0126\001\001\000\010\022" +
    "\372\032\375\046\u0124\001\001\000\010\022\372\032\375" +
    "\046\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\031\032\037\033\032\034\035\036\127\037\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u0137\001\001\000\006" +
    "\043\u0138\044\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u013c\001\001\000\006" +
    "\043\u013d\044\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\u014b\001\001\000\004\042\u0141\001\001" +
    "\000\006\043\u0142\044\u0104\001\001\000\004\042\u0144\001" +
    "\001\000\002\001\001\000\010\043\u0145\044\u0104\051\u0146" +
    "\001\001\000\006\043\u0145\051\u014a\001\001\000\004\042" +
    "\u0148\001\001\000\002\001\001\000\004\044\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\u014c\044" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0150\001\001\000\006\043\u0151\044" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u0154\001\001\000\006\043\u0155\044\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\u0163\022\031\031" +
    "\202\032\037\033\032\034\035\036\177\001\001\000\004" +
    "\035\u0186\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0166\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\031\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\041\165\050\211\001\001\000\004\007\u0169\001\001\000" +
    "\004\050\u016b\001\001\000\002\001\001\000\004\035\u017b" +
    "\001\001\000\002\001\001\000\004\035\u0179\001\001\000" +
    "\002\001\001\000\020\012\u016f\022\031\031\202\032\037" +
    "\033\032\034\035\036\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0176\001\001\000\004\035\u0173" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\031\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\041\165\050\211\001\001\000" +
    "\004\007\u0175\001\001\000\002\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\031\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\041\165\050\211\001\001\000\004\007\u0178\001\001\000" +
    "\002\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\031\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\041\165\050\211\001\001" +
    "\000\002\001\001\000\042\003\166\006\163\010\212\011" +
    "\173\012\213\021\215\022\031\026\200\031\202\032\037" +
    "\033\032\034\035\036\177\040\172\041\165\050\211\001" +
    "\001\000\002\001\001\000\004\035\u017e\001\001\000\042" +
    "\003\166\006\163\010\212\011\173\012\213\021\215\022" +
    "\031\026\200\031\202\032\037\033\032\034\035\036\177" +
    "\040\172\041\165\050\211\001\001\000\004\007\u0180\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0183" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\031\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\041\165\050\211\001\001\000" +
    "\004\007\u0185\001\001\000\002\001\001\000\042\003\166" +
    "\006\163\010\212\011\173\012\213\021\215\022\031\026" +
    "\200\031\202\032\037\033\032\034\035\036\177\040\172" +
    "\041\165\050\211\001\001\000\004\007\u0188\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u018b\001\001" +
    "\000\042\003\166\006\163\010\212\011\173\012\213\021" +
    "\215\022\031\026\200\031\202\032\037\033\032\034\035" +
    "\036\177\040\172\041\165\050\211\001\001\000\004\007" +
    "\u018d\001\001\000\002\001\001\000\004\035\u018f\001\001" +
    "\000\042\003\166\006\163\010\212\011\173\012\213\021" +
    "\215\022\031\026\200\031\202\032\037\033\032\034\035" +
    "\036\177\040\172\041\165\050\211\001\001\000\004\007" +
    "\u0191\001\001\000\002\001\001\000\004\016\103\001\001" +
    "\000\022\012\u0198\022\031\031\202\032\037\033\032\034" +
    "\035\036\177\047\u01a3\001\001\000\022\012\u0198\022\031" +
    "\031\202\032\037\033\032\034\035\036\177\047\u0195\001" +
    "\001\000\002\001\001\000\020\012\u019b\022\031\031\202" +
    "\032\037\033\032\034\035\036\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\u01a2\022\031\031\202\032" +
    "\037\033\032\034\035\036\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\u01aa\005\u01ad\012\u01ae\013\u01a9\014\157" +
    "\022\031\031\202\032\037\033\032\034\035\036\177\001" +
    "\001\000\002\001\001\000\022\005\u01ba\012\u01ae\022\031" +
    "\031\202\032\037\033\032\034\035\036\177\001\001\000" +
    "\004\035\u01b8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u01b1\012\u01ae\022\031\031" +
    "\202\032\037\033\032\034\035\036\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\u01b3\012\u01ae\022" +
    "\031\031\202\032\037\033\032\034\035\036\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u01b6\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\031\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\041\165\050\211\001\001\000\002" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\031\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\041\165\050\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\u01bc\012\u01ae" +
    "\022\031\031\202\032\037\033\032\034\035\036\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u01bf" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\031\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\041\165\050\211\001\001\000" +
    "\002\001\001\000\004\035\u01c5\001\001\000\004\035\u01c3" +
    "\001\001\000\042\003\166\006\163\010\212\011\173\012" +
    "\213\021\215\022\031\026\200\031\202\032\037\033\032" +
    "\034\035\036\177\040\172\041\165\050\211\001\001\000" +
    "\002\001\001\000\042\003\166\006\163\010\212\011\173" +
    "\012\213\021\215\022\031\026\200\031\202\032\037\033" +
    "\032\034\035\036\177\040\172\041\165\050\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u01c9\001" +
    "\001\000\042\003\166\006\163\010\212\011\173\012\213" +
    "\021\215\022\031\026\200\031\202\032\037\033\032\034" +
    "\035\036\177\040\172\041\165\050\211\001\001\000\002" +
    "\001\001\000\004\035\u01cc\001\001\000\042\003\166\006" +
    "\163\010\212\011\173\012\213\021\215\022\031\026\200" +
    "\031\202\032\037\033\032\034\035\036\177\040\172\041" +
    "\165\050\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\103\001\001\000\042\003\166\006\163\010" +
    "\212\011\173\012\213\021\215\022\031\026\200\031\202" +
    "\032\037\033\032\034\035\036\177\040\172\041\165\050" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\006\014" +
    "\157\027\u01dd\035\u01de\001\001\000\010\004\u01d1\014\157" +
    "\035\u01e0\001\001\000\042\003\166\006\163\010\212\011" +
    "\173\012\213\021\215\022\031\026\200\031\202\032\037" +
    "\033\032\034\035\036\177\040\172\041\165\050\211\001" +
    "\001\000\002\001\001\000\042\003\166\006\163\010\212" +
    "\011\173\012\213\021\215\022\031\026\200\031\202\032" +
    "\037\033\032\034\035\036\177\040\172\041\165\050\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\146\025\u01e6\001\001\000\002\001\001" +
    "\000\004\014\152\001\001\000\002\001\001\000\012\004" +
    "\006\014\157\027\u01e9\035\u01ea\001\001\000\010\004\u01d1" +
    "\014\157\035\u01ec\001\001\000\042\003\166\006\163\010" +
    "\212\011\173\012\213\021\215\022\031\026\200\031\202" +
    "\032\037\033\032\034\035\036\177\040\172\041\165\050" +
    "\211\001\001\000\002\001\001\000\042\003\166\006\163" +
    "\010\212\011\173\012\213\021\215\022\031\026\200\031" +
    "\202\032\037\033\032\034\035\036\177\040\172\041\165" +
    "\050\211\001\001\000\002\001\001\000\012\004\006\014" +
    "\157\027\u01ef\035\u01f0\001\001\000\010\004\u01d1\014\157" +
    "\035\u01f2\001\001\000\042\003\166\006\163\010\212\011" +
    "\173\012\213\021\215\022\031\026\200\031\202\032\037" +
    "\033\032\034\035\036\177\040\172\041\165\050\211\001" +
    "\001\000\002\001\001\000\042\003\166\006\163\010\212" +
    "\011\173\012\213\021\215\022\031\026\200\031\202\032" +
    "\037\033\032\034\035\036\177\040\172\041\165\050\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u01f4\024\u01f5\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado.";
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= error IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= T_DATO error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= PARAMETROS COMMA error IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el tipo de dato en el parámetro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= PARAMETROS COMMA T_DATO error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El parámetro debe tener un identificador"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= PARAMETROS T_DATO IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Los parámetros deben estar separados por una coma"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTROL_STATEMENT ::= RETURN LITERALES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTROL_STATEMENT ::= RETURN IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTROL_STATEMENT ::= RETURN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURA_IF ::= ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ERRORES_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ERRORES_IF ::= IF error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ERRORES_IF ::= IF LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ERRORES_IF ::= IF LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ERRORES_IF ::= IF error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ERRORES_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ERRORES_IF",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESTRUCTURA_ELSE ::= ELSE IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESTRUCTURA_ELSE ::= ELSE error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del else."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESTRUCTURA_ELSE ::= ELSE ERRORES_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESTRUCTURA_WHILE ::= WHILE LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESTRUCTURA_WHILE ::= WHILE error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ESTRUCTURA_WHILE ::= WHILE LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESTRUCTURA_WHILE ::= WHILE error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DO_WHILE ::= DO error SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DO_WHILE ::= DO LCURLY SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta palabra reservada while antes de la condición."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO_WHILE ::= DO error SENTENCIAS WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan ambas llaves en el do-while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ESTRUCTURA_FOR ::= FOR LPAREN error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la sentencia del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ESTRUCTURA_FOR ::= FOR error RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESTRUCTURA_FOR ::= FOR LPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTURA_FOR ::= FOR error LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION_FOR ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SWITCHs ::= SWITCH LPAREN error RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN error CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SWITCHs ::= SWITCH error RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta paréntesis de apertura en el switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SWITCHs ::= SWITCH LPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SWITCHs ::= SWITCH error LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis de la condición del switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT CASES LISTA_DEFAULT CASES RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Múltiples definiciones de default en un switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE_STMT ::= CASE LITERALES COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE_STMT ::= CASE LITERALES COLON LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE_STMT ::= CASE error COLON SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la condición del case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASE_STMT ::= CASE LITERALES SENTENCIAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta dos puntos en el case."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LISTA_DEFAULT ::= DEFAULT_STMT LISTA_DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DEFAULT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LISTA_DEFAULT ::= DEFAULT_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DEFAULT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // READ_WRITE ::= READ error IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // READ_WRITE ::= READ LPAREN IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // READ_WRITE ::= READ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Faltan los paréntesis para la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // READ_WRITE ::= READ error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // READ_WRITE ::= READ LPAREN error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // READ_WRITE ::= WRITE error LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de apertura en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en el paréntesis de cierre en la llamada a la funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // READ_WRITE ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // READ_WRITE ::= WRITE LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta una expresión entre los paréntesis"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LISTA_EXPRESIONES ::= COMMA EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ARGUMENTOS ::= ARGUMENTOS error EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ARGUMENTOS ::= ARGUMENTOS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ARGUMENTOS ::= COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPRESION_ARITMETICA ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPRESION_ARITMETICA ::= error TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPRESION_ARITMETICA ::= error DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPRESION_ARITMETICA ::= error PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPRESION_ARITMETICA ::= error MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXPRESIONES_NUMERICAS ::= error PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXPRESIONES_NUMERICAS ::= error MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXPRESIONES_NUMERICAS ::= error TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXPRESIONES_NUMERICAS ::= error DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXPRESIONES_NUMERICAS ::= error MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXPRESIONES_NUMERICAS ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INCREMENTO_DECREMENTO ::= DEC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INCREMENTO_DECREMENTO ::= INC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // EXPRESION_ASIGNACION ::= PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // EXPRESION_ASIGNACION ::= MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // EXPRESION_ASIGNACION ::= TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // EXPRESION_ASIGNACION ::= DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // EXPRESION_ASIGNACION ::= ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
