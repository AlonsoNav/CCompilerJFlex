
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\027\003" +
    "\000\002\027\004\000\002\027\004\000\002\030\003\000" +
    "\002\030\004\000\002\024\013\000\002\024\012\000\002" +
    "\024\012\000\002\024\013\000\002\024\012\000\002\024" +
    "\011\000\002\024\011\000\002\024\012\000\002\025\004" +
    "\000\002\025\006\000\002\036\004\000\002\036\002\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\005\000\002\026\005\000" +
    "\002\026\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\004\000\002\026\004\000\002\004\005\000\002\004" +
    "\006\000\002\004\005\000\002\023\005\000\002\023\007" +
    "\000\002\023\005\000\002\023\003\000\002\023\004\000" +
    "\002\023\006\000\002\023\006\000\002\023\004\000\002" +
    "\006\012\000\002\006\012\000\002\006\007\000\002\006" +
    "\012\000\002\006\012\000\002\012\003\000\002\012\003" +
    "\000\002\037\005\000\002\037\003\000\002\035\005\000" +
    "\002\035\003\000\002\007\004\000\002\007\006\000\002" +
    "\007\006\000\002\007\002\000\002\010\011\000\002\041" +
    "\013\000\002\011\011\000\002\013\006\000\002\013\007" +
    "\000\002\005\003\000\002\005\002\000\002\043\012\000" +
    "\002\043\011\000\002\044\004\000\002\044\002\000\002" +
    "\047\006\000\002\046\005\000\002\021\007\000\002\021" +
    "\006\000\002\021\007\000\002\053\003\000\002\053\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\040\003\000\002\040\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\034\006\000\002\034\005\000\002\034\003\000\002" +
    "\034\003\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\003\000\002\052\006\000\002\052\005\000" +
    "\002\052\003\000\002\052\003\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\022\002\ufffd\003\014\074\017\075\016\111" +
    "\005\112\006\115\020\126\013\001\002\000\020\002\ufffe" +
    "\074\017\075\016\111\005\112\006\115\020\126\013\001" +
    "\002\000\010\062\uffad\112\u011f\115\u011e\001\002\000\006" +
    "\062\uffab\111\u011d\001\002\000\070\002\ufffc\006\ufffc\030" +
    "\ufffc\036\ufffc\037\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\100" +
    "\ufffc\106\ufffc\110\ufffc\111\ufffc\112\ufffc\114\ufffc\115\ufffc" +
    "\122\ufffc\126\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002\000" +
    "\016\002\uffff\074\017\111\005\112\006\115\020\126\u011a" +
    "\001\002\000\004\062\u0107\001\002\000\004\002\u0106\001" +
    "\002\000\004\062\121\001\002\000\004\024\120\001\002" +
    "\000\016\002\ufff9\074\ufff9\111\ufff9\112\ufff9\115\ufff9\126" +
    "\ufff9\001\002\000\012\074\017\111\005\112\006\115\020" +
    "\001\002\000\004\062\uffac\001\002\000\006\062\uffaa\111" +
    "\021\001\002\000\004\062\uffa6\001\002\000\004\062\023" +
    "\001\002\000\012\015\uffd3\021\116\024\uffd3\062\uffd3\001" +
    "\002\000\010\015\025\024\026\062\027\001\002\000\004" +
    "\062\113\001\002\000\072\002\uffd8\006\uffd8\024\uffd8\030" +
    "\uffd8\036\uffd8\037\uffd8\061\uffd8\062\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\072\uffd8\074\uffd8\075\uffd8\076\uffd8\100" +
    "\uffd8\106\uffd8\110\uffd8\111\uffd8\112\uffd8\114\uffd8\115\uffd8" +
    "\122\uffd8\126\uffd8\130\uffd8\131\uffd8\132\uffd8\001\002\000" +
    "\012\015\uffd2\021\030\024\uffd2\062\uffd2\001\002\000\024" +
    "\006\044\036\043\037\045\061\035\062\041\064\042\065" +
    "\036\066\046\067\032\001\002\000\016\013\055\015\uffd1" +
    "\024\uffd1\034\054\035\052\062\uffd1\001\002\000\124\003" +
    "\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\015\uff8d\017\uff8d\020\uff8d\023\uff8d\024" +
    "\uff8d\030\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\054\uff8d" +
    "\055\uff8d\056\uff8d\057\uff8d\061\uff8d\062\uff8d\064\uff8d\065" +
    "\uff8d\066\uff8d\067\uff8d\072\uff8d\073\uff8d\076\uff8d\077\uff8d" +
    "\100\uff8d\106\uff8d\110\uff8d\114\uff8d\122\uff8d\130\uff8d\131" +
    "\uff8d\132\uff8d\001\002\000\112\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\015\uff81\017" +
    "\uff81\020\uff81\024\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\054\uff81\055\uff81\056\uff81\057\uff81\061\uff81\062\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\072\uff81\076\uff81\100\uff81" +
    "\106\uff81\110\uff81\114\uff81\122\uff81\130\uff81\131\uff81\132" +
    "\uff81\001\002\000\112\004\070\005\073\006\uffc4\007\uffc4" +
    "\010\071\011\072\012\067\013\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\024\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\072\uffc4\076\uffc4\100\uffc4\106\uffc4" +
    "\110\uffc4\114\uffc4\122\uffc4\130\uffc4\131\uffc4\132\uffc4\001" +
    "\002\000\124\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\015\uff91\017\uff91\020" +
    "\uff91\023\uff91\024\uff91\030\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\054\uff91\055\uff91\056\uff91\057\uff91\061\uff91\062" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\072\uff91\073\uff91" +
    "\076\uff91\077\uff91\100\uff91\106\uff91\110\uff91\114\uff91\122" +
    "\uff91\130\uff91\131\uff91\132\uff91\001\002\000\124\003\uff8f" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\015\uff8f\017\uff8f\020\uff8f\023\uff8f\024\uff8f" +
    "\030\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\072\uff8f\073\uff8f\076\uff8f\077\uff8f\100" +
    "\uff8f\106\uff8f\110\uff8f\114\uff8f\122\uff8f\130\uff8f\131\uff8f" +
    "\132\uff8f\001\002\000\100\006\uffc6\007\uffc6\013\uffc6\015" +
    "\uffc6\017\057\020\063\024\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\054\062\055\060\056\061\057\064\061\uffc6\062" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6\076\uffc6" +
    "\100\uffc6\106\uffc6\110\uffc6\114\uffc6\122\uffc6\130\uffc6\131" +
    "\uffc6\132\uffc6\001\002\000\112\004\uff80\005\uff80\006\uff80" +
    "\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\015\uff80\017" +
    "\uff80\020\uff80\024\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\054\uff80\055\uff80\056\uff80\057\uff80\061\uff80\062\uff80\064" +
    "\uff80\065\uff80\066\uff80\067\uff80\072\uff80\076\uff80\100\uff80" +
    "\106\uff80\110\uff80\114\uff80\122\uff80\130\uff80\131\uff80\132" +
    "\uff80\001\002\000\112\004\uff84\005\uff84\006\104\007\uff84" +
    "\010\uff84\011\uff84\012\uff84\013\uff84\015\uff84\017\uff84\020" +
    "\uff84\024\uff84\034\uff84\035\uff84\036\102\037\103\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\061\uff84\062\uff84\064\uff84\065" +
    "\uff84\066\uff84\067\uff84\072\uff84\076\uff84\100\uff84\106\uff84" +
    "\110\uff84\114\uff84\122\uff84\130\uff84\131\uff84\132\uff84\001" +
    "\002\000\124\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\013\uff90\015\uff90\017\uff90\020" +
    "\uff90\023\uff90\024\uff90\030\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\054\uff90\055\uff90\056\uff90\057\uff90\061\uff90\062" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\072\uff90\073\uff90" +
    "\076\uff90\077\uff90\100\uff90\106\uff90\110\uff90\114\uff90\122" +
    "\uff90\130\uff90\131\uff90\132\uff90\001\002\000\004\062\101" +
    "\001\002\000\024\006\044\036\043\037\045\061\035\062" +
    "\041\064\042\065\036\066\046\067\032\001\002\000\004" +
    "\062\047\001\002\000\124\003\uff8e\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e" +
    "\017\uff8e\020\uff8e\023\uff8e\024\uff8e\030\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e" +
    "\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\072" +
    "\uff8e\073\uff8e\076\uff8e\077\uff8e\100\uff8e\106\uff8e\110\uff8e" +
    "\114\uff8e\122\uff8e\130\uff8e\131\uff8e\132\uff8e\001\002\000" +
    "\114\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71" +
    "\012\uff71\013\uff71\015\uff71\017\uff71\020\uff71\023\uff71\024" +
    "\uff71\034\uff71\035\uff71\036\uff71\037\uff71\054\uff71\055\uff71" +
    "\056\uff71\057\uff71\061\uff71\062\uff71\064\uff71\065\uff71\066" +
    "\uff71\067\uff71\072\uff71\076\uff71\100\uff71\106\uff71\110\uff71" +
    "\114\uff71\122\uff71\130\uff71\131\uff71\132\uff71\001\002\000" +
    "\012\007\051\013\055\034\054\035\052\001\002\000\112" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\015\uff85\017\uff85\020\uff85\024\uff85\034\uff85" +
    "\035\uff85\036\uff85\037\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\061\uff85\062\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
    "\072\uff85\076\uff85\100\uff85\106\uff85\110\uff85\114\uff85\122" +
    "\uff85\130\uff85\131\uff85\132\uff85\001\002\000\024\006\uff9f" +
    "\036\uff9f\037\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\067\uff9f\001\002\000\024\006\044\036\043\037\045" +
    "\061\035\062\041\064\042\065\036\066\046\067\032\001" +
    "\002\000\024\006\uff9e\036\uff9e\037\uff9e\061\uff9e\062\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\001\002\000\024\006" +
    "\uff9d\036\uff9d\037\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d" +
    "\066\uff9d\067\uff9d\001\002\000\100\006\uffc7\007\uffc7\013" +
    "\uffc7\015\uffc7\017\057\020\063\024\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\054\062\055\060\056\061\057\064\061" +
    "\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\072\uffc7" +
    "\076\uffc7\100\uffc7\106\uffc7\110\uffc7\114\uffc7\122\uffc7\130" +
    "\uffc7\131\uffc7\132\uffc7\001\002\000\024\006\uffa3\036\uffa3" +
    "\037\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\001\002\000\024\006\uffa5\036\uffa5\037\uffa5\061\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\001\002\000" +
    "\024\006\uffa1\036\uffa1\037\uffa1\061\uffa1\062\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\067\uffa1\001\002\000\024\006\uffa4\036" +
    "\uffa4\037\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\001\002\000\024\006\uffa2\036\uffa2\037\uffa2\061" +
    "\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\001\002" +
    "\000\024\006\uffa0\036\uffa0\037\uffa0\061\uffa0\062\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\001\002\000\024\006\044" +
    "\036\043\037\045\061\035\062\041\064\042\065\036\066" +
    "\046\067\032\001\002\000\112\004\070\005\073\006\uffc5" +
    "\007\uffc5\010\071\011\072\012\067\013\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\024\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\061\uffc5\062\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\072\uffc5\076\uffc5\100\uffc5" +
    "\106\uffc5\110\uffc5\114\uffc5\122\uffc5\130\uffc5\131\uffc5\132" +
    "\uffc5\001\002\000\024\006\044\036\043\037\045\061\035" +
    "\062\041\064\042\065\036\066\046\067\032\001\002\000" +
    "\024\006\044\036\043\037\045\061\035\062\041\064\042" +
    "\065\036\066\046\067\032\001\002\000\024\006\044\036" +
    "\043\037\045\061\035\062\041\064\042\065\036\066\046" +
    "\067\032\001\002\000\024\006\044\036\043\037\045\061" +
    "\035\062\041\064\042\065\036\066\046\067\032\001\002" +
    "\000\024\006\044\036\043\037\045\061\035\062\041\064" +
    "\042\065\036\066\046\067\032\001\002\000\112\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\015\uff88\017\uff88\020\uff88\024\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\054\uff88\055\uff88\056\uff88\057\uff88\061" +
    "\uff88\062\uff88\064\uff88\065\uff88\066\uff88\067\uff88\072\uff88" +
    "\076\uff88\100\uff88\106\uff88\110\uff88\114\uff88\122\uff88\130" +
    "\uff88\131\uff88\132\uff88\001\002\000\112\004\uff87\005\uff87" +
    "\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015" +
    "\uff87\017\uff87\020\uff87\024\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\054\uff87\055\uff87\056\uff87\057\uff87\061\uff87\062" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\072\uff87\076\uff87" +
    "\100\uff87\106\uff87\110\uff87\114\uff87\122\uff87\130\uff87\131" +
    "\uff87\132\uff87\001\002\000\112\004\uff89\005\073\006\uff89" +
    "\007\uff89\010\uff89\011\072\012\067\013\uff89\015\uff89\017" +
    "\uff89\020\uff89\024\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\061\uff89\062\uff89\064" +
    "\uff89\065\uff89\066\uff89\067\uff89\072\uff89\076\uff89\100\uff89" +
    "\106\uff89\110\uff89\114\uff89\122\uff89\130\uff89\131\uff89\132" +
    "\uff89\001\002\000\112\004\uff8a\005\073\006\uff8a\007\uff8a" +
    "\010\uff8a\011\072\012\067\013\uff8a\015\uff8a\017\uff8a\020" +
    "\uff8a\024\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\057\uff8a\061\uff8a\062\uff8a\064\uff8a\065" +
    "\uff8a\066\uff8a\067\uff8a\072\uff8a\076\uff8a\100\uff8a\106\uff8a" +
    "\110\uff8a\114\uff8a\122\uff8a\130\uff8a\131\uff8a\132\uff8a\001" +
    "\002\000\112\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\015\uff86\017\uff86\020\uff86\024" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\054\uff86\055\uff86" +
    "\056\uff86\057\uff86\061\uff86\062\uff86\064\uff86\065\uff86\066" +
    "\uff86\067\uff86\072\uff86\076\uff86\100\uff86\106\uff86\110\uff86" +
    "\114\uff86\122\uff86\130\uff86\131\uff86\132\uff86\001\002\000" +
    "\114\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72" +
    "\012\uff72\013\uff72\015\uff72\017\uff72\020\uff72\023\uff72\024" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\054\uff72\055\uff72" +
    "\056\uff72\057\uff72\061\uff72\062\uff72\064\uff72\065\uff72\066" +
    "\uff72\067\uff72\072\uff72\076\uff72\100\uff72\106\uff72\110\uff72" +
    "\114\uff72\122\uff72\130\uff72\131\uff72\132\uff72\001\002\000" +
    "\114\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74" +
    "\012\uff74\013\uff74\015\uff74\017\uff74\020\uff74\023\uff74\024" +
    "\uff74\034\uff74\035\uff74\036\uff74\037\uff74\054\uff74\055\uff74" +
    "\056\uff74\057\uff74\061\uff74\062\uff74\064\uff74\065\uff74\066" +
    "\uff74\067\uff74\072\uff74\076\uff74\100\uff74\106\uff74\110\uff74" +
    "\114\uff74\122\uff74\130\uff74\131\uff74\132\uff74\001\002\000" +
    "\114\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73" +
    "\012\uff73\013\uff73\015\uff73\017\uff73\020\uff73\023\uff73\024" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\054\uff73\055\uff73" +
    "\056\uff73\057\uff73\061\uff73\062\uff73\064\uff73\065\uff73\066" +
    "\uff73\067\uff73\072\uff73\076\uff73\100\uff73\106\uff73\110\uff73" +
    "\114\uff73\122\uff73\130\uff73\131\uff73\132\uff73\001\002\000" +
    "\026\006\044\007\106\036\043\037\045\061\035\062\041" +
    "\064\042\065\036\066\046\067\032\001\002\000\014\007" +
    "\uff8c\013\055\015\uff8c\034\054\035\052\001\002\000\112" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\015\uff82\017\uff82\020\uff82\024\uff82\034\uff82" +
    "\035\uff82\036\uff82\037\uff82\054\uff82\055\uff82\056\uff82\057" +
    "\uff82\061\uff82\062\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\072\uff82\076\uff82\100\uff82\106\uff82\110\uff82\114\uff82\122" +
    "\uff82\130\uff82\131\uff82\132\uff82\001\002\000\006\007\111" +
    "\015\110\001\002\000\024\006\044\036\043\037\045\061" +
    "\035\062\041\064\042\065\036\066\046\067\032\001\002" +
    "\000\112\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011" +
    "\uff83\012\uff83\013\uff83\015\uff83\017\uff83\020\uff83\024\uff83" +
    "\034\uff83\035\uff83\036\uff83\037\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\061\uff83\062\uff83\064\uff83\065\uff83\066\uff83" +
    "\067\uff83\072\uff83\076\uff83\100\uff83\106\uff83\110\uff83\114" +
    "\uff83\122\uff83\130\uff83\131\uff83\132\uff83\001\002\000\014" +
    "\007\uff8b\013\055\015\uff8b\034\054\035\052\001\002\000" +
    "\012\015\uffd6\021\114\024\uffd6\062\uffd6\001\002\000\030" +
    "\006\044\015\uffd0\024\uffd0\036\043\037\045\061\035\062" +
    "\uffd0\064\042\065\036\066\046\067\032\001\002\000\016" +
    "\013\055\015\uffd5\024\uffd5\034\054\035\052\062\uffd5\001" +
    "\002\000\030\006\044\015\uffcf\024\uffcf\036\043\037\045" +
    "\061\035\062\uffcf\064\042\065\036\066\046\067\032\001" +
    "\002\000\016\013\055\015\uffd4\024\uffd4\034\054\035\052" +
    "\062\uffd4\001\002\000\070\002\ufffa\006\ufffa\030\ufffa\036" +
    "\ufffa\037\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\072\ufffa\074\ufffa\075\ufffa\076\ufffa\100\ufffa\106" +
    "\ufffa\110\ufffa\111\ufffa\112\ufffa\114\ufffa\115\ufffa\122\ufffa" +
    "\126\ufffa\130\ufffa\131\ufffa\132\ufffa\001\002\000\014\006" +
    "\124\015\uffd3\021\116\024\uffd3\062\uffd3\001\002\000\010" +
    "\015\025\024\123\062\027\001\002\000\072\002\uffd7\006" +
    "\uffd7\024\uffd7\030\uffd7\036\uffd7\037\uffd7\061\uffd7\062\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\100\uffd7\106\uffd7\110\uffd7\111\uffd7\112\uffd7" +
    "\114\uffd7\115\uffd7\122\uffd7\126\uffd7\130\uffd7\131\uffd7\132" +
    "\uffd7\001\002\000\014\007\126\074\017\111\005\112\006" +
    "\115\020\001\002\000\004\062\u0105\001\002\000\004\027" +
    "\377\001\002\000\006\007\131\015\130\001\002\000\012" +
    "\074\017\111\005\112\006\115\020\001\002\000\004\027" +
    "\132\001\002\000\070\003\014\006\uffec\030\uffec\036\uffec" +
    "\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\072\uffec\074\017\075\016\076\uffec\100\uffec\106\uffec" +
    "\110\uffec\111\005\112\006\114\uffec\115\020\122\uffec\126" +
    "\136\130\uffec\131\uffec\132\uffec\001\002\000\066\006\uffec" +
    "\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\072\uffec\074\017\075\016\076\uffec" +
    "\100\uffec\106\uffec\110\uffec\111\005\112\006\114\uffec\115" +
    "\020\122\uffec\126\136\130\uffec\131\uffec\132\uffec\001\002" +
    "\000\052\006\044\030\144\036\043\037\045\061\035\062" +
    "\147\064\042\065\036\066\046\067\032\072\161\076\142" +
    "\100\155\106\164\110\152\114\146\122\151\130\143\131" +
    "\141\132\154\001\002\000\004\062\023\001\002\000\004" +
    "\062\023\001\002\000\010\015\025\024\140\062\027\001" +
    "\002\000\072\002\uffd9\006\uffd9\024\uffd9\030\uffd9\036\uffd9" +
    "\037\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\072\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\106\uffd9" +
    "\110\uffd9\111\uffd9\112\uffd9\114\uffd9\115\uffd9\122\uffd9\126" +
    "\uffd9\130\uffd9\131\uffd9\132\uffd9\001\002\000\004\006\364" +
    "\001\002\000\062\003\uffdc\006\uffdc\024\363\030\uffdc\036" +
    "\uffdc\037\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\106" +
    "\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc\131\uffdc\132\uffdc" +
    "\001\002\000\004\006\355\001\002\000\016\002\ufff0\074" +
    "\ufff0\111\ufff0\112\ufff0\115\ufff0\126\ufff0\001\002\000\060" +
    "\003\uffed\006\uffed\030\uffed\036\uffed\037\uffed\061\uffed\062" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\073\uffed" +
    "\076\uffed\077\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122" +
    "\uffed\130\uffed\131\uffed\132\uffed\001\002\000\020\024\350" +
    "\061\035\062\352\064\042\065\036\066\046\067\032\001" +
    "\002\000\124\004\uff84\005\uff84\006\104\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\015\uff84\017\uff84\020\uff84\021" +
    "\341\024\uff84\034\uff84\035\uff84\036\102\037\103\040\337" +
    "\041\336\042\340\043\335\054\uff84\055\uff84\056\uff84\057" +
    "\uff84\061\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067\uff84" +
    "\072\uff84\076\uff84\100\uff84\106\uff84\110\uff84\114\uff84\122" +
    "\uff84\130\uff84\131\uff84\132\uff84\001\002\000\060\003\uffe7" +
    "\006\uffe7\030\uffe7\036\uffe7\037\uffe7\061\uffe7\062\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\072\uffe7\073\uffe7\076\uffe7" +
    "\077\uffe7\100\uffe7\106\uffe7\110\uffe7\114\uffe7\122\uffe7\130" +
    "\uffe7\131\uffe7\132\uffe7\001\002\000\004\006\271\001\002" +
    "\000\006\003\232\006\233\001\002\000\060\003\uffe8\006" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\061\uffe8\062\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8\077" +
    "\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\001\002\000\004\006\223\001\002\000" +
    "\004\027\213\001\002\000\056\006\uffc9\007\uffc9\015\uffc9" +
    "\024\uffc9\036\uffc9\037\uffc9\061\uffc9\062\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\072\uffc9\076\uffc9\100\uffc9\106\uffc9" +
    "\110\uffc9\114\uffc9\122\uffc9\130\uffc9\131\uffc9\132\uffc9\001" +
    "\002\000\060\003\uffe6\006\uffe6\030\uffe6\036\uffe6\037\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072" +
    "\uffe6\073\uffe6\076\uffe6\077\uffe6\100\uffe6\106\uffe6\110\uffe6" +
    "\114\uffe6\122\uffe6\130\uffe6\131\uffe6\132\uffe6\001\002\000" +
    "\060\003\uffea\006\uffea\030\uffea\036\uffea\037\uffea\061\uffea" +
    "\062\uffea\064\uffea\065\uffea\066\uffea\067\uffea\072\uffea\073" +
    "\uffea\076\uffea\077\uffea\100\uffea\106\uffea\110\uffea\114\uffea" +
    "\122\uffea\130\uffea\131\uffea\132\uffea\001\002\000\062\003" +
    "\uffdd\006\uffdd\024\212\030\uffdd\036\uffdd\037\uffdd\061\uffdd" +
    "\062\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\073" +
    "\uffdd\076\uffdd\077\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd" +
    "\122\uffdd\130\uffdd\131\uffdd\132\uffdd\001\002\000\060\003" +
    "\uffe9\006\uffe9\030\uffe9\036\uffe9\037\uffe9\061\uffe9\062\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072\uffe9\073\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\106\uffe9\110\uffe9\114\uffe9\122\uffe9" +
    "\130\uffe9\131\uffe9\132\uffe9\001\002\000\052\006\044\024" +
    "\210\036\043\037\045\061\035\062\147\064\042\065\036" +
    "\066\046\067\032\072\161\076\142\100\155\106\164\110" +
    "\152\114\146\122\151\130\143\131\141\132\154\001\002" +
    "\000\004\006\170\001\002\000\064\006\uffc8\007\uffc8\013" +
    "\055\015\uffc8\024\uffc8\034\054\035\052\036\uffc8\037\uffc8" +
    "\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\072" +
    "\uffc8\076\uffc8\100\uffc8\106\uffc8\110\uffc8\114\uffc8\122\uffc8" +
    "\130\uffc8\131\uffc8\132\uffc8\001\002\000\060\003\uffe5\006" +
    "\uffe5\030\uffe5\036\uffe5\037\uffe5\061\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\072\uffe5\073\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\106\uffe5\110\uffe5\114\uffe5\122\uffe5\130\uffe5" +
    "\131\uffe5\132\uffe5\001\002\000\060\003\uffeb\006\uffeb\030" +
    "\uffeb\036\uffeb\037\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\072\uffeb\073\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\106\uffeb\110\uffeb\114\uffeb\122\uffeb\130\uffeb\131\uffeb" +
    "\132\uffeb\001\002\000\042\006\044\024\uffb9\036\043\037" +
    "\045\061\035\062\147\064\042\065\036\066\046\067\032" +
    "\074\017\075\016\111\005\112\006\115\020\126\136\001" +
    "\002\000\004\007\204\001\002\000\026\006\044\024\uffb9" +
    "\036\043\037\045\061\035\062\147\064\042\065\036\066" +
    "\046\067\032\001\002\000\004\024\175\001\002\000\006" +
    "\007\uffba\024\uffba\001\002\000\026\006\044\024\uffb9\036" +
    "\043\037\045\061\035\062\147\064\042\065\036\066\046" +
    "\067\032\001\002\000\004\024\177\001\002\000\026\006" +
    "\044\007\uffb9\036\043\037\045\061\035\062\147\064\042" +
    "\065\036\066\046\067\032\001\002\000\004\007\uffbb\001" +
    "\002\000\004\024\202\001\002\000\026\006\044\007\uffb9" +
    "\036\043\037\045\061\035\062\147\064\042\065\036\066" +
    "\046\067\032\001\002\000\004\007\uffbc\001\002\000\004" +
    "\027\205\001\002\000\052\006\uffec\030\uffec\036\uffec\037" +
    "\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec\122" +
    "\uffec\130\uffec\131\uffec\132\uffec\001\002\000\052\006\044" +
    "\030\207\036\043\037\045\061\035\062\147\064\042\065" +
    "\036\066\046\067\032\072\161\076\142\100\155\106\164" +
    "\110\152\114\146\122\151\130\143\131\141\132\154\001" +
    "\002\000\060\003\uffbd\006\uffbd\030\uffbd\036\uffbd\037\uffbd" +
    "\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\072" +
    "\uffbd\073\uffbd\076\uffbd\077\uffbd\100\uffbd\106\uffbd\110\uffbd" +
    "\114\uffbd\122\uffbd\130\uffbd\131\uffbd\132\uffbd\001\002\000" +
    "\060\003\uffe4\006\uffe4\030\uffe4\036\uffe4\037\uffe4\061\uffe4" +
    "\062\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\072\uffe4\073" +
    "\uffe4\076\uffe4\077\uffe4\100\uffe4\106\uffe4\110\uffe4\114\uffe4" +
    "\122\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002\000\060\003" +
    "\uffe3\006\uffe3\030\uffe3\036\uffe3\037\uffe3\061\uffe3\062\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3\076" +
    "\uffe3\077\uffe3\100\uffe3\106\uffe3\110\uffe3\114\uffe3\122\uffe3" +
    "\130\uffe3\131\uffe3\132\uffe3\001\002\000\060\003\uffe2\006" +
    "\uffe2\030\uffe2\036\uffe2\037\uffe2\061\uffe2\062\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\072\uffe2\073\uffe2\076\uffe2\077" +
    "\uffe2\100\uffe2\106\uffe2\110\uffe2\114\uffe2\122\uffe2\130\uffe2" +
    "\131\uffe2\132\uffe2\001\002\000\052\006\uffec\030\uffec\036" +
    "\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114" +
    "\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\052" +
    "\006\044\030\215\036\043\037\045\061\035\062\147\064" +
    "\042\065\036\066\046\067\032\072\161\076\142\100\155" +
    "\106\164\110\152\114\146\122\151\130\143\131\141\132" +
    "\154\001\002\000\004\130\216\001\002\000\004\006\217" +
    "\001\002\000\024\006\044\036\043\037\045\061\035\062" +
    "\147\064\042\065\036\066\046\067\032\001\002\000\004" +
    "\007\221\001\002\000\004\024\222\001\002\000\060\003" +
    "\uffbe\006\uffbe\030\uffbe\036\uffbe\037\uffbe\061\uffbe\062\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\067\uffbe\072\uffbe\073\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\106\uffbe\110\uffbe\114\uffbe\122\uffbe" +
    "\130\uffbe\131\uffbe\132\uffbe\001\002\000\024\006\044\036" +
    "\043\037\045\061\035\062\147\064\042\065\036\066\046" +
    "\067\032\001\002\000\006\007\uffaf\015\uffaf\001\002\000" +
    "\006\007\227\015\226\001\002\000\024\006\044\036\043" +
    "\037\045\061\035\062\147\064\042\065\036\066\046\067" +
    "\032\001\002\000\004\024\230\001\002\000\060\003\uffb0" +
    "\006\uffb0\030\uffb0\036\uffb0\037\uffb0\061\uffb0\062\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\072\uffb0\073\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\106\uffb0\110\uffb0\114\uffb0\122\uffb0\130" +
    "\uffb0\131\uffb0\132\uffb0\001\002\000\006\007\uffae\015\uffae" +
    "\001\002\000\052\006\uffec\030\uffec\036\uffec\037\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130" +
    "\uffec\131\uffec\132\uffec\001\002\000\026\003\235\006\044" +
    "\036\043\037\045\061\035\062\147\064\042\065\036\066" +
    "\046\067\032\001\002\000\004\007\253\001\002\000\004" +
    "\007\236\001\002\000\004\027\237\001\002\000\052\006" +
    "\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec" +
    "\065\uffec\066\uffec\067\uffec\072\uffec\076\uffec\100\uffec\106" +
    "\uffec\110\uffec\114\uffec\122\uffec\130\uffec\131\uffec\132\uffec" +
    "\001\002\000\052\006\044\030\241\036\043\037\045\061" +
    "\035\062\147\064\042\065\036\066\046\067\032\072\161" +
    "\076\142\100\155\106\164\110\152\114\146\122\151\130" +
    "\143\131\141\132\154\001\002\000\062\003\uffc0\006\uffc0" +
    "\030\uffc0\036\uffc0\037\uffc0\061\uffc0\062\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\102\242\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130" +
    "\uffc0\131\uffc0\132\uffc0\001\002\000\010\003\244\027\245" +
    "\110\152\001\002\000\060\003\uffcd\006\uffcd\030\uffcd\036" +
    "\uffcd\037\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\067\uffcd\072\uffcd\073\uffcd\076\uffcd\077\uffcd\100\uffcd\106" +
    "\uffcd\110\uffcd\114\uffcd\122\uffcd\130\uffcd\131\uffcd\132\uffcd" +
    "\001\002\000\052\006\uffec\030\uffec\036\uffec\037\uffec\061" +
    "\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec" +
    "\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec\122\uffec\130" +
    "\uffec\131\uffec\132\uffec\001\002\000\052\006\uffec\030\uffec" +
    "\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec" +
    "\114\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000" +
    "\060\003\uffc3\006\uffc3\030\uffc3\036\uffc3\037\uffc3\061\uffc3" +
    "\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\072\uffc3\073" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\106\uffc3\110\uffc3\114\uffc3" +
    "\122\uffc3\130\uffc3\131\uffc3\132\uffc3\001\002\000\052\006" +
    "\044\030\250\036\043\037\045\061\035\062\147\064\042" +
    "\065\036\066\046\067\032\072\161\076\142\100\155\106" +
    "\164\110\152\114\146\122\151\130\143\131\141\132\154" +
    "\001\002\000\060\003\uffc2\006\uffc2\030\uffc2\036\uffc2\037" +
    "\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\072\uffc2\073\uffc2\076\uffc2\077\uffc2\100\uffc2\106\uffc2\110" +
    "\uffc2\114\uffc2\122\uffc2\130\uffc2\131\uffc2\132\uffc2\001\002" +
    "\000\052\006\044\030\252\036\043\037\045\061\035\062" +
    "\147\064\042\065\036\066\046\067\032\072\161\076\142" +
    "\100\155\106\164\110\152\114\146\122\151\130\143\131" +
    "\141\132\154\001\002\000\060\003\uffc1\006\uffc1\030\uffc1" +
    "\036\uffc1\037\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\072\uffc1\073\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\106\uffc1\110\uffc1\114\uffc1\122\uffc1\130\uffc1\131\uffc1\132" +
    "\uffc1\001\002\000\006\003\254\027\255\001\002\000\052" +
    "\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\072\uffec\076\uffec\100\uffec" +
    "\106\uffec\110\uffec\114\uffec\122\uffec\130\uffec\131\uffec\132" +
    "\uffec\001\002\000\054\003\uffec\006\uffec\030\uffec\036\uffec" +
    "\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114\uffec" +
    "\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\054\003" +
    "\257\006\044\030\260\036\043\037\045\061\035\062\147" +
    "\064\042\065\036\066\046\067\032\072\161\076\142\100" +
    "\155\106\164\110\152\114\146\122\151\130\143\131\141" +
    "\132\154\001\002\000\062\003\uffc0\006\uffc0\030\uffc0\036" +
    "\uffc0\037\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077\uffc0\100\uffc0\102" +
    "\242\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130\uffc0\131\uffc0" +
    "\132\uffc0\001\002\000\062\003\uffc0\006\uffc0\030\uffc0\036" +
    "\uffc0\037\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077\uffc0\100\uffc0\102" +
    "\242\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130\uffc0\131\uffc0" +
    "\132\uffc0\001\002\000\060\003\uffce\006\uffce\030\uffce\036" +
    "\uffce\037\uffce\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\072\uffce\073\uffce\076\uffce\077\uffce\100\uffce\106" +
    "\uffce\110\uffce\114\uffce\122\uffce\130\uffce\131\uffce\132\uffce" +
    "\001\002\000\060\003\uffca\006\uffca\030\uffca\036\uffca\037" +
    "\uffca\061\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\072\uffca\073\uffca\076\uffca\077\uffca\100\uffca\106\uffca\110" +
    "\uffca\114\uffca\122\uffca\130\uffca\131\uffca\132\uffca\001\002" +
    "\000\052\006\044\030\264\036\043\037\045\061\035\062" +
    "\147\064\042\065\036\066\046\067\032\072\161\076\142" +
    "\100\155\106\164\110\152\114\146\122\151\130\143\131" +
    "\141\132\154\001\002\000\062\003\uffc0\006\uffc0\030\uffc0" +
    "\036\uffc0\037\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\102\242\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130\uffc0\131" +
    "\uffc0\132\uffc0\001\002\000\060\003\uffcb\006\uffcb\030\uffcb" +
    "\036\uffcb\037\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\067\uffcb\072\uffcb\073\uffcb\076\uffcb\077\uffcb\100\uffcb" +
    "\106\uffcb\110\uffcb\114\uffcb\122\uffcb\130\uffcb\131\uffcb\132" +
    "\uffcb\001\002\000\052\006\044\030\267\036\043\037\045" +
    "\061\035\062\147\064\042\065\036\066\046\067\032\072" +
    "\161\076\142\100\155\106\164\110\152\114\146\122\151" +
    "\130\143\131\141\132\154\001\002\000\062\003\uffc0\006" +
    "\uffc0\030\uffc0\036\uffc0\037\uffc0\061\uffc0\062\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\102\242\106\uffc0\110\uffc0\114\uffc0\122\uffc0" +
    "\130\uffc0\131\uffc0\132\uffc0\001\002\000\060\003\uffcc\006" +
    "\uffcc\030\uffcc\036\uffcc\037\uffcc\061\uffcc\062\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\072\uffcc\073\uffcc\076\uffcc\077" +
    "\uffcc\100\uffcc\106\uffcc\110\uffcc\114\uffcc\122\uffcc\130\uffcc" +
    "\131\uffcc\132\uffcc\001\002\000\024\006\276\036\043\037" +
    "\045\061\035\062\275\064\042\065\036\066\046\067\032" +
    "\001\002\000\020\004\uff76\005\uff76\007\uff76\010\uff76\011" +
    "\uff76\012\uff76\023\uff76\001\002\000\016\004\302\005\305" +
    "\007\317\010\303\011\304\012\300\001\002\000\020\004" +
    "\uff75\005\uff75\007\uff75\010\uff75\011\uff75\012\uff75\023\uff75" +
    "\001\002\000\026\004\uff79\005\uff79\006\313\007\uff79\010" +
    "\uff79\011\uff79\012\uff79\023\uff79\036\102\037\103\001\002" +
    "\000\024\006\276\036\043\037\045\061\035\062\275\064" +
    "\042\065\036\066\046\067\032\001\002\000\016\004\302" +
    "\005\305\007\301\010\303\011\304\012\300\001\002\000" +
    "\024\006\276\036\043\037\045\061\035\062\275\064\042" +
    "\065\036\066\046\067\032\001\002\000\020\004\uff7a\005" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\023\uff7a\001\002" +
    "\000\024\006\276\036\043\037\045\061\035\062\275\064" +
    "\042\065\036\066\046\067\032\001\002\000\024\006\276" +
    "\036\043\037\045\061\035\062\275\064\042\065\036\066" +
    "\046\067\032\001\002\000\024\006\276\036\043\037\045" +
    "\061\035\062\275\064\042\065\036\066\046\067\032\001" +
    "\002\000\024\006\276\036\043\037\045\061\035\062\275" +
    "\064\042\065\036\066\046\067\032\001\002\000\020\004" +
    "\uff7d\005\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\023\uff7d" +
    "\001\002\000\020\004\uff7c\005\uff7c\007\uff7c\010\uff7c\011" +
    "\uff7c\012\uff7c\023\uff7c\001\002\000\020\004\uff7e\005\305" +
    "\007\uff7e\010\uff7e\011\304\012\300\023\uff7e\001\002\000" +
    "\020\004\uff7f\005\305\007\uff7f\010\uff7f\011\304\012\300" +
    "\023\uff7f\001\002\000\020\004\uff7b\005\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\023\uff7b\001\002\000\026\006\044" +
    "\007\314\036\043\037\045\061\035\062\041\064\042\065" +
    "\036\066\046\067\032\001\002\000\020\004\uff77\005\uff77" +
    "\007\uff77\010\uff77\011\uff77\012\uff77\023\uff77\001\002\000" +
    "\006\007\316\015\110\001\002\000\020\004\uff78\005\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\023\uff78\001\002\000" +
    "\004\027\320\001\002\000\010\030\uffb5\073\uffb5\077\uffb5" +
    "\001\002\000\010\030\326\073\325\077\322\001\002\000" +
    "\004\023\333\001\002\000\004\030\332\001\002\000\010" +
    "\030\uffb6\073\uffb6\077\uffb6\001\002\000\024\006\276\036" +
    "\043\037\045\061\035\062\275\064\042\065\036\066\046" +
    "\067\032\001\002\000\060\003\uffb7\006\uffb7\030\uffb7\036" +
    "\uffb7\037\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\072\uffb7\073\uffb7\076\uffb7\077\uffb7\100\uffb7\106" +
    "\uffb7\110\uffb7\114\uffb7\122\uffb7\130\uffb7\131\uffb7\132\uffb7" +
    "\001\002\000\016\004\302\005\305\010\303\011\304\012" +
    "\300\023\330\001\002\000\056\006\uffec\030\uffec\036\uffec" +
    "\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\072\uffec\073\uffec\076\uffec\077\uffec\100\uffec\106\uffec" +
    "\110\uffec\114\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001" +
    "\002\000\056\006\044\030\uffb4\036\043\037\045\061\035" +
    "\062\147\064\042\065\036\066\046\067\032\072\161\073" +
    "\uffb4\076\142\077\uffb4\100\155\106\164\110\152\114\146" +
    "\122\151\130\143\131\141\132\154\001\002\000\060\003" +
    "\uffb8\006\uffb8\030\uffb8\036\uffb8\037\uffb8\061\uffb8\062\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\072\uffb8\073\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\106\uffb8\110\uffb8\114\uffb8\122\uffb8" +
    "\130\uffb8\131\uffb8\132\uffb8\001\002\000\052\006\uffec\030" +
    "\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110" +
    "\uffec\114\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002" +
    "\000\052\006\044\030\uffb3\036\043\037\045\061\035\062" +
    "\147\064\042\065\036\066\046\067\032\072\161\076\142" +
    "\100\155\106\164\110\152\114\146\122\151\130\143\131" +
    "\141\132\154\001\002\000\024\006\044\036\043\037\045" +
    "\061\035\062\041\064\042\065\036\066\046\067\032\001" +
    "\002\000\024\006\044\036\043\037\045\061\035\062\041" +
    "\064\042\065\036\066\046\067\032\001\002\000\024\006" +
    "\044\036\043\037\045\061\035\062\041\064\042\065\036" +
    "\066\046\067\032\001\002\000\024\006\044\036\043\037" +
    "\045\061\035\062\041\064\042\065\036\066\046\067\032" +
    "\001\002\000\024\006\044\036\043\037\045\061\035\062" +
    "\147\064\042\065\036\066\046\067\032\001\002\000\064" +
    "\006\uff6c\007\uff6c\013\055\015\uff6c\024\uff6c\034\054\035" +
    "\052\036\uff6c\037\uff6c\061\uff6c\062\uff6c\064\uff6c\065\uff6c" +
    "\066\uff6c\067\uff6c\072\uff6c\076\uff6c\100\uff6c\106\uff6c\110" +
    "\uff6c\114\uff6c\122\uff6c\130\uff6c\131\uff6c\132\uff6c\001\002" +
    "\000\056\006\uff6b\007\uff6b\015\uff6b\024\uff6b\036\uff6b\037" +
    "\uff6b\061\uff6b\062\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b" +
    "\072\uff6b\076\uff6b\100\uff6b\106\uff6b\110\uff6b\114\uff6b\122" +
    "\uff6b\130\uff6b\131\uff6b\132\uff6b\001\002\000\064\006\uff6e" +
    "\007\uff6e\013\055\015\uff6e\024\uff6e\034\054\035\052\036" +
    "\uff6e\037\uff6e\061\uff6e\062\uff6e\064\uff6e\065\uff6e\066\uff6e" +
    "\067\uff6e\072\uff6e\076\uff6e\100\uff6e\106\uff6e\110\uff6e\114" +
    "\uff6e\122\uff6e\130\uff6e\131\uff6e\132\uff6e\001\002\000\064" +
    "\006\uff70\007\uff70\013\055\015\uff70\024\uff70\034\054\035" +
    "\052\036\uff70\037\uff70\061\uff70\062\uff70\064\uff70\065\uff70" +
    "\066\uff70\067\uff70\072\uff70\076\uff70\100\uff70\106\uff70\110" +
    "\uff70\114\uff70\122\uff70\130\uff70\131\uff70\132\uff70\001\002" +
    "\000\064\006\uff6f\007\uff6f\013\055\015\uff6f\024\uff6f\034" +
    "\054\035\052\036\uff6f\037\uff6f\061\uff6f\062\uff6f\064\uff6f" +
    "\065\uff6f\066\uff6f\067\uff6f\072\uff6f\076\uff6f\100\uff6f\106" +
    "\uff6f\110\uff6f\114\uff6f\122\uff6f\130\uff6f\131\uff6f\132\uff6f" +
    "\001\002\000\064\006\uff6d\007\uff6d\013\055\015\uff6d\024" +
    "\uff6d\034\054\035\052\036\uff6d\037\uff6d\061\uff6d\062\uff6d" +
    "\064\uff6d\065\uff6d\066\uff6d\067\uff6d\072\uff6d\076\uff6d\100" +
    "\uff6d\106\uff6d\110\uff6d\114\uff6d\122\uff6d\130\uff6d\131\uff6d" +
    "\132\uff6d\001\002\000\060\003\uffde\006\uffde\030\uffde\036" +
    "\uffde\037\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066\uffde" +
    "\067\uffde\072\uffde\073\uffde\076\uffde\077\uffde\100\uffde\106" +
    "\uffde\110\uffde\114\uffde\122\uffde\130\uffde\131\uffde\132\uffde" +
    "\001\002\000\062\003\uffdb\006\uffdb\024\354\030\uffdb\036" +
    "\uffdb\037\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\072\uffdb\073\uffdb\076\uffdb\077\uffdb\100\uffdb\106" +
    "\uffdb\110\uffdb\114\uffdb\122\uffdb\130\uffdb\131\uffdb\132\uffdb" +
    "\001\002\000\062\003\uffda\006\uffda\024\353\030\uffda\036" +
    "\uffda\037\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\072\uffda\073\uffda\076\uffda\077\uffda\100\uffda\106" +
    "\uffda\110\uffda\114\uffda\122\uffda\130\uffda\131\uffda\132\uffda" +
    "\001\002\000\060\003\uffdf\006\uffdf\030\uffdf\036\uffdf\037" +
    "\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\072\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\106\uffdf\110" +
    "\uffdf\114\uffdf\122\uffdf\130\uffdf\131\uffdf\132\uffdf\001\002" +
    "\000\060\003\uffe0\006\uffe0\030\uffe0\036\uffe0\037\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0\110\uffe0\114" +
    "\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\024" +
    "\006\044\036\043\037\045\061\035\062\147\064\042\065" +
    "\036\066\046\067\032\001\002\000\004\007\357\001\002" +
    "\000\004\027\360\001\002\000\052\006\uffec\030\uffec\036" +
    "\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\072\uffec\076\uffec\100\uffec\106\uffec\110\uffec\114" +
    "\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000\052" +
    "\006\044\030\362\036\043\037\045\061\035\062\147\064" +
    "\042\065\036\066\046\067\032\072\161\076\142\100\155" +
    "\106\164\110\152\114\146\122\151\130\143\131\141\132" +
    "\154\001\002\000\060\003\uffbf\006\uffbf\030\uffbf\036\uffbf" +
    "\037\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\072\uffbf\073\uffbf\076\uffbf\077\uffbf\100\uffbf\106\uffbf" +
    "\110\uffbf\114\uffbf\122\uffbf\130\uffbf\131\uffbf\132\uffbf\001" +
    "\002\000\060\003\uffe1\006\uffe1\030\uffe1\036\uffe1\037\uffe1" +
    "\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\072" +
    "\uffe1\073\uffe1\076\uffe1\077\uffe1\100\uffe1\106\uffe1\110\uffe1" +
    "\114\uffe1\122\uffe1\130\uffe1\131\uffe1\132\uffe1\001\002\000" +
    "\006\007\365\062\366\001\002\000\004\024\371\001\002" +
    "\000\004\007\367\001\002\000\004\024\370\001\002\000" +
    "\060\003\uffb2\006\uffb2\030\uffb2\036\uffb2\037\uffb2\061\uffb2" +
    "\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\072\uffb2\073" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\106\uffb2\110\uffb2\114\uffb2" +
    "\122\uffb2\130\uffb2\131\uffb2\132\uffb2\001\002\000\060\003" +
    "\uffb1\006\uffb1\030\uffb1\036\uffb1\037\uffb1\061\uffb1\062\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\072\uffb1\073\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\106\uffb1\110\uffb1\114\uffb1\122\uffb1" +
    "\130\uffb1\131\uffb1\132\uffb1\001\002\000\052\006\044\030" +
    "\374\036\043\037\045\061\035\062\147\064\042\065\036" +
    "\066\046\067\032\072\161\076\142\100\155\106\164\110" +
    "\152\114\146\122\151\130\143\131\141\132\154\001\002" +
    "\000\070\002\ufffb\006\ufffb\030\ufffb\036\ufffb\037\ufffb\061" +
    "\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\072\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\100\ufffb\106\ufffb\110\ufffb\111" +
    "\ufffb\112\ufffb\114\ufffb\115\ufffb\122\ufffb\126\ufffb\130\ufffb" +
    "\131\ufffb\132\ufffb\001\002\000\016\002\ufff4\074\ufff4\111" +
    "\ufff4\112\ufff4\115\ufff4\126\ufff4\001\002\000\004\062\376" +
    "\001\002\000\006\007\uffee\015\uffee\001\002\000\070\003" +
    "\014\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\074\017\075" +
    "\016\076\uffec\100\uffec\106\uffec\110\uffec\111\005\112\006" +
    "\114\uffec\115\020\122\uffec\126\136\130\uffec\131\uffec\132" +
    "\uffec\001\002\000\066\006\uffec\030\uffec\036\uffec\037\uffec" +
    "\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072" +
    "\uffec\074\017\075\016\076\uffec\100\uffec\106\uffec\110\uffec" +
    "\111\005\112\006\114\uffec\115\020\122\uffec\126\136\130" +
    "\uffec\131\uffec\132\uffec\001\002\000\052\006\044\030\u0102" +
    "\036\043\037\045\061\035\062\147\064\042\065\036\066" +
    "\046\067\032\072\161\076\142\100\155\106\164\110\152" +
    "\114\146\122\151\130\143\131\141\132\154\001\002\000" +
    "\016\002\ufff1\074\ufff1\111\ufff1\112\ufff1\115\ufff1\126\ufff1" +
    "\001\002\000\052\006\044\030\u0104\036\043\037\045\061" +
    "\035\062\147\064\042\065\036\066\046\067\032\072\161" +
    "\076\142\100\155\106\164\110\152\114\146\122\151\130" +
    "\143\131\141\132\154\001\002\000\016\002\ufff5\074\ufff5" +
    "\111\ufff5\112\ufff5\115\ufff5\126\ufff5\001\002\000\006\007" +
    "\uffef\015\uffef\001\002\000\004\002\001\001\002\000\014" +
    "\006\u0108\015\uffd3\021\116\024\uffd3\062\uffd3\001\002\000" +
    "\014\007\u0109\074\017\111\005\112\006\115\020\001\002" +
    "\000\004\027\u0112\001\002\000\006\007\u010b\015\130\001" +
    "\002\000\004\027\u010c\001\002\000\070\003\014\006\uffec" +
    "\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\072\uffec\074\017\075\016\076\uffec" +
    "\100\uffec\106\uffec\110\uffec\111\005\112\006\114\uffec\115" +
    "\020\122\uffec\126\136\130\uffec\131\uffec\132\uffec\001\002" +
    "\000\066\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062" +
    "\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\074\017" +
    "\075\016\076\uffec\100\uffec\106\uffec\110\uffec\111\005\112" +
    "\006\114\uffec\115\020\122\uffec\126\136\130\uffec\131\uffec" +
    "\132\uffec\001\002\000\052\006\044\030\u010f\036\043\037" +
    "\045\061\035\062\147\064\042\065\036\066\046\067\032" +
    "\072\161\076\142\100\155\106\164\110\152\114\146\122" +
    "\151\130\143\131\141\132\154\001\002\000\016\002\ufff3" +
    "\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001\002\000" +
    "\052\006\044\030\u0111\036\043\037\045\061\035\062\147" +
    "\064\042\065\036\066\046\067\032\072\161\076\142\100" +
    "\155\106\164\110\152\114\146\122\151\130\143\131\141" +
    "\132\154\001\002\000\016\002\ufff7\074\ufff7\111\ufff7\112" +
    "\ufff7\115\ufff7\126\ufff7\001\002\000\070\003\014\006\uffec" +
    "\030\uffec\036\uffec\037\uffec\061\uffec\062\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\072\uffec\074\017\075\016\076\uffec" +
    "\100\uffec\106\uffec\110\uffec\111\005\112\006\114\uffec\115" +
    "\020\122\uffec\126\136\130\uffec\131\uffec\132\uffec\001\002" +
    "\000\066\006\uffec\030\uffec\036\uffec\037\uffec\061\uffec\062" +
    "\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072\uffec\074\017" +
    "\075\016\076\uffec\100\uffec\106\uffec\110\uffec\111\005\112" +
    "\006\114\uffec\115\020\122\uffec\126\136\130\uffec\131\uffec" +
    "\132\uffec\001\002\000\052\006\044\030\u0115\036\043\037" +
    "\045\061\035\062\147\064\042\065\036\066\046\067\032" +
    "\072\161\076\142\100\155\106\164\110\152\114\146\122" +
    "\151\130\143\131\141\132\154\001\002\000\016\002\ufff2" +
    "\074\ufff2\111\ufff2\112\ufff2\115\ufff2\126\ufff2\001\002\000" +
    "\052\006\044\030\u0117\036\043\037\045\061\035\062\147" +
    "\064\042\065\036\066\046\067\032\072\161\076\142\100" +
    "\155\106\164\110\152\114\146\122\151\130\143\131\141" +
    "\132\154\001\002\000\016\002\ufff6\074\ufff6\111\ufff6\112" +
    "\ufff6\115\ufff6\126\ufff6\001\002\000\004\062\u011c\001\002" +
    "\000\016\002\ufff8\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126" +
    "\ufff8\001\002\000\004\062\u011b\001\002\000\004\006\124" +
    "\001\002\000\004\006\u0108\001\002\000\004\062\uffa7\001" +
    "\002\000\004\062\uffa8\001\002\000\004\062\uffa9\001\002" +
    "\000\016\002\000\074\017\111\005\112\006\115\020\126" +
    "\u011a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\016\002\011\004\006\014\010\024\014\027" +
    "\003\030\007\001\001\000\012\004\372\014\010\024\014" +
    "\030\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u0117\024\u0118\001\001\000\004" +
    "\023\136\001\001\000\002\001\001\000\004\023\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\032\033\037\034\033\035\036\037\030" +
    "\001\001\000\004\016\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\032\033\037\034\033\035\036\037\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\032\033\037\034\033\035\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\032\033\037\034\065\001\001\000\002\001\001\000\010" +
    "\022\032\033\037\034\077\001\001\000\010\022\032\033" +
    "\037\034\076\001\001\000\010\022\032\033\037\034\075" +
    "\001\001\000\010\022\032\033\037\034\074\001\001\000" +
    "\010\022\032\033\037\034\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\032\033\037\034\033\035\036\037" +
    "\104\040\106\001\001\000\004\016\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\032\033\037\034" +
    "\033\035\036\037\111\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\002\001\001\000\014\022\032\033" +
    "\037\034\033\035\036\037\114\001\001\000\004\016\052" +
    "\001\001\000\014\022\032\033\037\034\033\035\036\037" +
    "\116\001\001\000\004\016\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\124\025\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\374\001\001\000" +
    "\002\001\001\000\012\004\006\014\134\027\132\036\133" +
    "\001\001\000\010\004\372\014\134\036\371\001\001\000" +
    "\040\003\144\006\166\010\161\011\152\012\162\021\147" +
    "\022\032\026\156\032\155\033\037\034\033\035\036\037" +
    "\164\041\157\043\165\001\001\000\004\023\136\001\001" +
    "\000\004\023\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\210\006\166\010\161\011\152\012\162\021\147\022\032" +
    "\026\156\032\155\033\037\034\033\035\036\037\164\041" +
    "\157\043\165\001\001\000\002\001\001\000\004\016\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\171\005\172\012\173\013\170\014\134\022\032\032\155" +
    "\033\037\034\033\035\036\037\164\001\001\000\002\001" +
    "\001\000\022\005\200\012\173\022\032\032\155\033\037" +
    "\034\033\035\036\037\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\175\012\173\022\032\032\155" +
    "\033\037\034\033\035\036\037\164\001\001\000\002\001" +
    "\001\000\022\005\177\012\173\022\032\032\155\033\037" +
    "\034\033\035\036\037\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\202\012\173\022\032\032\155" +
    "\033\037\034\033\035\036\037\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\205\001\001\000\040" +
    "\003\144\006\166\010\161\011\152\012\162\021\147\022" +
    "\032\026\156\032\155\033\037\034\033\035\036\037\164" +
    "\041\157\043\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\213" +
    "\001\001\000\040\003\144\006\166\010\161\011\152\012" +
    "\162\021\147\022\032\026\156\032\155\033\037\034\033" +
    "\035\036\037\164\041\157\043\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\217\022\032\032\155" +
    "\033\037\034\033\035\036\037\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\223" +
    "\022\032\032\155\033\037\034\033\035\036\037\164\053" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\230\022\032\032\155\033\037\034\033\035\036\037" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\265\001\001\000\020\012\233\022" +
    "\032\032\155\033\037\034\033\035\036\037\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\237\001\001\000\040\003\144\006\166\010\161" +
    "\011\152\012\162\021\147\022\032\026\156\032\155\033" +
    "\037\034\033\035\036\037\164\041\157\043\165\001\001" +
    "\000\004\007\242\001\001\000\004\006\245\001\001\000" +
    "\002\001\001\000\004\036\250\001\001\000\004\036\246" +
    "\001\001\000\002\001\001\000\040\003\144\006\166\010" +
    "\161\011\152\012\162\021\147\022\032\026\156\032\155" +
    "\033\037\034\033\035\036\037\164\041\157\043\165\001" +
    "\001\000\002\001\001\000\040\003\144\006\166\010\161" +
    "\011\152\012\162\021\147\022\032\026\156\032\155\033" +
    "\037\034\033\035\036\037\164\041\157\043\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\262\001" +
    "\001\000\004\036\255\001\001\000\040\003\144\006\166" +
    "\010\161\011\152\012\162\021\147\022\032\026\156\032" +
    "\155\033\037\034\033\035\036\037\164\041\157\043\165" +
    "\001\001\000\004\007\261\001\001\000\004\007\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\144" +
    "\006\166\010\161\011\152\012\162\021\147\022\032\026" +
    "\156\032\155\033\037\034\033\035\036\037\164\041\157" +
    "\043\165\001\001\000\004\007\264\001\001\000\002\001" +
    "\001\000\040\003\144\006\166\010\161\011\152\012\162" +
    "\021\147\022\032\026\156\032\155\033\037\034\033\035" +
    "\036\037\164\041\157\043\165\001\001\000\004\007\267" +
    "\001\001\000\002\001\001\000\010\022\271\033\273\052" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\271\033\273\052" +
    "\276\001\001\000\002\001\001\000\010\022\271\033\273" +
    "\052\311\001\001\000\002\001\001\000\010\022\271\033" +
    "\273\052\310\001\001\000\010\022\271\033\273\052\307" +
    "\001\001\000\010\022\271\033\273\052\306\001\001\000" +
    "\010\022\271\033\273\052\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\032\033\037\034\033\035\036" +
    "\037\104\040\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\320" +
    "\001\001\000\006\046\322\047\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\271" +
    "\033\273\052\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\330\001\001\000\040\003\144\006\166" +
    "\010\161\011\152\012\162\021\147\022\032\026\156\032" +
    "\155\033\037\034\033\035\036\037\164\041\157\043\165" +
    "\001\001\000\002\001\001\000\004\036\333\001\001\000" +
    "\040\003\144\006\166\010\161\011\152\012\162\021\147" +
    "\022\032\026\156\032\155\033\037\034\033\035\036\037" +
    "\164\041\157\043\165\001\001\000\014\022\032\033\037" +
    "\034\033\035\036\037\346\001\001\000\014\022\032\033" +
    "\037\034\033\035\036\037\345\001\001\000\014\022\032" +
    "\033\037\034\033\035\036\037\344\001\001\000\014\022" +
    "\032\033\037\034\033\035\036\037\343\001\001\000\016" +
    "\022\032\032\342\033\037\034\033\035\036\037\341\001" +
    "\001\000\004\016\052\001\001\000\002\001\001\000\004" +
    "\016\052\001\001\000\004\016\052\001\001\000\004\016" +
    "\052\001\001\000\004\016\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\355\022\032\032\155\033\037" +
    "\034\033\035\036\037\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\360\001\001\000\040\003\144" +
    "\006\166\010\161\011\152\012\162\021\147\022\032\026" +
    "\156\032\155\033\037\034\033\035\036\037\164\041\157" +
    "\043\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\144\006\166\010\161\011\152\012\162\021\147\022\032" +
    "\026\156\032\155\033\037\034\033\035\036\037\164\041" +
    "\157\043\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\006\014" +
    "\134\027\377\036\u0100\001\001\000\010\004\372\014\134" +
    "\036\u0102\001\001\000\040\003\144\006\166\010\161\011" +
    "\152\012\162\021\147\022\032\026\156\032\155\033\037" +
    "\034\033\035\036\037\164\041\157\043\165\001\001\000" +
    "\002\001\001\000\040\003\144\006\166\010\161\011\152" +
    "\012\162\021\147\022\032\026\156\032\155\033\037\034" +
    "\033\035\036\037\164\041\157\043\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\124\025\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\006\014" +
    "\134\027\u010c\036\u010d\001\001\000\010\004\372\014\134" +
    "\036\u010f\001\001\000\040\003\144\006\166\010\161\011" +
    "\152\012\162\021\147\022\032\026\156\032\155\033\037" +
    "\034\033\035\036\037\164\041\157\043\165\001\001\000" +
    "\002\001\001\000\040\003\144\006\166\010\161\011\152" +
    "\012\162\021\147\022\032\026\156\032\155\033\037\034" +
    "\033\035\036\037\164\041\157\043\165\001\001\000\002" +
    "\001\001\000\012\004\006\014\134\027\u0112\036\u0113\001" +
    "\001\000\010\004\372\014\134\036\u0115\001\001\000\040" +
    "\003\144\006\166\010\161\011\152\012\162\021\147\022" +
    "\032\026\156\032\155\033\037\034\033\035\036\037\164" +
    "\041\157\043\165\001\001\000\002\001\001\000\040\003" +
    "\144\006\166\010\161\011\152\012\162\021\147\022\032" +
    "\026\156\032\155\033\037\034\033\035\036\037\164\041" +
    "\157\043\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\u0117\024\u0118\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }
    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBAL_DECLARACIONES ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Declaración de variable incorrecta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= EXPRESIONES SENTENCIA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTROL_STATEMENT ::= RETURN LITERALES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTROL_STATEMENT ::= RETURN IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID_LIST ::= ID_LIST IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre identificadores."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID_LIST ::= ID_LIST IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre identificadores."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "No se asignó ningun valor a la variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID_LIST ::= IDENTIFIER ASSIGN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "No se asignó ningun valor a la variable"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_IF ::= IF LPAREN error RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión de condición if incorrecta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_IF ::= IF error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en los paréntesis del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN error SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de apertura del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS error ESTRUCTURA_ELSE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en la llave de cierre del if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESTRUCTURA_ELSE ::= ELSE ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESTRUCTURA_ELSE ::= ELSE error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en las llaves del else."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASE_STMT ::= CASE EXPRESIONES_NUMERICAS COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
