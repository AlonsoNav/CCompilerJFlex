
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\027\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\004\000" +
    "\002\024\013\000\002\024\012\000\002\024\012\000\002" +
    "\024\013\000\002\024\012\000\002\024\011\000\002\024" +
    "\011\000\002\024\012\000\002\025\004\000\002\025\006" +
    "\000\002\036\004\000\002\036\002\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\003\000\002\026\003\000\002\026\004\000\002" +
    "\026\004\000\002\004\005\000\002\004\006\000\002\004" +
    "\005\000\002\023\005\000\002\023\007\000\002\023\005" +
    "\000\002\023\003\000\002\006\012\000\002\012\003\000" +
    "\002\012\003\000\002\037\005\000\002\037\003\000\002" +
    "\035\005\000\002\035\003\000\002\007\004\000\002\007" +
    "\006\000\002\007\006\000\002\007\002\000\002\010\011" +
    "\000\002\041\013\000\002\011\011\000\002\013\006\000" +
    "\002\013\007\000\002\005\002\000\002\005\003\000\002" +
    "\005\003\000\002\043\012\000\002\043\011\000\002\044" +
    "\004\000\002\044\002\000\002\046\006\000\002\045\005" +
    "\000\002\021\007\000\002\021\006\000\002\021\007\000" +
    "\002\051\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\004\000\002\051\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\040\003\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\004\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\003\000\002\034\006\000\002\034\005\000" +
    "\002\034\003\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\003\000\002\050" +
    "\006\000\002\050\005\000\002\050\003\000\002\050\003" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\020\002\ufffd\074\015\075\017\111\005\112" +
    "\006\115\016\126\013\001\002\000\020\002\ufffe\074\015" +
    "\075\017\111\005\112\006\115\016\126\013\001\002\000" +
    "\010\062\uffb2\112\u0144\115\u0143\001\002\000\006\062\uffb0" +
    "\111\u0142\001\002\000\104\002\ufffc\003\ufffc\006\ufffc\021" +
    "\ufffc\030\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\100\ufffc\106\ufffc" +
    "\110\ufffc\111\ufffc\112\ufffc\114\ufffc\115\ufffc\122\ufffc\126" +
    "\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002\000\016\002\uffff" +
    "\074\015\111\005\112\006\115\016\126\u013f\001\002\000" +
    "\004\062\u012c\001\002\000\004\002\u012b\001\002\000\004" +
    "\062\140\001\002\000\016\002\ufffa\074\ufffa\111\ufffa\112" +
    "\ufffa\115\ufffa\126\ufffa\001\002\000\004\062\uffb1\001\002" +
    "\000\006\062\uffaf\111\137\001\002\000\012\074\015\111" +
    "\005\112\006\115\016\001\002\000\004\062\021\001\002" +
    "\000\010\015\uffd4\021\135\024\uffd4\001\002\000\006\015" +
    "\023\024\024\001\002\000\004\062\025\001\002\000\106" +
    "\002\uffd9\003\uffd9\006\uffd9\021\uffd9\024\uffd9\030\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\061\uffd9" +
    "\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\072\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\100\uffd9\106\uffd9\110\uffd9\111\uffd9" +
    "\112\uffd9\114\uffd9\115\uffd9\122\uffd9\126\uffd9\130\uffd9\131" +
    "\uffd9\132\uffd9\001\002\000\010\015\uffd7\021\026\024\uffd7" +
    "\001\002\000\026\003\036\006\043\036\042\037\044\061" +
    "\033\062\040\064\041\065\034\066\045\067\031\001\002" +
    "\000\014\013\103\015\uffd6\024\uffd6\034\102\035\100\001" +
    "\002\000\046\003\uff83\004\uff83\005\uff83\007\uff83\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\015\uff83\017\uff83\020\uff83\024" +
    "\uff83\034\uff83\035\uff83\054\uff83\055\uff83\056\uff83\057\uff83" +
    "\001\002\000\136\003\uff92\004\uff92\005\uff92\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\015\uff92\017\uff92" +
    "\020\uff92\021\uff92\023\uff92\024\uff92\030\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\054\uff92\055\uff92\056\uff92\057\uff92\061\uff92\062\uff92\064" +
    "\uff92\065\uff92\066\uff92\067\uff92\072\uff92\073\uff92\076\uff92" +
    "\077\uff92\100\uff92\106\uff92\110\uff92\114\uff92\122\uff92\130" +
    "\uff92\131\uff92\132\uff92\001\002\000\046\003\uffcd\004\063" +
    "\005\066\007\uffcd\010\064\011\065\012\062\013\uffcd\015" +
    "\uffcd\017\uffcd\020\uffcd\024\uffcd\034\uffcd\035\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\001\002\000\136\003\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\015\uff96\017\uff96\020\uff96\021\uff96\023\uff96\024" +
    "\uff96\030\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\072\uff96\073\uff96\076\uff96\077\uff96\100\uff96\106\uff96\110" +
    "\uff96\114\uff96\122\uff96\130\uff96\131\uff96\132\uff96\001\002" +
    "\000\136\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\015\uff94\017\uff94\020\uff94" +
    "\021\uff94\023\uff94\024\uff94\030\uff94\034\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\054\uff94" +
    "\055\uff94\056\uff94\057\uff94\061\uff94\062\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\072\uff94\073\uff94\076\uff94\077\uff94" +
    "\100\uff94\106\uff94\110\uff94\114\uff94\122\uff94\130\uff94\131" +
    "\uff94\132\uff94\001\002\000\034\003\uffcf\007\uffcf\013\uffcf" +
    "\015\uffcf\017\105\020\111\024\uffcf\034\uffcf\035\uffcf\054" +
    "\110\055\106\056\107\057\112\001\002\000\016\004\054" +
    "\005\060\010\055\011\056\036\053\037\057\001\002\000" +
    "\046\003\uff82\004\uff82\005\uff82\007\uff82\010\uff82\011\uff82" +
    "\012\uff82\013\uff82\015\uff82\017\uff82\020\uff82\024\uff82\034" +
    "\uff82\035\uff82\054\uff82\055\uff82\056\uff82\057\uff82\001\002" +
    "\000\054\003\uff86\004\uff86\005\uff86\006\121\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\015\uff86\017\uff86\020\uff86" +
    "\024\uff86\034\uff86\035\uff86\036\117\037\120\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\001\002\000\136\003\uff95\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\015\uff95\017\uff95\020\uff95\021\uff95\023\uff95\024\uff95" +
    "\030\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067\uff95\072" +
    "\uff95\073\uff95\076\uff95\077\uff95\100\uff95\106\uff95\110\uff95" +
    "\114\uff95\122\uff95\130\uff95\131\uff95\132\uff95\001\002\000" +
    "\006\003\115\062\116\001\002\000\026\003\051\006\043" +
    "\036\042\037\044\061\033\062\040\064\041\065\034\066" +
    "\045\067\031\001\002\000\006\003\046\062\047\001\002" +
    "\000\136\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\013\uff93\015\uff93\017\uff93\020\uff93" +
    "\021\uff93\023\uff93\024\uff93\030\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\061\uff93\062\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\072\uff93\073\uff93\076\uff93\077\uff93" +
    "\100\uff93\106\uff93\110\uff93\114\uff93\122\uff93\130\uff93\131" +
    "\uff93\132\uff93\001\002\000\050\003\uff5a\004\uff5a\005\uff5a" +
    "\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\015\uff5a\017" +
    "\uff5a\020\uff5a\023\uff5a\024\uff5a\034\uff5a\035\uff5a\054\uff5a" +
    "\055\uff5a\056\uff5a\057\uff5a\001\002\000\050\003\uff5e\004" +
    "\uff5e\005\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e" +
    "\015\uff5e\017\uff5e\020\uff5e\023\uff5e\024\uff5e\034\uff5e\035" +
    "\uff5e\054\uff5e\055\uff5e\056\uff5e\057\uff5e\001\002\000\012" +
    "\007\077\013\103\034\102\035\100\001\002\000\020\004" +
    "\054\005\060\007\052\010\055\011\056\036\053\037\057" +
    "\001\002\000\046\003\uff7c\004\uff7c\005\uff7c\007\uff7c\010" +
    "\uff7c\011\uff7c\012\uff7c\013\uff7c\015\uff7c\017\uff7c\020\uff7c" +
    "\024\uff7c\034\uff7c\035\uff7c\054\uff7c\055\uff7c\056\uff7c\057" +
    "\uff7c\001\002\000\050\003\uff5c\004\uff5c\005\uff5c\007\uff5c" +
    "\010\uff5c\011\uff5c\012\uff5c\013\uff5c\015\uff5c\017\uff5c\020" +
    "\uff5c\023\uff5c\024\uff5c\034\uff5c\035\uff5c\054\uff5c\055\uff5c" +
    "\056\uff5c\057\uff5c\001\002\000\026\003\036\006\043\036" +
    "\042\037\044\061\033\062\040\064\041\065\034\066\045" +
    "\067\031\001\002\000\026\003\036\006\043\036\042\037" +
    "\044\061\033\062\040\064\041\065\034\066\045\067\031" +
    "\001\002\000\026\003\036\006\043\036\042\037\044\061" +
    "\033\062\040\064\041\065\034\066\045\067\031\001\002" +
    "\000\050\003\uff5d\004\uff5d\005\uff5d\007\uff5d\010\uff5d\011" +
    "\uff5d\012\uff5d\013\uff5d\015\uff5d\017\uff5d\020\uff5d\023\uff5d" +
    "\024\uff5d\034\uff5d\035\uff5d\054\uff5d\055\uff5d\056\uff5d\057" +
    "\uff5d\001\002\000\026\003\036\006\043\036\042\037\044" +
    "\061\033\062\040\064\041\065\034\066\045\067\031\001" +
    "\002\000\046\003\uff7b\004\uff7b\005\uff7b\007\uff7b\010\uff7b" +
    "\011\uff7b\012\uff7b\013\uff7b\015\uff7b\017\uff7b\020\uff7b\024" +
    "\uff7b\034\uff7b\035\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\001\002\000\070\003\uff7d\004\uff7d\005\uff7d\006\043\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\015\uff7d\017\uff7d" +
    "\020\uff7d\024\uff7d\034\uff7d\035\uff7d\036\042\037\044\054" +
    "\uff7d\055\uff7d\056\uff7d\057\uff7d\061\033\062\040\064\041" +
    "\065\034\066\045\067\031\001\002\000\070\003\uff81\004" +
    "\uff81\005\uff81\006\043\007\uff81\010\uff81\011\uff81\012\uff81" +
    "\013\uff81\015\uff81\017\uff81\020\uff81\024\uff81\034\uff81\035" +
    "\uff81\036\042\037\044\054\uff81\055\uff81\056\uff81\057\uff81" +
    "\061\033\062\040\064\041\065\034\066\045\067\031\001" +
    "\002\000\070\003\uff80\004\uff80\005\uff80\006\043\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\015\uff80\017\uff80\020" +
    "\uff80\024\uff80\034\uff80\035\uff80\036\042\037\044\054\uff80" +
    "\055\uff80\056\uff80\057\uff80\061\033\062\040\064\041\065" +
    "\034\066\045\067\031\001\002\000\070\003\uff7e\004\uff7e" +
    "\005\uff7e\006\043\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\015\uff7e\017\uff7e\020\uff7e\024\uff7e\034\uff7e\035\uff7e" +
    "\036\042\037\044\054\uff7e\055\uff7e\056\uff7e\057\uff7e\061" +
    "\033\062\040\064\041\065\034\066\045\067\031\001\002" +
    "\000\070\003\uff7f\004\uff7f\005\uff7f\006\043\007\uff7f\010" +
    "\uff7f\011\uff7f\012\uff7f\013\uff7f\015\uff7f\017\uff7f\020\uff7f" +
    "\024\uff7f\034\uff7f\035\uff7f\036\042\037\044\054\uff7f\055" +
    "\uff7f\056\uff7f\057\uff7f\061\033\062\040\064\041\065\034" +
    "\066\045\067\031\001\002\000\046\003\uff8a\004\uff8a\005" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\015\uff8a" +
    "\017\uff8a\020\uff8a\024\uff8a\034\uff8a\035\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\001\002\000\046\003\uff89\004\uff89" +
    "\005\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\015" +
    "\uff89\017\uff89\020\uff89\024\uff89\034\uff89\035\uff89\054\uff89" +
    "\055\uff89\056\uff89\057\uff89\001\002\000\046\003\uff8b\004" +
    "\uff8b\005\066\007\uff8b\010\uff8b\011\065\012\062\013\uff8b" +
    "\015\uff8b\017\uff8b\020\uff8b\024\uff8b\034\uff8b\035\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\001\002\000\046\003\uff8c" +
    "\004\uff8c\005\066\007\uff8c\010\uff8c\011\065\012\062\013" +
    "\uff8c\015\uff8c\017\uff8c\020\uff8c\024\uff8c\034\uff8c\035\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\001\002\000\046\003" +
    "\uff88\004\uff88\005\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\013\uff88\015\uff88\017\uff88\020\uff88\024\uff88\034\uff88\035" +
    "\uff88\054\uff88\055\uff88\056\uff88\057\uff88\001\002\000\046" +
    "\003\uff7a\004\uff7a\005\uff7a\007\uff7a\010\uff7a\011\uff7a\012" +
    "\uff7a\013\uff7a\015\uff7a\017\uff7a\020\uff7a\024\uff7a\034\uff7a" +
    "\035\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001\002\000" +
    "\046\003\uff78\004\uff78\005\066\007\uff78\010\uff78\011\065" +
    "\012\062\013\uff78\015\uff78\017\uff78\020\uff78\024\uff78\034" +
    "\uff78\035\uff78\054\uff78\055\uff78\056\uff78\057\uff78\001\002" +
    "\000\046\003\uff79\004\uff79\005\066\007\uff79\010\uff79\011" +
    "\065\012\062\013\uff79\015\uff79\017\uff79\020\uff79\024\uff79" +
    "\034\uff79\035\uff79\054\uff79\055\uff79\056\uff79\057\uff79\001" +
    "\002\000\046\003\uff87\004\uff87\005\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\015\uff87\017\uff87\020\uff87\024" +
    "\uff87\034\uff87\035\uff87\054\uff87\055\uff87\056\uff87\057\uff87" +
    "\001\002\000\026\003\uffa4\006\uffa4\036\uffa4\037\uffa4\061" +
    "\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\001\002" +
    "\000\026\003\036\006\043\036\042\037\044\061\033\062" +
    "\040\064\041\065\034\066\045\067\031\001\002\000\026" +
    "\003\uffa3\006\uffa3\036\uffa3\037\uffa3\061\uffa3\062\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\001\002\000\026\003\uffa2" +
    "\006\uffa2\036\uffa2\037\uffa2\061\uffa2\062\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\001\002\000\034\003\uffd0\007\uffd0" +
    "\013\uffd0\015\uffd0\017\105\020\111\024\uffd0\034\uffd0\035" +
    "\uffd0\054\110\055\106\056\107\057\112\001\002\000\026" +
    "\003\uffa8\006\uffa8\036\uffa8\037\uffa8\061\uffa8\062\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002\000\026\003\uffaa" +
    "\006\uffaa\036\uffaa\037\uffaa\061\uffaa\062\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\067\uffaa\001\002\000\026\003\uffa6\006\uffa6" +
    "\036\uffa6\037\uffa6\061\uffa6\062\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\001\002\000\026\003\uffa9\006\uffa9\036\uffa9" +
    "\037\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\001\002\000\026\003\uffa7\006\uffa7\036\uffa7\037\uffa7" +
    "\061\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\001" +
    "\002\000\026\003\uffa5\006\uffa5\036\uffa5\037\uffa5\061\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\001\002\000" +
    "\026\003\036\006\043\036\042\037\044\061\033\062\040" +
    "\064\041\065\034\066\045\067\031\001\002\000\046\003" +
    "\uffce\004\063\005\066\007\uffce\010\064\011\065\012\062" +
    "\013\uffce\015\uffce\017\uffce\020\uffce\024\uffce\034\uffce\035" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001\002\000\050" +
    "\003\uff5b\004\uff5b\005\uff5b\007\uff5b\010\uff5b\011\uff5b\012" +
    "\uff5b\013\uff5b\015\uff5b\017\uff5b\020\uff5b\023\uff5b\024\uff5b" +
    "\034\uff5b\035\uff5b\054\uff5b\055\uff5b\056\uff5b\057\uff5b\001" +
    "\002\000\050\003\uff5f\004\uff5f\005\uff5f\007\uff5f\010\uff5f" +
    "\011\uff5f\012\uff5f\013\uff5f\015\uff5f\017\uff5f\020\uff5f\023" +
    "\uff5f\024\uff5f\034\uff5f\035\uff5f\054\uff5f\055\uff5f\056\uff5f" +
    "\057\uff5f\001\002\000\050\003\uff61\004\uff61\005\uff61\007" +
    "\uff61\010\uff61\011\uff61\012\uff61\013\uff61\015\uff61\017\uff61" +
    "\020\uff61\023\uff61\024\uff61\034\uff61\035\uff61\054\uff61\055" +
    "\uff61\056\uff61\057\uff61\001\002\000\050\003\uff60\004\uff60" +
    "\005\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60\015" +
    "\uff60\017\uff60\020\uff60\023\uff60\024\uff60\034\uff60\035\uff60" +
    "\054\uff60\055\uff60\056\uff60\057\uff60\001\002\000\032\003" +
    "\036\006\043\007\123\015\124\036\042\037\044\061\033" +
    "\062\040\064\041\065\034\066\045\067\031\001\002\000" +
    "\010\003\131\007\130\015\127\001\002\000\046\003\uff84" +
    "\004\uff84\005\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013" +
    "\uff84\015\uff84\017\uff84\020\uff84\024\uff84\034\uff84\035\uff84" +
    "\054\uff84\055\uff84\056\uff84\057\uff84\001\002\000\026\003" +
    "\036\006\043\036\042\037\044\061\033\062\040\064\041" +
    "\065\034\066\045\067\031\001\002\000\016\003\uff91\007" +
    "\uff91\013\103\015\uff91\034\102\035\100\001\002\000\016" +
    "\003\uff8d\007\uff8d\013\103\015\uff8d\034\102\035\100\001" +
    "\002\000\026\003\134\006\043\036\042\037\044\061\033" +
    "\062\040\064\041\065\034\066\045\067\031\001\002\000" +
    "\046\003\uff85\004\uff85\005\uff85\007\uff85\010\uff85\011\uff85" +
    "\012\uff85\013\uff85\015\uff85\017\uff85\020\uff85\024\uff85\034" +
    "\uff85\035\uff85\054\uff85\055\uff85\056\uff85\057\uff85\001\002" +
    "\000\026\003\036\006\043\036\042\037\044\061\033\062" +
    "\040\064\041\065\034\066\045\067\031\001\002\000\016" +
    "\003\uff8f\007\uff8f\013\103\015\uff8f\034\102\035\100\001" +
    "\002\000\016\003\uff90\007\uff90\013\103\015\uff90\034\102" +
    "\035\100\001\002\000\024\003\uff8e\004\054\005\060\007" +
    "\uff8e\010\055\011\056\015\uff8e\036\053\037\057\001\002" +
    "\000\026\003\036\006\043\036\042\037\044\061\033\062" +
    "\040\064\041\065\034\066\045\067\031\001\002\000\014" +
    "\013\103\015\uffd5\024\uffd5\034\102\035\100\001\002\000" +
    "\004\062\uffab\001\002\000\012\006\143\015\uffd4\021\135" +
    "\024\uffd4\001\002\000\006\015\023\024\142\001\002\000" +
    "\106\002\uffd8\003\uffd8\006\uffd8\021\uffd8\024\uffd8\030\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\061" +
    "\uffd8\062\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\072\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\100\uffd8\106\uffd8\110\uffd8\111" +
    "\uffd8\112\uffd8\114\uffd8\115\uffd8\122\uffd8\126\uffd8\130\uffd8" +
    "\131\uffd8\132\uffd8\001\002\000\014\007\145\074\015\111" +
    "\005\112\006\115\016\001\002\000\004\062\u012a\001\002" +
    "\000\004\027\u0124\001\002\000\006\007\150\015\147\001" +
    "\002\000\012\074\015\111\005\112\006\115\016\001\002" +
    "\000\004\027\151\001\002\000\102\003\uffed\006\uffed\021" +
    "\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\074\015\075\017\076\uffed\100\uffed\106\uffed" +
    "\110\uffed\111\005\112\006\114\uffed\115\016\122\uffed\126" +
    "\155\130\uffed\131\uffed\132\uffed\001\002\000\102\003\uffed" +
    "\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\072\uffed\074\015\075\017\076\uffed\100" +
    "\uffed\106\uffed\110\uffed\111\005\112\006\114\uffed\115\016" +
    "\122\uffed\126\155\130\uffed\131\uffed\132\uffed\001\002\000" +
    "\066\003\176\006\043\021\171\030\202\036\042\037\044" +
    "\040\161\041\212\042\204\043\201\061\033\062\214\064" +
    "\041\065\034\066\045\067\031\072\177\076\164\100\213" +
    "\106\165\110\172\114\173\122\203\130\206\131\205\132" +
    "\166\001\002\000\004\062\021\001\002\000\004\062\021" +
    "\001\002\000\006\015\023\024\157\001\002\000\106\002" +
    "\uffda\003\uffda\006\uffda\021\uffda\024\uffda\030\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\061\uffda\062" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\072\uffda\074\uffda" +
    "\075\uffda\076\uffda\100\uffda\106\uffda\110\uffda\111\uffda\112" +
    "\uffda\114\uffda\115\uffda\122\uffda\126\uffda\130\uffda\131\uffda" +
    "\132\uffda\001\002\000\072\003\uffec\006\uffec\021\uffec\030" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\072" +
    "\uffec\073\uffec\076\uffec\077\uffec\100\uffec\106\uffec\110\uffec" +
    "\114\uffec\122\uffec\130\uffec\131\uffec\132\uffec\001\002\000" +
    "\026\003\036\006\043\036\042\037\044\061\033\062\040" +
    "\064\041\065\034\066\045\067\031\001\002\000\072\003" +
    "\uffe6\006\uffe6\021\uffe6\030\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\061\uffe6\062\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\076\uffe6\077\uffe6" +
    "\100\uffe6\106\uffe6\110\uffe6\114\uffe6\122\uffe6\130\uffe6\131" +
    "\uffe6\132\uffe6\001\002\000\072\003\uffee\006\uffee\021\uffee" +
    "\030\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
    "\072\uffee\073\uffee\076\uffee\077\uffee\100\uffee\106\uffee\110" +
    "\uffee\114\uffee\122\uffee\130\uffee\131\uffee\132\uffee\001\002" +
    "\000\074\003\uffdd\006\uffdd\021\uffdd\024\u011d\030\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\061\uffdd" +
    "\062\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\073" +
    "\uffdd\076\uffdd\077\uffdd\100\uffdd\106\uffdd\110\uffdd\114\uffdd" +
    "\122\uffdd\130\uffdd\131\uffdd\132\uffdd\001\002\000\004\006" +
    "\u010c\001\002\000\004\006\u0101\001\002\000\072\003\uffeb" +
    "\006\uffeb\021\uffeb\030\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\072\uffeb\073\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\106\uffeb\110\uffeb\114\uffeb\122\uffeb\130\uffeb\131\uffeb" +
    "\132\uffeb\001\002\000\072\003\uffe9\006\uffe9\021\uffe9\030" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\061\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072" +
    "\uffe9\073\uffe9\076\uffe9\077\uffe9\100\uffe9\106\uffe9\110\uffe9" +
    "\114\uffe9\122\uffe9\130\uffe9\131\uffe9\132\uffe9\001\002\000" +
    "\026\003\036\006\043\036\042\037\044\061\033\062\040" +
    "\064\041\065\034\066\045\067\031\001\002\000\004\006" +
    "\361\001\002\000\020\024\354\061\033\062\356\064\041" +
    "\065\034\066\045\067\031\001\002\000\072\003\uffe7\006" +
    "\uffe7\021\uffe7\030\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\072\uffe7\073\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\106\uffe7\110\uffe7\114\uffe7\122\uffe7\130\uffe7\131\uffe7\132" +
    "\uffe7\001\002\000\020\003\uffd1\007\uffd1\013\103\015\uffd1" +
    "\024\uffd1\034\102\035\100\001\002\000\102\003\uffe4\004" +
    "\054\005\060\006\uffe4\010\055\011\056\021\uffe4\030\uffe4" +
    "\036\053\037\057\040\uffe4\041\uffe4\042\uffe4\043\uffe4\061" +
    "\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\072\uffe4" +
    "\073\uffe4\076\uffe4\077\uffe4\100\uffe4\106\uffe4\110\uffe4\114" +
    "\uffe4\122\uffe4\130\uffe4\131\uffe4\132\uffe4\001\002\000\074" +
    "\003\uffde\006\uffde\021\uffde\024\353\030\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\061\uffde\062\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\072\uffde\073\uffde\076" +
    "\uffde\077\uffde\100\uffde\106\uffde\110\uffde\114\uffde\122\uffde" +
    "\130\uffde\131\uffde\132\uffde\001\002\000\012\003\uffd2\007" +
    "\uffd2\015\uffd2\024\uffd2\001\002\000\026\003\036\006\043" +
    "\036\042\037\044\061\033\062\040\064\041\065\034\066" +
    "\045\067\031\001\002\000\016\002\ufff1\074\ufff1\111\ufff1" +
    "\112\ufff1\115\ufff1\126\ufff1\001\002\000\004\006\264\001" +
    "\002\000\026\003\036\006\043\036\042\037\044\061\033" +
    "\062\040\064\041\065\034\066\045\067\031\001\002\000" +
    "\004\006\255\001\002\000\004\006\247\001\002\000\072" +
    "\003\uffea\006\uffea\021\uffea\030\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\061\uffea\062\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\072\uffea\073\uffea\076\uffea\077" +
    "\uffea\100\uffea\106\uffea\110\uffea\114\uffea\122\uffea\130\uffea" +
    "\131\uffea\132\uffea\001\002\000\004\024\246\001\002\000" +
    "\072\003\uffe8\006\uffe8\021\uffe8\030\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\106\uffe8\110\uffe8\114\uffe8\122\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\001\002\000\026\003\036\006\043" +
    "\036\042\037\044\061\033\062\040\064\041\065\034\066" +
    "\045\067\031\001\002\000\004\027\235\001\002\000\066" +
    "\003\uff86\004\uff86\005\uff86\006\121\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\015\uff86\017\uff86\020\uff86\021\221" +
    "\024\uff86\034\uff86\035\uff86\036\117\037\120\040\217\041" +
    "\216\042\220\043\215\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\001\002\000\026\003\234\006\043\036\042\037\044\061" +
    "\033\062\040\064\041\065\034\066\045\067\031\001\002" +
    "\000\026\003\232\006\043\036\042\037\044\061\033\062" +
    "\040\064\041\065\034\066\045\067\031\001\002\000\026" +
    "\003\230\006\043\036\042\037\044\061\033\062\040\064" +
    "\041\065\034\066\045\067\031\001\002\000\026\003\226" +
    "\006\043\036\042\037\044\061\033\062\040\064\041\065" +
    "\034\066\045\067\031\001\002\000\040\003\223\006\043" +
    "\021\171\036\042\037\044\040\161\041\212\042\204\043" +
    "\201\061\033\062\214\064\041\065\034\066\045\067\031" +
    "\001\002\000\012\003\uff54\007\uff54\015\uff54\024\uff54\001" +
    "\002\000\026\003\uff4f\004\054\005\060\007\uff4f\010\055" +
    "\011\056\015\uff4f\024\uff4f\036\053\037\057\001\002\000" +
    "\020\003\uff55\007\uff55\013\103\015\uff55\024\uff55\034\102" +
    "\035\100\001\002\000\020\003\uff57\007\uff57\013\103\015" +
    "\uff57\024\uff57\034\102\035\100\001\002\000\026\003\uff51" +
    "\004\054\005\060\007\uff51\010\055\011\056\015\uff51\024" +
    "\uff51\036\053\037\057\001\002\000\020\003\uff59\007\uff59" +
    "\013\103\015\uff59\024\uff59\034\102\035\100\001\002\000" +
    "\026\003\uff53\004\054\005\060\007\uff53\010\055\011\056" +
    "\015\uff53\024\uff53\036\053\037\057\001\002\000\020\003" +
    "\uff58\007\uff58\013\103\015\uff58\024\uff58\034\102\035\100" +
    "\001\002\000\026\003\uff52\004\054\005\060\007\uff52\010" +
    "\055\011\056\015\uff52\024\uff52\036\053\037\057\001\002" +
    "\000\020\003\uff56\007\uff56\013\103\015\uff56\024\uff56\034" +
    "\102\035\100\001\002\000\026\003\uff50\004\054\005\060" +
    "\007\uff50\010\055\011\056\015\uff50\024\uff50\036\053\037" +
    "\057\001\002\000\066\003\uffed\006\uffed\021\uffed\030\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061" +
    "\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed" +
    "\076\uffed\100\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130" +
    "\uffed\131\uffed\132\uffed\001\002\000\066\003\176\006\043" +
    "\021\171\030\237\036\042\037\044\040\161\041\212\042" +
    "\204\043\201\061\033\062\214\064\041\065\034\066\045" +
    "\067\031\072\177\076\164\100\213\106\165\110\172\114" +
    "\173\122\203\130\206\131\205\132\166\001\002\000\004" +
    "\130\240\001\002\000\004\006\241\001\002\000\040\003" +
    "\036\006\043\021\171\036\042\037\044\040\161\041\212" +
    "\042\204\043\201\061\033\062\214\064\041\065\034\066" +
    "\045\067\031\001\002\000\004\007\243\001\002\000\004" +
    "\024\244\001\002\000\072\003\uffc7\006\uffc7\021\uffc7\030" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\072" +
    "\uffc7\073\uffc7\076\uffc7\077\uffc7\100\uffc7\106\uffc7\110\uffc7" +
    "\114\uffc7\122\uffc7\130\uffc7\131\uffc7\132\uffc7\001\002\000" +
    "\020\003\uff4d\007\uff4d\013\103\015\uff4d\024\uff4d\034\102" +
    "\035\100\001\002\000\072\003\uffe5\006\uffe5\021\uffe5\030" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\061\uffe5\062\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\072" +
    "\uffe5\073\uffe5\076\uffe5\077\uffe5\100\uffe5\106\uffe5\110\uffe5" +
    "\114\uffe5\122\uffe5\130\uffe5\131\uffe5\132\uffe5\001\002\000" +
    "\040\003\036\006\043\021\171\036\042\037\044\040\161" +
    "\041\212\042\204\043\201\061\033\062\214\064\041\065" +
    "\034\066\045\067\031\001\002\000\004\007\251\001\002" +
    "\000\004\027\252\001\002\000\066\003\uffed\006\uffed\021" +
    "\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110\uffed\114\uffed" +
    "\122\uffed\130\uffed\131\uffed\132\uffed\001\002\000\066\003" +
    "\176\006\043\021\171\030\254\036\042\037\044\040\161" +
    "\041\212\042\204\043\201\061\033\062\214\064\041\065" +
    "\034\066\045\067\031\072\177\076\164\100\213\106\165" +
    "\110\172\114\173\122\203\130\206\131\205\132\166\001" +
    "\002\000\072\003\uffc8\006\uffc8\021\uffc8\030\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\061\uffc8\062" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\072\uffc8\073\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\106\uffc8\110\uffc8\114\uffc8\122" +
    "\uffc8\130\uffc8\131\uffc8\132\uffc8\001\002\000\006\007\256" +
    "\062\257\001\002\000\004\024\262\001\002\000\004\007" +
    "\260\001\002\000\004\024\261\001\002\000\072\003\uffba" +
    "\006\uffba\021\uffba\030\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\061\uffba\062\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\072\uffba\073\uffba\076\uffba\077\uffba\100" +
    "\uffba\106\uffba\110\uffba\114\uffba\122\uffba\130\uffba\131\uffba" +
    "\132\uffba\001\002\000\072\003\uffb9\006\uffb9\021\uffb9\030" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072" +
    "\uffb9\073\uffb9\076\uffb9\077\uffb9\100\uffb9\106\uffb9\110\uffb9" +
    "\114\uffb9\122\uffb9\130\uffb9\131\uffb9\132\uffb9\001\002\000" +
    "\020\003\uff4c\007\uff4c\013\103\015\uff4c\024\uff4c\034\102" +
    "\035\100\001\002\000\026\003\267\006\272\036\042\037" +
    "\044\061\033\062\271\064\041\065\034\066\045\067\031" +
    "\001\002\000\020\004\uff6e\005\uff6e\007\uff6e\010\uff6e\011" +
    "\uff6e\012\uff6e\023\uff6e\001\002\000\016\004\305\005\310" +
    "\007\334\010\306\011\307\012\304\001\002\000\020\004" +
    "\277\005\302\010\300\011\301\012\275\036\053\037\057" +
    "\001\002\000\020\004\uff6d\005\uff6d\007\uff6d\010\uff6d\011" +
    "\uff6d\012\uff6d\023\uff6d\001\002\000\026\004\uff71\005\uff71" +
    "\006\330\007\uff71\010\uff71\011\uff71\012\uff71\023\uff71\036" +
    "\117\037\120\001\002\000\026\003\274\006\272\036\042" +
    "\037\044\061\033\062\271\064\041\065\034\066\045\067" +
    "\031\001\002\000\016\004\305\005\310\007\327\010\306" +
    "\011\307\012\304\001\002\000\022\004\277\005\302\007" +
    "\276\010\300\011\301\012\275\036\053\037\057\001\002" +
    "\000\026\003\267\006\272\036\042\037\044\061\033\062" +
    "\271\064\041\065\034\066\045\067\031\001\002\000\020" +
    "\004\uff62\005\uff62\007\uff62\010\uff62\011\uff62\012\uff62\023" +
    "\uff62\001\002\000\026\003\267\006\272\036\042\037\044" +
    "\061\033\062\271\064\041\065\034\066\045\067\031\001" +
    "\002\000\026\003\267\006\272\036\042\037\044\061\033" +
    "\062\271\064\041\065\034\066\045\067\031\001\002\000" +
    "\026\003\267\006\272\036\042\037\044\061\033\062\271" +
    "\064\041\065\034\066\045\067\031\001\002\000\026\003" +
    "\267\006\272\036\042\037\044\061\033\062\271\064\041" +
    "\065\034\066\045\067\031\001\002\000\020\004\uff65\005" +
    "\uff65\007\uff65\010\uff65\011\uff65\012\uff65\023\uff65\001\002" +
    "\000\026\003\322\006\272\036\042\037\044\061\033\062" +
    "\271\064\041\065\034\066\045\067\031\001\002\000\026" +
    "\003\320\006\272\036\042\037\044\061\033\062\271\064" +
    "\041\065\034\066\045\067\031\001\002\000\026\003\316" +
    "\006\272\036\042\037\044\061\033\062\271\064\041\065" +
    "\034\066\045\067\031\001\002\000\026\003\314\006\272" +
    "\036\042\037\044\061\033\062\271\064\041\065\034\066" +
    "\045\067\031\001\002\000\026\003\312\006\272\036\042" +
    "\037\044\061\033\062\271\064\041\065\034\066\045\067" +
    "\031\001\002\000\020\004\uff75\005\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\023\uff75\001\002\000\024\004\277\005" +
    "\302\007\uff6a\010\300\011\301\012\275\023\uff6a\036\053" +
    "\037\057\001\002\000\020\004\uff74\005\uff74\007\uff74\010" +
    "\uff74\011\uff74\012\uff74\023\uff74\001\002\000\024\004\277" +
    "\005\302\007\uff69\010\300\011\301\012\275\023\uff69\036" +
    "\053\037\057\001\002\000\020\004\uff76\005\310\007\uff76" +
    "\010\uff76\011\307\012\304\023\uff76\001\002\000\024\004" +
    "\277\005\302\007\uff6b\010\300\011\301\012\275\023\uff6b" +
    "\036\053\037\057\001\002\000\020\004\uff77\005\310\007" +
    "\uff77\010\uff77\011\307\012\304\023\uff77\001\002\000\024" +
    "\004\277\005\302\007\uff6c\010\300\011\301\012\275\023" +
    "\uff6c\036\053\037\057\001\002\000\020\004\uff73\005\uff73" +
    "\007\uff73\010\uff73\011\uff73\012\uff73\023\uff73\001\002\000" +
    "\024\004\277\005\302\007\uff68\010\300\011\301\012\275" +
    "\023\uff68\036\053\037\057\001\002\000\020\004\uff64\005" +
    "\uff64\007\uff64\010\uff64\011\uff64\012\uff64\023\uff64\001\002" +
    "\000\020\004\uff66\005\310\007\uff66\010\uff66\011\307\012" +
    "\304\023\uff66\001\002\000\020\004\uff67\005\310\007\uff67" +
    "\010\uff67\011\307\012\304\023\uff67\001\002\000\020\004" +
    "\uff63\005\uff63\007\uff63\010\uff63\011\uff63\012\uff63\023\uff63" +
    "\001\002\000\020\004\uff72\005\uff72\007\uff72\010\uff72\011" +
    "\uff72\012\uff72\023\uff72\001\002\000\032\003\036\006\043" +
    "\007\332\015\124\036\042\037\044\061\033\062\040\064" +
    "\041\065\034\066\045\067\031\001\002\000\010\003\131" +
    "\007\333\015\127\001\002\000\020\004\uff6f\005\uff6f\007" +
    "\uff6f\010\uff6f\011\uff6f\012\uff6f\023\uff6f\001\002\000\020" +
    "\004\uff70\005\uff70\007\uff70\010\uff70\011\uff70\012\uff70\023" +
    "\uff70\001\002\000\004\027\335\001\002\000\010\030\uffbd" +
    "\073\uffbd\077\uffbd\001\002\000\010\030\343\073\342\077" +
    "\337\001\002\000\004\023\350\001\002\000\004\030\347" +
    "\001\002\000\010\030\uffbe\073\uffbe\077\uffbe\001\002\000" +
    "\026\003\267\006\272\036\042\037\044\061\033\062\271" +
    "\064\041\065\034\066\045\067\031\001\002\000\072\003" +
    "\uffbf\006\uffbf\021\uffbf\030\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\061\uffbf\062\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\072\uffbf\073\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\106\uffbf\110\uffbf\114\uffbf\122\uffbf\130\uffbf\131" +
    "\uffbf\132\uffbf\001\002\000\016\004\305\005\310\010\306" +
    "\011\307\012\304\023\345\001\002\000\072\003\uffed\006" +
    "\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\072\uffed\073\uffed\076\uffed\077\uffed\100\uffed" +
    "\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132" +
    "\uffed\001\002\000\072\003\176\006\043\021\171\030\uffbc" +
    "\036\042\037\044\040\161\041\212\042\204\043\201\061" +
    "\033\062\214\064\041\065\034\066\045\067\031\072\177" +
    "\073\uffbc\076\164\077\uffbc\100\213\106\165\110\172\114" +
    "\173\122\203\130\206\131\205\132\166\001\002\000\072" +
    "\003\uffc0\006\uffc0\021\uffc0\030\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\061\uffc0\062\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\072\uffc0\073\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\106\uffc0\110\uffc0\114\uffc0\122\uffc0\130\uffc0" +
    "\131\uffc0\132\uffc0\001\002\000\066\003\uffed\006\uffed\021" +
    "\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110\uffed\114\uffed" +
    "\122\uffed\130\uffed\131\uffed\132\uffed\001\002\000\066\003" +
    "\176\006\043\021\171\030\uffbb\036\042\037\044\040\161" +
    "\041\212\042\204\043\201\061\033\062\214\064\041\065" +
    "\034\066\045\067\031\072\177\076\164\100\213\106\165" +
    "\110\172\114\173\122\203\130\206\131\205\132\166\001" +
    "\002\000\020\003\uff4b\007\uff4b\013\103\015\uff4b\024\uff4b" +
    "\034\102\035\100\001\002\000\072\003\uffe3\006\uffe3\021" +
    "\uffe3\030\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\072\uffe3\073\uffe3\076\uffe3\077\uffe3\100\uffe3\106\uffe3" +
    "\110\uffe3\114\uffe3\122\uffe3\130\uffe3\131\uffe3\132\uffe3\001" +
    "\002\000\072\003\uffdf\006\uffdf\021\uffdf\030\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\061\uffdf\062" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\072\uffdf\073\uffdf" +
    "\076\uffdf\077\uffdf\100\uffdf\106\uffdf\110\uffdf\114\uffdf\122" +
    "\uffdf\130\uffdf\131\uffdf\132\uffdf\001\002\000\074\003\uffdc" +
    "\006\uffdc\021\uffdc\024\360\030\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\061\uffdc\062\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\072\uffdc\073\uffdc\076\uffdc\077" +
    "\uffdc\100\uffdc\106\uffdc\110\uffdc\114\uffdc\122\uffdc\130\uffdc" +
    "\131\uffdc\132\uffdc\001\002\000\074\003\uffdb\006\uffdb\021" +
    "\uffdb\024\357\030\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\072\uffdb\073\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\106\uffdb\110\uffdb\114\uffdb\122\uffdb\130\uffdb\131\uffdb\132" +
    "\uffdb\001\002\000\072\003\uffe0\006\uffe0\021\uffe0\030\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\073\uffe0\076\uffe0\077\uffe0\100\uffe0\106\uffe0\110\uffe0\114" +
    "\uffe0\122\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\072" +
    "\003\uffe1\006\uffe1\021\uffe1\030\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\061\uffe1\062\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\072\uffe1\073\uffe1\076\uffe1\077" +
    "\uffe1\100\uffe1\106\uffe1\110\uffe1\114\uffe1\122\uffe1\130\uffe1" +
    "\131\uffe1\132\uffe1\001\002\000\040\003\036\006\043\021" +
    "\171\036\042\037\044\040\161\041\212\042\204\043\201" +
    "\061\033\062\214\064\041\065\034\066\045\067\031\001" +
    "\002\000\004\007\363\001\002\000\004\027\364\001\002" +
    "\000\066\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100" +
    "\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed" +
    "\132\uffed\001\002\000\066\003\176\006\043\021\171\030" +
    "\366\036\042\037\044\040\161\041\212\042\204\043\201" +
    "\061\033\062\214\064\041\065\034\066\045\067\031\072" +
    "\177\076\164\100\213\106\165\110\172\114\173\122\203" +
    "\130\206\131\205\132\166\001\002\000\074\003\uffc9\006" +
    "\uffc9\021\uffc9\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\072\uffc9\073\uffc9\076\uffc9\077\uffc9\100\uffc9" +
    "\102\367\106\uffc9\110\uffc9\114\uffc9\122\uffc9\130\uffc9\131" +
    "\uffc9\132\uffc9\001\002\000\010\003\371\027\373\110\172" +
    "\001\002\000\072\003\uffd3\006\uffd3\021\uffd3\030\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\061\uffd3" +
    "\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\072\uffd3\073" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\106\uffd3\110\uffd3\114\uffd3" +
    "\122\uffd3\130\uffd3\131\uffd3\132\uffd3\001\002\000\066\003" +
    "\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100\uffed\106\uffed" +
    "\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132\uffed\001" +
    "\002\000\072\003\uffcc\006\uffcc\021\uffcc\030\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\061\uffcc\062" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\072\uffcc\073\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\106\uffcc\110\uffcc\114\uffcc\122" +
    "\uffcc\130\uffcc\131\uffcc\132\uffcc\001\002\000\066\003\uffed" +
    "\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\072\uffed\076\uffed\100\uffed\106\uffed\110" +
    "\uffed\114\uffed\122\uffed\130\uffed\131\uffed\132\uffed\001\002" +
    "\000\066\003\176\006\043\021\171\030\375\036\042\037" +
    "\044\040\161\041\212\042\204\043\201\061\033\062\214" +
    "\064\041\065\034\066\045\067\031\072\177\076\164\100" +
    "\213\106\165\110\172\114\173\122\203\130\206\131\205" +
    "\132\166\001\002\000\072\003\uffcb\006\uffcb\021\uffcb\030" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\061\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\072" +
    "\uffcb\073\uffcb\076\uffcb\077\uffcb\100\uffcb\106\uffcb\110\uffcb" +
    "\114\uffcb\122\uffcb\130\uffcb\131\uffcb\132\uffcb\001\002\000" +
    "\066\003\176\006\043\021\171\030\377\036\042\037\044" +
    "\040\161\041\212\042\204\043\201\061\033\062\214\064" +
    "\041\065\034\066\045\067\031\072\177\076\164\100\213" +
    "\106\165\110\172\114\173\122\203\130\206\131\205\132" +
    "\166\001\002\000\072\003\uffca\006\uffca\021\uffca\030\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\061" +
    "\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca\072\uffca" +
    "\073\uffca\076\uffca\077\uffca\100\uffca\106\uffca\110\uffca\114" +
    "\uffca\122\uffca\130\uffca\131\uffca\132\uffca\001\002\000\020" +
    "\003\uff4a\007\uff4a\013\103\015\uff4a\024\uff4a\034\102\035" +
    "\100\001\002\000\042\003\036\006\043\015\u0103\021\171" +
    "\036\042\037\044\040\161\041\212\042\204\043\201\061" +
    "\033\062\214\064\041\065\034\066\045\067\031\001\002" +
    "\000\010\003\u0108\007\u0107\015\u0106\001\002\000\040\003" +
    "\036\006\043\021\171\036\042\037\044\040\161\041\212" +
    "\042\204\043\201\061\033\062\214\064\041\065\034\066" +
    "\045\067\031\001\002\000\010\003\uffb7\007\uffb7\015\uffb7" +
    "\001\002\000\010\003\uffb4\007\uffb4\015\uffb4\001\002\000" +
    "\040\003\u010a\006\043\021\171\036\042\037\044\040\161" +
    "\041\212\042\204\043\201\061\033\062\214\064\041\065" +
    "\034\066\045\067\031\001\002\000\004\024\u0109\001\002" +
    "\000\010\003\uffb3\007\uffb3\015\uffb3\001\002\000\072\003" +
    "\uffb8\006\uffb8\021\uffb8\030\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\061\uffb8\062\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\072\uffb8\073\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\106\uffb8\110\uffb8\114\uffb8\122\uffb8\130\uffb8\131" +
    "\uffb8\132\uffb8\001\002\000\024\003\uffb5\004\054\005\060" +
    "\007\uffb5\010\055\011\056\015\uffb5\036\053\037\057\001" +
    "\002\000\010\003\uffb6\007\uffb6\015\uffb6\001\002\000\056" +
    "\003\u010f\006\043\021\171\024\uffc3\036\042\037\044\040" +
    "\161\041\212\042\204\043\201\061\033\062\214\064\041" +
    "\065\034\066\045\067\031\074\015\075\017\111\005\112" +
    "\006\115\016\126\155\001\002\000\004\007\u0119\001\002" +
    "\000\042\003\u010f\006\043\021\171\024\uffc3\036\042\037" +
    "\044\040\161\041\212\042\204\043\201\061\033\062\214" +
    "\064\041\065\034\066\045\067\031\001\002\000\022\004" +
    "\054\005\060\007\uffc1\010\055\011\056\024\uffc1\036\053" +
    "\037\057\001\002\000\004\024\u0112\001\002\000\006\007" +
    "\uffc2\024\uffc2\001\002\000\042\003\u010f\006\043\021\171" +
    "\024\uffc3\036\042\037\044\040\161\041\212\042\204\043" +
    "\201\061\033\062\214\064\041\065\034\066\045\067\031" +
    "\001\002\000\004\024\u0114\001\002\000\042\003\u010f\006" +
    "\043\007\uffc3\021\171\036\042\037\044\040\161\041\212" +
    "\042\204\043\201\061\033\062\214\064\041\065\034\066" +
    "\045\067\031\001\002\000\004\007\uffc4\001\002\000\004" +
    "\024\u0117\001\002\000\042\003\u010f\006\043\007\uffc3\021" +
    "\171\036\042\037\044\040\161\041\212\042\204\043\201" +
    "\061\033\062\214\064\041\065\034\066\045\067\031\001" +
    "\002\000\004\007\uffc5\001\002\000\004\027\u011a\001\002" +
    "\000\066\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\076\uffed\100" +
    "\uffed\106\uffed\110\uffed\114\uffed\122\uffed\130\uffed\131\uffed" +
    "\132\uffed\001\002\000\066\003\176\006\043\021\171\030" +
    "\u011c\036\042\037\044\040\161\041\212\042\204\043\201" +
    "\061\033\062\214\064\041\065\034\066\045\067\031\072" +
    "\177\076\164\100\213\106\165\110\172\114\173\122\203" +
    "\130\206\131\205\132\166\001\002\000\072\003\uffc6\006" +
    "\uffc6\021\uffc6\030\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\072\uffc6\073\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\106\uffc6\110\uffc6\114\uffc6\122\uffc6\130\uffc6\131\uffc6\132" +
    "\uffc6\001\002\000\072\003\uffe2\006\uffe2\021\uffe2\030\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\061" +
    "\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\072\uffe2" +
    "\073\uffe2\076\uffe2\077\uffe2\100\uffe2\106\uffe2\110\uffe2\114" +
    "\uffe2\122\uffe2\130\uffe2\131\uffe2\132\uffe2\001\002\000\020" +
    "\003\uff4e\007\uff4e\013\103\015\uff4e\024\uff4e\034\102\035" +
    "\100\001\002\000\066\003\176\006\043\021\171\030\u0121" +
    "\036\042\037\044\040\161\041\212\042\204\043\201\061" +
    "\033\062\214\064\041\065\034\066\045\067\031\072\177" +
    "\076\164\100\213\106\165\110\172\114\173\122\203\130" +
    "\206\131\205\132\166\001\002\000\104\002\ufffb\003\ufffb" +
    "\006\ufffb\021\ufffb\030\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\072\ufffb\074\ufffb\075\ufffb\076\ufffb\100" +
    "\ufffb\106\ufffb\110\ufffb\111\ufffb\112\ufffb\114\ufffb\115\ufffb" +
    "\122\ufffb\126\ufffb\130\ufffb\131\ufffb\132\ufffb\001\002\000" +
    "\016\002\ufff5\074\ufff5\111\ufff5\112\ufff5\115\ufff5\126\ufff5" +
    "\001\002\000\004\062\u0123\001\002\000\006\007\uffef\015" +
    "\uffef\001\002\000\102\003\uffed\006\uffed\021\uffed\030\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061" +
    "\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed" +
    "\074\015\075\017\076\uffed\100\uffed\106\uffed\110\uffed\111" +
    "\005\112\006\114\uffed\115\016\122\uffed\126\155\130\uffed" +
    "\131\uffed\132\uffed\001\002\000\102\003\uffed\006\uffed\021" +
    "\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\074\015\075\017\076\uffed\100\uffed\106\uffed" +
    "\110\uffed\111\005\112\006\114\uffed\115\016\122\uffed\126" +
    "\155\130\uffed\131\uffed\132\uffed\001\002\000\066\003\176" +
    "\006\043\021\171\030\u0127\036\042\037\044\040\161\041" +
    "\212\042\204\043\201\061\033\062\214\064\041\065\034" +
    "\066\045\067\031\072\177\076\164\100\213\106\165\110" +
    "\172\114\173\122\203\130\206\131\205\132\166\001\002" +
    "\000\016\002\ufff2\074\ufff2\111\ufff2\112\ufff2\115\ufff2\126" +
    "\ufff2\001\002\000\066\003\176\006\043\021\171\030\u0129" +
    "\036\042\037\044\040\161\041\212\042\204\043\201\061" +
    "\033\062\214\064\041\065\034\066\045\067\031\072\177" +
    "\076\164\100\213\106\165\110\172\114\173\122\203\130" +
    "\206\131\205\132\166\001\002\000\016\002\ufff6\074\ufff6" +
    "\111\ufff6\112\ufff6\115\ufff6\126\ufff6\001\002\000\006\007" +
    "\ufff0\015\ufff0\001\002\000\004\002\001\001\002\000\012" +
    "\006\u012d\015\uffd4\021\135\024\uffd4\001\002\000\014\007" +
    "\u012e\074\015\111\005\112\006\115\016\001\002\000\004" +
    "\027\u0137\001\002\000\006\007\u0130\015\147\001\002\000" +
    "\004\027\u0131\001\002\000\102\003\uffed\006\uffed\021\uffed" +
    "\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\072\uffed\074\015\075\017\076\uffed\100\uffed\106\uffed\110" +
    "\uffed\111\005\112\006\114\uffed\115\016\122\uffed\126\155" +
    "\130\uffed\131\uffed\132\uffed\001\002\000\102\003\uffed\006" +
    "\uffed\021\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\072\uffed\074\015\075\017\076\uffed\100\uffed" +
    "\106\uffed\110\uffed\111\005\112\006\114\uffed\115\016\122" +
    "\uffed\126\155\130\uffed\131\uffed\132\uffed\001\002\000\066" +
    "\003\176\006\043\021\171\030\u0134\036\042\037\044\040" +
    "\161\041\212\042\204\043\201\061\033\062\214\064\041" +
    "\065\034\066\045\067\031\072\177\076\164\100\213\106" +
    "\165\110\172\114\173\122\203\130\206\131\205\132\166" +
    "\001\002\000\016\002\ufff4\074\ufff4\111\ufff4\112\ufff4\115" +
    "\ufff4\126\ufff4\001\002\000\066\003\176\006\043\021\171" +
    "\030\u0136\036\042\037\044\040\161\041\212\042\204\043" +
    "\201\061\033\062\214\064\041\065\034\066\045\067\031" +
    "\072\177\076\164\100\213\106\165\110\172\114\173\122" +
    "\203\130\206\131\205\132\166\001\002\000\016\002\ufff8" +
    "\074\ufff8\111\ufff8\112\ufff8\115\ufff8\126\ufff8\001\002\000" +
    "\102\003\uffed\006\uffed\021\uffed\030\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\072\uffed\074\015\075\017" +
    "\076\uffed\100\uffed\106\uffed\110\uffed\111\005\112\006\114" +
    "\uffed\115\016\122\uffed\126\155\130\uffed\131\uffed\132\uffed" +
    "\001\002\000\102\003\uffed\006\uffed\021\uffed\030\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\061\uffed" +
    "\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed\074" +
    "\015\075\017\076\uffed\100\uffed\106\uffed\110\uffed\111\005" +
    "\112\006\114\uffed\115\016\122\uffed\126\155\130\uffed\131" +
    "\uffed\132\uffed\001\002\000\066\003\176\006\043\021\171" +
    "\030\u013a\036\042\037\044\040\161\041\212\042\204\043" +
    "\201\061\033\062\214\064\041\065\034\066\045\067\031" +
    "\072\177\076\164\100\213\106\165\110\172\114\173\122" +
    "\203\130\206\131\205\132\166\001\002\000\016\002\ufff3" +
    "\074\ufff3\111\ufff3\112\ufff3\115\ufff3\126\ufff3\001\002\000" +
    "\066\003\176\006\043\021\171\030\u013c\036\042\037\044" +
    "\040\161\041\212\042\204\043\201\061\033\062\214\064" +
    "\041\065\034\066\045\067\031\072\177\076\164\100\213" +
    "\106\165\110\172\114\173\122\203\130\206\131\205\132" +
    "\166\001\002\000\016\002\ufff7\074\ufff7\111\ufff7\112\ufff7" +
    "\115\ufff7\126\ufff7\001\002\000\004\062\u0141\001\002\000" +
    "\016\002\ufff9\074\ufff9\111\ufff9\112\ufff9\115\ufff9\126\ufff9" +
    "\001\002\000\004\062\u0140\001\002\000\004\006\143\001" +
    "\002\000\004\006\u012d\001\002\000\004\062\uffac\001\002" +
    "\000\004\062\uffad\001\002\000\004\062\uffae\001\002\000" +
    "\016\002\000\074\015\111\005\112\006\115\016\126\u013f" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\016\002\011\004\006\014\010\024\013\027" +
    "\003\030\007\001\001\000\012\004\u011f\014\010\024\013" +
    "\030\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u013c\024\u013d\001\001\000\004" +
    "\023\155\001\001\000\002\001\001\000\004\023\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\017\001\001\000\004\023\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\027\033\036\034" +
    "\031\035\034\037\026\001\001\000\004\016\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\027\033\036" +
    "\034\031\035\034\037\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\027\033\036\034\075\001\001" +
    "\000\010\022\027\033\036\034\074\001\001\000\010\022" +
    "\027\033\036\034\073\001\001\000\002\001\001\000\010" +
    "\022\027\033\036\034\060\001\001\000\002\001\001\000" +
    "\010\022\027\033\036\034\072\001\001\000\010\022\027" +
    "\033\036\034\071\001\001\000\010\022\027\033\036\034" +
    "\070\001\001\000\010\022\027\033\036\034\067\001\001" +
    "\000\010\022\027\033\036\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\027\033\036\034\031\035\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\027" +
    "\033\036\034\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\027\033\036\034\031\035\034\037\124\040" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\027\033\036\034\031\035\034\037\125\001\001\000" +
    "\004\016\100\001\001\000\004\016\100\001\001\000\014" +
    "\022\027\033\036\034\031\035\034\037\132\001\001\000" +
    "\002\001\001\000\014\022\027\033\036\034\031\035\034" +
    "\037\131\001\001\000\004\016\100\001\001\000\004\016" +
    "\100\001\001\000\002\001\001\000\014\022\027\033\036" +
    "\034\031\035\034\037\135\001\001\000\004\016\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\143\025\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0121\001\001\000\002\001\001\000\012\004\006\014" +
    "\153\027\151\036\152\001\001\000\010\004\u011f\014\153" +
    "\036\u011e\001\001\000\040\003\162\006\157\010\206\011" +
    "\167\012\207\021\210\022\027\026\173\032\177\033\036" +
    "\034\031\035\034\037\174\041\166\043\161\001\001\000" +
    "\004\023\155\001\001\000\004\023\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\027\033\036\034\031\035\034\037\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\027\033\036\034\031\035\034\037\377\001" +
    "\001\000\002\001\001\000\004\022\354\001\001\000\002" +
    "\001\001\000\004\016\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\027\033\036" +
    "\034\031\035\034\037\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\027\033\036\034\031\035\034" +
    "\037\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\027\033\036\034\031\035\034\037\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\027\033\036" +
    "\034\031\035\034\037\232\001\001\000\014\022\027\033" +
    "\036\034\031\035\034\037\230\001\001\000\014\022\027" +
    "\033\036\034\031\035\034\037\226\001\001\000\014\022" +
    "\027\033\036\034\031\035\034\037\224\001\001\000\016" +
    "\022\027\032\221\033\036\034\031\035\034\037\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\100" +
    "\001\001\000\004\016\100\001\001\000\002\001\001\000" +
    "\004\016\100\001\001\000\002\001\001\000\004\016\100" +
    "\001\001\000\002\001\001\000\004\016\100\001\001\000" +
    "\002\001\001\000\004\036\235\001\001\000\040\003\162" +
    "\006\157\010\206\011\167\012\207\021\210\022\027\026" +
    "\173\032\177\033\036\034\031\035\034\037\174\041\166" +
    "\043\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\241\022\027\032\177\033\036\034\031\035\034" +
    "\037\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\100\001\001\000\002\001\001" +
    "\000\020\012\247\022\027\032\177\033\036\034\031\035" +
    "\034\037\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\252\001\001\000\040\003\162\006\157\010" +
    "\206\011\167\012\207\021\210\022\027\026\173\032\177" +
    "\033\036\034\031\035\034\037\174\041\166\043\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\100\001\001\000\010\022\264" +
    "\033\267\050\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\264\033\267\050\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\264\033\267\050\325" +
    "\001\001\000\002\001\001\000\010\022\264\033\267\050" +
    "\324\001\001\000\010\022\264\033\267\050\323\001\001" +
    "\000\010\022\264\033\267\050\322\001\001\000\010\022" +
    "\264\033\267\050\302\001\001\000\002\001\001\000\010" +
    "\022\264\033\267\050\320\001\001\000\010\022\264\033" +
    "\267\050\316\001\001\000\010\022\264\033\267\050\314" +
    "\001\001\000\010\022\264\033\267\050\312\001\001\000" +
    "\010\022\264\033\267\050\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\027\033\036\034\031\035" +
    "\034\037\124\040\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\335\001\001\000\006\045\337\046\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\264\033\267\050\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\345\001\001\000\040\003\162\006" +
    "\157\010\206\011\167\012\207\021\210\022\027\026\173" +
    "\032\177\033\036\034\031\035\034\037\174\041\166\043" +
    "\161\001\001\000\002\001\001\000\004\036\350\001\001" +
    "\000\040\003\162\006\157\010\206\011\167\012\207\021" +
    "\210\022\027\026\173\032\177\033\036\034\031\035\034" +
    "\037\174\041\166\043\161\001\001\000\004\016\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\361\022\027\032\177\033\036\034\031\035\034" +
    "\037\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\364\001\001\000\040\003\162\006\157\010\206" +
    "\011\167\012\207\021\210\022\027\026\173\032\177\033" +
    "\036\034\031\035\034\037\174\041\166\043\161\001\001" +
    "\000\004\007\367\001\001\000\004\006\371\001\001\000" +
    "\002\001\001\000\004\036\375\001\001\000\002\001\001" +
    "\000\004\036\373\001\001\000\040\003\162\006\157\010" +
    "\206\011\167\012\207\021\210\022\027\026\173\032\177" +
    "\033\036\034\031\035\034\037\174\041\166\043\161\001" +
    "\001\000\002\001\001\000\040\003\162\006\157\010\206" +
    "\011\167\012\207\021\210\022\027\026\173\032\177\033" +
    "\036\034\031\035\034\037\174\041\166\043\161\001\001" +
    "\000\002\001\001\000\004\016\100\001\001\000\022\012" +
    "\u0103\022\027\032\177\033\036\034\031\035\034\037\174" +
    "\051\u0101\001\001\000\002\001\001\000\020\012\u0104\022" +
    "\027\032\177\033\036\034\031\035\034\037\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\u010a\022" +
    "\027\032\177\033\036\034\031\035\034\037\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\u010d\005\u010f" +
    "\012\u0110\013\u010c\014\153\022\027\032\177\033\036\034" +
    "\031\035\034\037\174\001\001\000\002\001\001\000\022" +
    "\005\u0115\012\u0110\022\027\032\177\033\036\034\031\035" +
    "\034\037\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u0112\012\u0110\022\027\032" +
    "\177\033\036\034\031\035\034\037\174\001\001\000\002" +
    "\001\001\000\022\005\u0114\012\u0110\022\027\032\177\033" +
    "\036\034\031\035\034\037\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u0117\012\u0110\022\027\032" +
    "\177\033\036\034\031\035\034\037\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u011a\001\001\000" +
    "\040\003\162\006\157\010\206\011\167\012\207\021\210" +
    "\022\027\026\173\032\177\033\036\034\031\035\034\037" +
    "\174\041\166\043\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\100\001\001\000\040\003\162\006" +
    "\157\010\206\011\167\012\207\021\210\022\027\026\173" +
    "\032\177\033\036\034\031\035\034\037\174\041\166\043" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\006\014\153\027" +
    "\u0124\036\u0125\001\001\000\010\004\u011f\014\153\036\u0127" +
    "\001\001\000\040\003\162\006\157\010\206\011\167\012" +
    "\207\021\210\022\027\026\173\032\177\033\036\034\031" +
    "\035\034\037\174\041\166\043\161\001\001\000\002\001" +
    "\001\000\040\003\162\006\157\010\206\011\167\012\207" +
    "\021\210\022\027\026\173\032\177\033\036\034\031\035" +
    "\034\037\174\041\166\043\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\143\025\u012e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\006\014\153\027" +
    "\u0131\036\u0132\001\001\000\010\004\u011f\014\153\036\u0134" +
    "\001\001\000\040\003\162\006\157\010\206\011\167\012" +
    "\207\021\210\022\027\026\173\032\177\033\036\034\031" +
    "\035\034\037\174\041\166\043\161\001\001\000\002\001" +
    "\001\000\040\003\162\006\157\010\206\011\167\012\207" +
    "\021\210\022\027\026\173\032\177\033\036\034\031\035" +
    "\034\037\174\041\166\043\161\001\001\000\002\001\001" +
    "\000\012\004\006\014\153\027\u0137\036\u0138\001\001\000" +
    "\010\004\u011f\014\153\036\u013a\001\001\000\040\003\162" +
    "\006\157\010\206\011\167\012\207\021\210\022\027\026" +
    "\173\032\177\033\036\034\031\035\034\037\174\041\166" +
    "\043\161\001\001\000\002\001\001\000\040\003\162\006" +
    "\157\010\206\011\167\012\207\021\210\022\027\026\173" +
    "\032\177\033\036\034\031\035\034\037\174\041\166\043" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\u013c\024\u013d\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    void syntaxError(Symbol sym, String message) {
        System.err.println("Error de sintaxis en línea " + sym.left + ": " + message);
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error in parser.");
    }

    @Override
    public void syntax_error(Symbol s) {
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String symbol = (s.value != null) ? s.value.toString() : "símbolo desconocido";
        String message = "Error de sintaxis no recuperable en línea " + (s.left) + ": Símbolo '" + symbol + "' no esperado.";
        System.err.println(message);
        throw new Exception("Error de análisis sintáctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GLOBAL_DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GLOBAL_DECLARACIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "El programa debe tener al menos una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL_DECLARACIONES ::= GLOBAL_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GLOBAL_DECLARACIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY GLOBAL_DECLARACIONES SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= T_DATO IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= T_DATO IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= VOID IDENTIFIER LPAREN RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= VOID IDENTIFIER LPAREN PARAMETROS RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= PARAMETROS COMMA T_DATO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= READ_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= CONTROL_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SWITCHs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= EXPRESIONES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTROL_STATEMENT ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTROL_STATEMENT ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTROL_STATEMENT ::= RETURN LITERALES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTROL_STATEMENT ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTROL_STATEMENT ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTROL_STATEMENT ::= BREAK 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTROL_STATEMENT ::= CONTINUE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTROL_STATEMENT ::= RETURN LITERALES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTROL_STATEMENT ::= RETURN IDENTIFIER 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta punto y coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STATEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= CONST T_DATO ID_LIST SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= VOID ID_LIST SEMICOLON 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Una variable no puede ser declarada void."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ID_LIST ::= ID_LIST COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID_LIST ::= ID_LIST COMMA IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID_LIST ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_LIST ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_IF ::= IF LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY ESTRUCTURA_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONES ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESIONES_LOGICAS ::= EXPRESIONES_LOGICAS OP_LOGICOS EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESIONES_LOGICAS ::= EXPRESIONES_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_LOGICAS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONES_RELACIONAL ::= EXPRESIONES_RELACIONAL OP_RELACIONALES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONES_RELACIONAL ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_ELSE ::= ELSE ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURA_ELSE ::= ELSE LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ESTRUCTURA_ELSE ::= ELSE error SENTENCIAS RCURLY 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Error en las llaves del else."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESTRUCTURA_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESTRUCTURA_WHILE ::= WHILE LPAREN EXPRESIONES RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DO_WHILE ::= DO LCURLY SENTENCIAS RCURLY WHILE LPAREN EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ESTRUCTURA_FOR ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIAS RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_FOR ::= DECLARACION EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_FOR ::= EXPRESION_FOR SEMICOLON EXPRESION_FOR SEMICOLON EXPRESION_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_FOR ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_FOR ::= error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión en `for` incorrecta. Se esperaba una asignación o una condición numérica válida."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES DEFAULT_STMT RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SWITCHs ::= SWITCH LPAREN EXPRESIONES_NUMERICAS RPAREN LCURLY CASES RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHs",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASES ::= CASES CASE_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASE_STMT ::= CASE EXPRESIONES_NUMERICAS COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEFAULT_STMT ::= DEFAULT COLON SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_STMT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // READ_WRITE ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // READ_WRITE ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // READ_WRITE ::= WRITE LPAREN LISTA_EXPRESIONES RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_WRITE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_EXPRESIONES ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_EXPRESIONES ::= COMMA EXPRESIONES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta expresión antes de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre expresiones."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T_DATO ::= INT LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_DATO ::= INT SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T_DATO ::= LONG INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T_DATO ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_DATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_RELACIONALES ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_RELACIONALES ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_RELACIONALES ::= LT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_RELACIONALES ::= GT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_RELACIONALES ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_RELACIONALES ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_LOGICOS ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_LOGICOS ::= AND_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_LOGICOS ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_ARITMETICOS ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_ARITMETICOS ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_ARITMETICOS ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP_ARITMETICOS ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP_ARITMETICOS ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP_ARITMETICOS ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_ARITMETICOS ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_ARITMETICOS ::= PLUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_ARITMETICOS ::= MINUS_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_ARITMETICOS ::= TIMES_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_ARITMETICOS ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LITERALES ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LITERALES ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LITERALES ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LITERALES ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LITERALES ::= BINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARGUMENTOS ::= EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARGUMENTOS ::= ARGUMENTOS COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARGUMENTOS ::= ARGUMENTOS error EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta coma entre argumentos."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARGUMENTOS ::= ARGUMENTOS COMMA error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta argumento después de la coma."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARGUMENTOS ::= COMMA EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "falta un argumento antes de la coma." ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_ARITMETICA ::= LPAREN EXPRESIONES_LOGICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_ARITMETICA ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_ARITMETICA ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION_ARITMETICA ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION_ARITMETICA ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA PLUS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MINUS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA TIMES 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA DIVIDE 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA MOD 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION_ARITMETICA ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION_ARITMETICA ::= error TIMES EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION_ARITMETICA ::= error DIVIDE EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION_ARITMETICA ::= error PLUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION_ARITMETICA ::= error MINUS EXPRESION_ARITMETICA 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESIONES_NUMERICAS ::= LPAREN EXPRESIONES_NUMERICAS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESIONES_NUMERICAS ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN ARGUMENTOS RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESIONES_NUMERICAS ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESIONES_NUMERICAS ::= LITERALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESIONES_NUMERICAS ::= INCREMENTO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS PLUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MINUS error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS TIMES error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS DIVIDE error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESIONES_NUMERICAS ::= EXPRESIONES_NUMERICAS MOD error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando después de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESIONES_NUMERICAS ::= error PLUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '+'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESIONES_NUMERICAS ::= error MINUS EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '-'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESIONES_NUMERICAS ::= error TIMES EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '*'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESIONES_NUMERICAS ::= error DIVIDE EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '/'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESIONES_NUMERICAS ::= error MOD EXPRESIONES_NUMERICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta operando antes de '%'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESIONES_NUMERICAS ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida dentro de paréntesis."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NUMERICAS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INCREMENTO_DECREMENTO ::= IDENTIFIER INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INCREMENTO_DECREMENTO ::= IDENTIFIER DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INCREMENTO_DECREMENTO ::= INC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INCREMENTO_DECREMENTO ::= DEC_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INCREMENTO_DECREMENTO ::= error DEC_OP 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INCREMENTO_DECREMENTO ::= error INC_OP 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INCREMENTO_DECREMENTO ::= INC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '++'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INCREMENTO_DECREMENTO ::= DEC_OP error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes o despues de '--'."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION_ASIGNACION ::= IDENTIFIER PLUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '+=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION_ASIGNACION ::= IDENTIFIER MINUS_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '-=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION_ASIGNACION ::= IDENTIFIER TIMES_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '*=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESION_ASIGNACION ::= IDENTIFIER DIV_ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '/=' en asignación compuesta."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESION_ASIGNACION ::= IDENTIFIER ASSIGN error 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Expresión inválida después de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPRESION_ASIGNACION ::= PLUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '+='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPRESION_ASIGNACION ::= MINUS_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '-='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION_ASIGNACION ::= TIMES_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '*='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION_ASIGNACION ::= DIV_ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '/='."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION_ASIGNACION ::= ASSIGN EXPRESIONES_LOGICAS 
            {
              Object RESULT =null;
		 syntaxError(((Symbol) stack.peek()), "Falta el identificador antes de '=' en asignación."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
