
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import parser.ParseNode;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\007\004\000\002\007\003" +
    "\000\002\006\011\000\002\006\007\000\002\006\010\000" +
    "\002\006\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\007\000\002\006\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\011\000\002\010" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\014\074\007\101\006\105\011\111\013\126" +
    "\010\001\002\000\004\062\017\001\002\000\016\002\014" +
    "\074\007\101\006\105\011\111\013\126\010\001\002\000" +
    "\004\062\ufff0\001\002\000\004\062\ufff2\001\002\000\004" +
    "\062\uffef\001\002\000\004\062\ufff1\001\002\000\016\002" +
    "\uffff\074\uffff\101\uffff\105\uffff\111\uffff\126\uffff\001\002" +
    "\000\004\062\ufff3\001\002\000\004\002\001\001\002\000" +
    "\016\002\000\074\000\101\000\105\000\111\000\126\000" +
    "\001\002\000\004\021\020\001\002\000\004\021\uffee\001" +
    "\002\000\012\006\023\061\022\070\021\110\025\001\002" +
    "\000\020\004\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\024" +
    "\uffe7\102\uffe7\001\002\000\020\004\uffe8\005\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\024\uffe8\102\uffe8\001\002\000\012\006" +
    "\023\061\022\070\021\110\025\001\002\000\014\004\031" +
    "\005\034\010\032\011\033\024\044\001\002\000\004\006" +
    "\026\001\002\000\012\006\023\061\022\070\021\110\025" +
    "\001\002\000\014\004\031\005\034\007\030\010\032\011" +
    "\033\001\002\000\012\006\023\061\022\070\021\110\025" +
    "\001\002\000\012\006\023\061\022\070\021\110\025\001" +
    "\002\000\012\006\023\061\022\070\021\110\025\001\002" +
    "\000\012\006\023\061\022\070\021\110\025\001\002\000" +
    "\012\006\023\061\022\070\021\110\025\001\002\000\020" +
    "\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\024\uffeb\102" +
    "\uffeb\001\002\000\020\004\uffea\005\uffea\007\uffea\010\uffea" +
    "\011\uffea\024\uffea\102\uffea\001\002\000\020\004\uffec\005" +
    "\034\007\uffec\010\uffec\011\033\024\uffec\102\uffec\001\002" +
    "\000\020\004\uffed\005\034\007\uffed\010\uffed\011\033\024" +
    "\uffed\102\uffed\001\002\000\020\004\031\005\034\007\uffe5" +
    "\010\032\011\033\024\uffe5\102\042\001\002\000\012\006" +
    "\023\061\022\070\021\110\025\001\002\000\020\004\uffe6" +
    "\005\uffe6\007\uffe6\010\uffe6\011\uffe6\024\uffe6\102\uffe6\001" +
    "\002\000\016\002\ufffe\074\ufffe\101\ufffe\105\ufffe\111\ufffe" +
    "\126\ufffe\001\002\000\014\004\031\005\034\007\046\010" +
    "\032\011\033\001\002\000\020\004\uffe9\005\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\024\uffe9\102\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\010\002\004\003\011\004\003\001\001\000" +
    "\004\005\015\001\001\000\006\003\014\004\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\026\001\001\000\002\001\001" +
    "\000\004\010\040\001\001\000\004\010\037\001\001\000" +
    "\004\010\036\001\001\000\004\010\035\001\001\000\004" +
    "\010\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ParseNode Arbol = new ParseNode("Arbol");

    //algunos errores
    public void syntax_error(Symbol s){
      System.out.println("Error sintáctico en la línea " + s.left + " columna " + s.right);
    }

    public void fatal_error(Symbol s) {
        System.out.println("Error fatal en la línea " + s.left + " columna " + s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode start_val = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program declaration 
            {
              ParseNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode d = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                      if (RESULT == null) {
                        RESULT = Arbol; // Asegura que RESULT apunte al nodo raíz "Arbol"
                      }
                      ((ParseNode) Arbol).addChild(d); // Agrega la declaración como hijo de Arbol
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declaration 
            {
              ParseNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode d = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = Arbol; // Asegura que el resultado esté en el árbol global
                      ((ParseNode) Arbol).addChild(d); // Primera declaración agregada al árbol
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= typeSpec declarator ASSIGN expr SEMICOLON 
            {
              ParseNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParseNode t = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParseNode d = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode e = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ParseNode node = new ParseNode("declaration");
                    node.addChild(t);    // Añade el tipo como ParseNode
                    node.addChild(d);    // Añade el identificador como ParseNode
                    node.addChild(e);    // Añade la expresión de asignación como ParseNode
                    RESULT = node;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list stmt 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= IF LPAREN expr RPAREN stmt 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= ID LPAREN RPAREN LBRACE stmt_list RBRACE 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= ID LPAREN RPAREN LBRACE RBRACE 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= INT ID SEMICOLON 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= FLOAT ID SEMICOLON 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= PRINTF LPAREN expr RPAREN SEMICOLON 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= expr SEMICOLON 
            {
              ParseNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typeSpec ::= INT 
            {
              ParseNode RESULT =null;
		 RESULT = new ParseNode("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typeSpec ::= CHAR 
            {
              ParseNode RESULT =null;
		 RESULT = new ParseNode("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typeSpec ::= FLOAT 
            {
              ParseNode RESULT =null;
		 RESULT = new ParseNode("float"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typeSpec ::= DOUBLE 
            {
              ParseNode RESULT =null;
		 RESULT = new ParseNode("double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typeSpec ::= VOID 
            {
              ParseNode RESULT =null;
		 RESULT = new ParseNode("void"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarator ::= IDENTIFIER 
            {
              ParseNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ParseNode(id.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr PLUS expr 
            {
              ParseNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode e1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode e2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ParseNode node = new ParseNode("+");
            node.addChild(e1);  // Convierte e1 a ParseNode
            node.addChild(e2);  // Convierte e2 a ParseNode
            RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MINUS expr 
            {
              ParseNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode e1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode e2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ParseNode node = new ParseNode("-");
            node.addChild(e1);  // Convierte e1 a ParseNode
            node.addChild(e2);  // Convierte e2 a ParseNode
            RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr TIMES expr 
            {
              ParseNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode e1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode e2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ParseNode node = new ParseNode("*");
            node.addChild(e1);  // Convierte e1 a ParseNode
            node.addChild(e2);  // Convierte e2 a ParseNode
            RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr DIVIDE expr 
            {
              ParseNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode e1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode e2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ParseNode node = new ParseNode("/");
            node.addChild(e1);  // Convierte e1 a ParseNode
            node.addChild(e2);  // Convierte e2 a ParseNode
            RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= LPAREN expr RPAREN 
            {
              ParseNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode e = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NUMBER 
            {
              ParseNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParseNode(n.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= DOUBLE_LITERAL 
            {
              ParseNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParseNode(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IF LPAREN expr RPAREN expr ELSE expr 
            {
              ParseNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParseNode cond = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode thenStmt = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode elseStmt = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ParseNode node = new ParseNode("if");
            node.addChild(cond);      
            node.addChild(thenStmt);  
            node.addChild(elseStmt);  
            RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= IF LPAREN expr RPAREN expr 
            {
              ParseNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode cond = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParseNode thenStmt = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ParseNode node = new ParseNode("if");
            node.addChild(cond);      
            node.addChild(thenStmt);  
            RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
