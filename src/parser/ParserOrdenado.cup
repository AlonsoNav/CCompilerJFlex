// Define el paquete del parser
package parser;

import java_cup.runtime.*;
import parser.ParseNode;

// Secci√≥n de funciones auxiliares para construir nodos
parser code {:
    ParseNode Arbol = new ParseNode("Arbol");
:};

// Define las terminales (tokens) que provienen de JFlex
terminal PLUS, TIMES, LPAREN, RPAREN, MINUS, DIVIDE, MOD, NOT_OP, 
         BIT_AND, COMMA, DOT, LT_OP, GT_OP, ASSIGN, QUESTION, COLON, 
         SEMICOLON, LBRACKET, RBRACKET, LCURLY, RCURLY, 
         BIT_OR, BIT_NOT, BIT_XOR, AND_OP, OR_OP, INC_OP, DEC_OP,
         PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, 
         LSHIFT, RSHIFT, LSHIFT_ASSIGN, RSHIFT_ASSIGN, BIT_AND_ASSIGN, BIT_OR_ASSIGN, 
         BIT_XOR_ASSIGN, NE_OP, EQ_OP, LE_OP, GE_OP, PTR_OP, NUMBER, IDENTIFIER,
         STRING_LITERAL, CHAR_LITERAL, HEX_LITERAL, OCTAL_LITERAL, BINARY_LITERAL, 
         DOUBLE_LITERAL, AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, 
         DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER, 
         RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, 
         UNSIGNED, VOID, VOLATILE, WHILE, READ, WRITE, MAIN;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IFs, IF_ELSE,
    WHILEs, DO_WHILE, FORs, SENTENCIA_BOOLEANA, SENTENCIA_FOR, T_dato;

start with INICIO;

INICIO ::= 
    INT MAIN LPAREN RPAREN LCURLY SENTENCIA RCURLY |
    MAIN LPAREN RPAREN LCURLY SENTENCIA RCURLY
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;
DECLARACION ::= 
    T_dato IDENTIFIER SEMICOLON | 
    T_dato IDENTIFIER PLUS_ASSIGN NUMBER SEMICOLON |
    T_dato IDENTIFIER MINUS_ASSIGN NUMBER SEMICOLON |
    T_dato IDENTIFIER TIMES_ASSIGN NUMBER SEMICOLON |
    T_dato IDENTIFIER DIV_ASSIGN NUMBER SEMICOLON |
    T_dato IDENTIFIER MOD_ASSIGN NUMBER SEMICOLON |
    T_dato IDENTIFIER ASSIGN NUMBER SEMICOLON |
    T_dato IDENTIFIER INC_OP SEMICOLON |
    T_dato IDENTIFIER DEC_OP SEMICOLON 
;
IFs ::= IF LPAREN SENTENCIA_BOOLEANA RPAREN LCURLY SENTENCIA RCURLY
;

SENTENCIA_BOOLEANA ::= 
    IDENTIFIER EQ_OP NUMBER |
    IDENTIFIER NE_OP NUMBER |
    IDENTIFIER LT_OP NUMBER |
    IDENTIFIER GT_OP NUMBER |
    IDENTIFIER LE_OP NUMBER |
    IDENTIFIER GE_OP NUMBER |
    IDENTIFIER EQ_OP IDENTIFIER |
    IDENTIFIER NE_OP IDENTIFIER |
    IDENTIFIER LT_OP IDENTIFIER |
    IDENTIFIER GT_OP IDENTIFIER |
    IDENTIFIER LE_OP IDENTIFIER |
    IDENTIFIER GE_OP IDENTIFIER |
    IDENTIFIER EQ_OP STRING_LITERAL |
    IDENTIFIER NE_OP STRING_LITERAL |
    IDENTIFIER EQ_OP CHAR_LITERAL |
    IDENTIFIER NE_OP CHAR_LITERAL |
    IDENTIFIER EQ_OP DOUBLE_LITERAL |
    IDENTIFIER NE_OP DOUBLE_LITERAL |
    IDENTIFIER EQ_OP BINARY_LITERAL |
    IDENTIFIER NE_OP BINARY_LITERAL |
    IDENTIFIER EQ_OP HEX_LITERAL |
    IDENTIFIER NE_OP HEX_LITERAL |
    IDENTIFIER EQ_OP OCTAL_LITERAL |
    IDENTIFIER NE_OP OCTAL_LITERAL
;

IF_ELSE ::= IF LPAREN SENTENCIA_BOOLEANA RPAREN LCURLY SENTENCIA RCURLY ELSE LCURLY SENTENCIA RCURLY
;
WHILEs ::= WHILE LPAREN SENTENCIA_BOOLEANA RPAREN LCURLY SENTENCIA RCURLY
;
DO_WHILE ::= DO LCURLY SENTENCIA RCURLY WHILE LPAREN SENTENCIA_BOOLEANA RPAREN SEMICOLON
;
FORs ::= FOR LPAREN SENTENCIA_FOR RPAREN LCURLY SENTENCIA RCURLY
;
SENTENCIA_FOR ::=
    T_dato IDENTIFIER ASSIGN NUMBER SEMICOLON SENTENCIA_BOOLEANA SEMICOLON DECLARACION_FOR |
    IDENTIFIER ASSIGN NUMBER SEMICOLON SENTENCIA_BOOLEANA SEMICOLON DECLARACION_FOR
;
DECLARACION_FOR ::= 
    IDENTIFIER PLUS_ASSIGN NUMBER |
    IDENTIFIER MINUS_ASSIGN NUMBER |
    IDENTIFIER TIMES_ASSIGN NUMBER |
    IDENTIFIER DIV_ASSIGN NUMBER |
    IDENTIFIER MOD_ASSIGN NUMBER |
    IDENTIFIER INC_OP | 
    IDENTIFIER DEC_OP |
    INC_OP IDENTIFIER |
    DEC_OP IDENTIFIER
;

T_dato ::= INT | CHAR | DOUBLE | FLOAT |;
